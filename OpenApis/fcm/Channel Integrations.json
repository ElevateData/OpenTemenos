{
  "openapi": "3.0.1",
  "info": {
    "title": "Channel Integrations",
    "description": "Use this API to calculate the existing customer risk and generate the risk calculation result as response.\n\nIf the customer does not already exist, you will need to first save the customer to calculate the risk.\n\n**Note**: To use this API, request an API key from apidocs.temenos.com. Create an account with the community to get started.\n\nThis is a snapshot of the Swagger document. The complete document is provided as part of a FCM release via the [FCM Team](https://www.temenos.com/contact-us/#contact).\n\nTo learn more about Temenos FCM visit [temenos.com](https://www.temenos.com/products/financial-crime-mitigation/)\n\n\n",
    "termsOfService": "http://api.temenos.com/terms/",
    "license": {
      "name": "Temenos API License 2.0"
    },
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "https://api.temenos.com/api/v1.0.0/fcm/channel-integrations",
      "description": "MultiProduct API Sandbox"
    }
  ],
  "paths": {
    "/api/v1/computations/customer/calculateRisk": {
      "post": {
        "tags": [
          "Customer Risk Computation"
        ],
        "summary": "To compute the customer risk using risk matrix of customer's company",
        "description": "To calculate the existing customer risk and will provide the risk calculate result as response <br />Note: if customer does not exist already then customer will be saved first to calculate the risk",
        "operationId": "calculateRisk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRiskCalculationResult"
                }
              }
            }
          },
          "400": {
            "description": "No risk matrix could not be found for that customer."
          },
          "403": {
            "description": "The authenticated user is not authorized to update a customer or to compute a risk"
          },
          "404": {
            "description": "The mandatory data's are not found in the request"
          }
        }
      }
    },
    "/api/v1/computations/customer/form/submit": {
      "post": {
        "tags": [
          "Customer Form Submission"
        ],
        "summary": "To submit answers of the form for a customer",
        "description": "To submits customers answers of a form, returns the computed risk after customer details updated with form's answers. Onboarding as well as Enhance Due Diligence form submission can be made via this service.<br/>Note : Form should be already available and in active state",
        "operationId": "formSubmit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormSubmit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRiskCalculationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request format/data is invalid"
          },
          "403": {
            "description": "The authenticated user is not authorized to update a customer or to compute a risk"
          },
          "404": {
            "description": "No such form exists."
          }
        }
      }
    },
    "/api/v1/computations/screen/onboard/scan/xml": {
      "post": {
        "tags": [
          "Onboarding Customer Scan"
        ],
        "summary": "To scan a customer in a onboarding process (XML)",
        "description": "To scan a individual/company customer in a onboarding process with minimal details of the customer to determine if found in sanction lists. <br/><br/><i>Note:</i> entity_type in the request can be either individual or company. <br /><ul><li>If entity_type is individual, individual_info element must be filled for successful response. In case both individual_info & company_info details present in the request, company_info details will be ignored and response will have a warning message on the same. </li><li>If entity_type is company, company_info element must be filled for successful response. In case both company_info & individual_info details present in the request, individual_info details will be ignored and response will have a warning message on the same. </li></ul>",
        "operationId": "onboardScanXml",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/onboarding_scan_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API success response.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ScanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request has been provided."
          },
          "403": {
            "description": "The authenticated user is not authorized to make the onboarding scan."
          },
          "500": {
            "description": "Connection error while communicating with the scan engine or Internal server error."
          }
        }
      }
    },
    "/api/v1/computations/screen/onboard/scan/json": {
      "post": {
        "tags": [
          "Onboarding Customer Scan"
        ],
        "summary": "To scan a customer in a onboarding process (JSON)",
        "description": "To scan a individual/company customer in a onboarding process with minimal details of the customer to determine if found in sanction lists. <br/><br/><i>Note:</i> entity_type in the request can be either individual or company. <br /><ul><li>If entity_type is individual, individual_info element must be filled for successful response. In case both individual_info & company_info details present in the request, company_info details will be ignored and response will have a warning message on the same. </li><li>If entity_type is company, company_info element must be filled for successful response. In case both company_info & individual_info details present in the request, individual_info details will be ignored and response will have a warning message on the same. </li></ul>",
        "operationId": "onboardScanJson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardScanRequestSchemaWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API success response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request has been provided."
          },
          "403": {
            "description": "The authenticated user is not authorized to make the onboarding scan."
          },
          "500": {
            "description": "Connection error while communicating with the scan engine or Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "JsonRiskCalculationResult": {
        "type": "object",
        "properties": {
          "customerId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for a customer",
            "example": "45221"
          },
          "formSubmissionId": {
            "type": "integer",
            "format": "int32"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next review date this, is configured in the risk matrix and depends on the risk status, it can be empty if there is no configuration in the risk matrix.",
            "example": "2020/07/07 10:21:33"
          },
          "responseStatus": {
            "type": "string",
            "description": "The response status calculated by the Fraud detection module, possible values: ALLOW, BLOCK",
            "example": "ALLOW",
            "enum": [
              "ALLOW",
              "BLOCK"
            ]
          },
          "riskCalculationDate": {
            "type": "string",
            "description": "The date the risk is calculated.",
            "example": "2020/07/07 10:21:33"
          },
          "riskLevel": {
            "type": "integer",
            "description": "This is a long value that represents the risk level.",
            "format": "int64",
            "example": 300
          },
          "riskStatus": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "This is a string representing the risk status, the possible values are configured in the risk matrix.",
            "example": "LOW"
          }
        }
      },
      "JsonAssessment": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "This is mapped as the AssessmentType.name in FCM",
            "example": "Intended Products"
          },
          "value": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "This is the actual name of the FCM Assessment",
            "example": "Loan"
          }
        },
        "description": "List of assessments for the customer, can be empty."
      },
      "JsonCifField": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Name of the dynamic (sytem-specific) field",
            "example": "mail"
          },
          "value": {
            "type": "string",
            "description": "Actual value of the field for the customer",
            "example": "customer@fcm.com"
          }
        },
        "description": "List of customer dynamic fields, can be empty."
      },
      "JsonCustomer": {
        "required": [
          "customerDetails"
        ],
        "type": "object",
        "properties": {
          "assessments": {
            "type": "array",
            "description": "List of assessments for the customer, can be empty.",
            "items": {
              "$ref": "#/components/schemas/JsonAssessment"
            }
          },
          "cifFields": {
            "type": "array",
            "description": "List of customer dynamic fields, can be empty.",
            "items": {
              "$ref": "#/components/schemas/JsonCifField"
            }
          },
          "customerDetails": {
            "$ref": "#/components/schemas/JsonCustomerDetails"
          },
          "sectors": {
            "$ref": "#/components/schemas/JsonSectors"
          }
        },
        "description": "Full customer data, in json format"
      },
      "JsonCustomerDetails": {
        "required": [
          "application",
          "closed",
          "company",
          "coreData1",
          "coreData2",
          "coreData3",
          "coreData4",
          "coreData5",
          "customerId",
          "pep",
          "segmentCode",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The first line of the customer's address.",
            "example": "1285, AVENUE OF THE AMERICAS"
          },
          "address2": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The second line of the customer's address.",
            "example": "NEW YORK, NEW YORK"
          },
          "application": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The name of the last application that modified the current customer.",
            "example": "GUI-SectorLinking"
          },
          "bankId2": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "This can be used to store any bank information that fits, it was used before for custom implementations, can be left blank.",
            "example": "18001"
          },
          "birthCity": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The customer's birth city.",
            "example": "New York"
          },
          "birthCountry": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO country code of the country in which the customer was born.",
            "example": "BE"
          },
          "birthDate": {
            "type": "string",
            "description": "The customer's birth date formatted as : yyyy-MM-dd HH:mm:ss",
            "example": "1930-01-10 00:00:00"
          },
          "branch": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The customer's bank branch",
            "example": "GB0010001"
          },
          "careOf": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "This is a legacy field(was used in the old VIVEO profile), but is required in the FCM DB so it can be defaulted to false.",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "city": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "City of residence.",
            "nullable": true,
            "example": "New York"
          },
          "closed": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "If true this means that the customer relationship with the bank has terminated(customer no longer active).",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "company": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The customer's company name.",
            "example": "GB0010002"
          },
          "coreData1": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "This is bank specific and it is used to defined customer specific parameters(bank can define their own meaning) it is currently used in the profile rules, if bank doesn't has a use for this it can be filled with 0.0 as default value.",
            "example": "0.5"
          },
          "coreData2": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "This is bank specific and it is used to defined customer specific parameters(bank can define their own meaning) it is currently used in the profile rules, if bank doesn't has a use for this it can be filled with 0.0 as default value.",
            "example": "0.5",
            "default": "0.0"
          },
          "coreData3": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "This is bank specific and it is used to defined customer specific parameters(bank can define their own meaning) it is currently used in the profile rules, if bank doesn't has a use for this it can be filled with 0.0 as default value.",
            "example": "0.5",
            "default": "0.0"
          },
          "coreData4": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "This is bank specific and it is used to defined customer specific parameters(bank can define their own meaning) it is currently used in the profile rules, if bank doesn't has a use for this it can be filled with 0.0 as default value.",
            "example": "0.5",
            "default": "0.0"
          },
          "coreData5": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "This is bank specific and it is used to defined customer specific parameters(bank can define their own meaning) it is currently used in the profile rules, if bank doesn't has a use for this it can be filled with 0.0 as default value.",
            "example": "0.5",
            "default": "0.0"
          },
          "country": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO Country code of the country of the customer.",
            "example": "BE"
          },
          "customerId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique id for the customer",
            "example": "BE"
          },
          "firstName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "First name/Given name of the customer",
            "example": "Jean-Jacques"
          },
          "fiscalCountry": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO Country code of the fiscal country of the customer.",
            "example": "BE"
          },
          "name": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Name (family name) of the customer",
            "example": "Jean-Jacques"
          },
          "natCountry": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO Country of nationality of the customer.",
            "example": "BE"
          },
          "nationalId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "National identifier for the customer in his/her country.",
            "example": "GE5Z4342333"
          },
          "occupation": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The occupation of the customer.",
            "example": "Consultant"
          },
          "passportNumber": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Passport number for the customer in his/her country.",
            "example": "GE5Z4342333"
          },
          "pep": {
            "type": "string",
            "description": "Specifies whether the customer is a Politically Exposed Person or not.",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "segmentCode": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "The code of the customer segment profile, the code meaning is further defined in PRO_SEGMENT FCM table we can tell for example if the customer is an Individual or a Company, the risk calculation will not be done if this is empty.",
            "example": "8899"
          },
          "socialSecurityNumber": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Social security number for the customer in his/her country.",
            "example": "GE5Z4342333"
          },
          "ssnCountry": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO Social Security Number Country of the customer.",
            "example": "BE"
          },
          "state": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "State of residence of the customer.",
            "example": "Ohio"
          },
          "telephoneNumberFix": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Fix telephone number of the customer.",
            "example": "+0430788888342"
          },
          "telephoneNumberMobile": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Mobile telephone number of the customer.",
            "example": "+0430788888341"
          },
          "title": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Honorific applied to customer.",
            "example": "Sir"
          },
          "typeId": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The type of the entity. If this field is mapped, it takes precedence to the value specified in the <entity type=\"…\"> element.\nWhen present, this value is used for the message type sent to the scanning engine.",
            "example": "T24"
          },
          "zipCode": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Zipcode of the customer's residence address.",
            "example": "098799"
          }
        },
        "description": "This object contains the actual customer fields."
      },
      "JsonSectors": {
        "type": "object",
        "properties": {
          "sectorNames": {
            "uniqueItems": true,
            "type": "array",
            "description": "An array with the FCM Sector(Segment) names the size of each name is limited to 254 characters.",
            "example": [
              "Gambling",
              "Agriculture",
              "Entertainment"
            ],
            "items": {
              "type": "string",
              "description": "An array with the FCM Sector(Segment) names the size of each name is limited to 254 characters.",
              "example": "[\"Gambling\",\"Agriculture\",\"Entertainment\"]"
            }
          }
        },
        "description": "Object containing an array of sector names."
      },
      "Answer": {
        "required": [
          "questionKey"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the question that was answered.",
            "example": "Annual income volume"
          },
          "questionKey": {
            "type": "string",
            "description": "The question key of the question that was answered.",
            "example": "84687f12-8fe2-4402-9ae3-0530f9e87390"
          },
          "value": {
            "type": "object",
            "description": "The value that represents the answer.",
            "example": "10K to 50K"
          },
          "valueOptionKeys": {
            "type": "array",
            "description": "An array with the answer options as keys for the answered question in case there is a multiple answer question.",
            "items": {
              "type": "string",
              "description": "An array with the answer options as keys for the answered question in case there is a multiple answer question."
            }
          }
        },
        "description": "Actual answers to the questions of the form."
      },
      "FormSubmit": {
        "required": [
          "answers",
          "formReference"
        ],
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "description": "Actual answers to the questions of the form.",
            "items": {
              "$ref": "#/components/schemas/Answer"
            }
          },
          "formReference": {
            "type": "string",
            "description": "Reference info identifier of the submitted form."
          }
        },
        "description": "Full answers to the form, including the mandatory form reference"
      },
      "AlertInfo": {
        "type": "object",
        "properties": {
          "record_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Reference entry record id",
            "example": "0a2001657531127081753192bf5d0057"
          },
          "source_ids": {
            "maxLength": 100,
            "type": "string",
            "description": "Watch list name",
            "example": "EU"
          }
        }
      },
      "RiskInformation": {
        "type": "object",
        "properties": {
          "hit_count": {
            "type": "integer",
            "description": "Total number of hits found",
            "format": "int32",
            "example": 2
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertInfo"
            }
          },
          "pep_hit_count": {
            "type": "integer",
            "description": "Total number of pep hits found",
            "format": "int32",
            "example": 1
          },
          "risk": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the risk type",
            "example": "ALERT.CIF.COFI"
          },
          "skip_count": {
            "type": "integer",
            "description": "Total number of hits skipped",
            "format": "int32",
            "example": 0
          }
        }
      },
      "ScanResponse": {
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskInformation"
            }
          },
          "error_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Error code of scan response"
          },
          "error_description": {
            "maxLength": 1024,
            "type": "string",
            "description": "Description of the error"
          },
          "gateway": {
            "maxLength": 16,
            "type": "string",
            "description": "Gateway of the transaction",
            "example": "CUSTOMER"
          },
          "giexp_timestamp": {
            "type": "string",
            "description": "Giexp time stamp",
            "format": "YYYY-MM-DD HH:mm:ss",
            "example": "2020-02-04 11:25:52"
          },
          "instance_name": {
            "type": "string",
            "description": "Name of the scan server instance"
          },
          "kb_timestamp": {
            "type": "string",
            "description": "KB time stamp",
            "format": "YYYY-MM-DD HH:mm:ss",
            "example": "2020-02-04 11:25:52"
          },
          "message_id": {
            "type": "string",
            "description": "Id of the message",
            "example": "a8653255-5ee0-401a-92d0"
          },
          "non_blocking_flag": {
            "type": "string",
            "description": "Status of Non blocking flag ",
            "example": "NO_HITS",
            "enum": [
              "NO_HITS",
              "BLOCKING_HITS_ONLY",
              "NON_BLOCKING_HITS_ONLY",
              "MIXED_HITS"
            ]
          },
          "server_port": {
            "type": "string",
            "description": "Server port number",
            "example": "5123"
          },
          "status": {
            "maxLength": 5,
            "type": "string",
            "description": "Status of scan response",
            "example": "OK"
          },
          "version": {
            "type": "string",
            "description": "Scan response version",
            "example": "1.2"
          }
        }
      },
      "EntityNames": {
        "type": "object",
        "properties": {
          "original_name": {
            "$ref": "#/components/schemas/OnboardingName"
          },
          "transcribed_name": {
            "$ref": "#/components/schemas/OnboardingName"
          }
        }
      },
      "OnboardingCompanyInfo": {
        "type": "object",
        "properties": {
          "actual_controllers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingEntity"
            }
          },
          "incorporation_country": {
            "maxLength": 3,
            "type": "string",
            "description": "Incorporation country code",
            "example": "US"
          },
          "organization_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Organization code",
            "example": "AG"
          },
          "shareholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingEntity"
            }
          },
          "tax_registration_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Company tax registration code",
            "example": "123456"
          }
        }
      },
      "OnboardingEntity": {
        "type": "object",
        "properties": {
          "company_info": {
            "$ref": "#/components/schemas/OnboardingCompanyInfo"
          },
          "entity_type": {
            "type": "string",
            "enum": [
              "individual",
              "company"
            ]
          },
          "individual_info": {
            "$ref": "#/components/schemas/OnboardingIndividualInfo"
          },
          "names": {
            "$ref": "#/components/schemas/EntityNames"
          },
          "related_entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingEntity"
            }
          },
          "relation_type": {
            "type": "string"
          }
        }
      },
      "OnboardingIdentifier": {
        "type": "object",
        "properties": {
          "country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country name",
            "example": "US"
          },
          "type": {
            "maxLength": 10,
            "type": "string",
            "description": "Type"
          },
          "value": {
            "type": "string",
            "description": "Value"
          }
        }
      },
      "OnboardingIndividualInfo": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string",
            "description": "Birth date of requester",
            "format": "date",
            "example": "1970-10-12"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingIdentifier"
            }
          }
        }
      },
      "OnboardingName": {
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "First name of customer",
            "example": "Jack"
          },
          "full_name": {
            "maxLength": 64,
            "type": "string",
            "description": "Full name of customer",
            "example": "Jack Nicholson"
          },
          "language": {
            "maxLength": 3,
            "type": "string",
            "description": "ISO standard language code of the customer",
            "example": "en"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "Last name of customer",
            "example": "Nicholson"
          }
        }
      },
      "onboarding_scan_request": {
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/OnboardingEntity"
          },
          "gateway": {
            "maxLength": 13,
            "type": "string",
            "description": "Gateway of the message",
            "example": "ONBOARDING"
          },
          "mandator": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the company",
            "example": "NA001"
          },
          "requester": {
            "maxLength": 64,
            "type": "string",
            "description": "Name of the requester",
            "example": "CUSTOMER"
          },
          "version": {
            "type": "string",
            "description": "Version of scan request",
            "example": "1.0",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "OnboardScanRequestSchemaWrapper": {
        "type": "object",
        "properties": {
          "onboarding_scan_request": {
            "$ref": "#/components/schemas/onboarding_scan_request"
          }
        },
        "description": "The request body"
      }
    },
    "securitySchemes": {
      "basicScheme": {
        "type": "https",
        "scheme": "basic"
      }
    }
  }
}