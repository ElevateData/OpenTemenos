//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Reference.Currencies
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICurrencyService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves Currencies details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="currencyIdNE">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrenciesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrenciesResponse> GetCurrenciesAsync(string? currencyId = null, string? currencyIdNE = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyInfoResponse> GetCurrencyInfoAsync(string currencyId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyInfoResponse> CreateCurrencyInfoAsync(string currencyId, CurrencyInfo payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyInfoResponse> UpdateCurrencyInfoAsync(string currencyId, CurrencyInfo payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyInfoResponse> DeleteCurrencyInfoAsync(string currencyId, CurrencyInfoDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves currency market details</summary>
        /// <param name="currencyMarketId">Specifies the code by which the Currency Market can be identified.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyMarketResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyMarketResponse> GetCurrencyMarketAsync(string currencyMarketId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates currency market details</summary>
        /// <param name="currencyMarketId">Specifies the code by which the Currency Market can be identified.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyMarketResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyMarketResponse> CreateCurrencyMarketAsync(string currencyMarketId, CurrencyMarket payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates currency market details</summary>
        /// <param name="currencyMarketId">Specifies the code by which the Currency Market can be identified.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyMarketResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyMarketResponse> UpdateCurrencyMarketAsync(string currencyMarketId, CurrencyMarket payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves ISO currency code</summary>
        /// <param name="numericCurrencyCode">Numeric code for the currency</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyFromNumericCodeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyFromNumericCodeResponse> GetCurrencyFromNumericCodeAsync(string numericCurrencyCode, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves currency historic details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="year">Contains the year in a standard ISO format</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyModificationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyModificationsResponse> GetCurrencyModificationsAsync(string currencyId, string year, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves ISO currency code</summary>
        /// <param name="rank">Indicates the rank of the payment order product within the group.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyForRankResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyForRankResponse> GetCurrencyForRankAsync(string rank, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves basic currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyBasicInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyBasicInfoResponse> GetCurrencyBasicInfoAsync(string currencyId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates basic currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyBasicInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyBasicInfoResponse> CreateCurrencyBasicInfoAsync(string currencyId, CurrencyBasicInfo payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates basic currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyBasicInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyBasicInfoResponse> UpdateCurrencyBasicInfoAsync(string currencyId, CurrencyBasicInfo payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete basic currency details</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CurrencyBasicInfoResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyBasicInfoResponse> DeleteCurrencyBasicInfoAsync(string currencyId, CurrencyBasicInfoDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrenciesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrenciesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrenciesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrenciesResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyInfoResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyInfoResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyInfoResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyInfoResponseBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames>? DisplayNames { get; set; }= default!;
    
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("markets")]
        public System.Collections.Generic.ICollection<Markets>? Markets { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rateInformation")]
        public System.Collections.Generic.ICollection<RateInformation>? RateInformation { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("equivalentCurrencies")]
        public System.Collections.Generic.ICollection<EquivalentCurrencies>? EquivalentCurrencies { get; set; }= default!;
    
        /// <summary>Indicates the rank of the payment order product within the group.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rank")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? Rank { get; set; }= default!;
    
        /// <summary>Numeric code for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numericCurrencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? NumericCurrencyCode { get; set; }= default!;
    
        /// <summary>Indicates the applicable number of decimal positions for amount calculations and display purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberofDecimal")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? NumberofDecimal { get; set; }= default!;
    
        /// <summary>Identifies the method of quotation of the exchange rate for the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? QuotationCode { get; set; }= default!;
    
        /// <summary>Identifies the decimal displacement of percentage in points for a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationPips")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? QuotationPips { get; set; }= default!;
    
        /// <summary>Indicates the number of days prior to rollover or renewal date on which the notice to be sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noticeDay")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? NoticeDay { get; set; }= default!;
    
        /// <summary>Defines the number of working days forward, from the Run date, to commence detailed Nostro reporting.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroProjectionDay")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NostroProjectionDay { get; set; }= default!;
    
        /// <summary>Defines the method of calculation for accrued interest on a Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestDayBasis")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InterestDayBasis { get; set; }= default!;
    
        /// <summary>Defines the percentage variance allowed on the middle rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowedVariance")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AllowedVariance { get; set; }= default!;
    
        /// <summary>Indicates the date of the rate fixing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedRateDate")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? FixedRateDate { get; set; }= default!;
    
        /// <summary>Contains the minimum principal amount defined for the deposit contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? MinAmount { get; set; }= default!;
    
        /// <summary>Specifies whether rounding of amounts in this currency is to take place only for cash transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashOnlyRounding")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CashOnlyRounding { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for non-cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MinimumRoundType { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? CashRoundType { get; set; }= default!;
    
        /// <summary>Identifies if the currency is a precious metal or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preciousMetal")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PreciousMetal { get; set; }= default!;
    
        /// <summary>ISO 3166-1-alpha-2 or alpha-3 country code of financial institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CountryCode { get; set; }= default!;
    
        /// <summary>Numeric value for the interest rate entered manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedRate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? FixedRate { get; set; }= default!;
    
        /// <summary>Defines whether this currency is fixed to another currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FixedCurrencyId { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? StartDate { get; set; }= default!;
    
        /// <summary>Indicates the base currency used for  the currency conversion if primary conversions are not specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrencyRank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BaseCurrencyRank { get; set; }= default!;
    
        /// <summary>Specifies the date after which the contract or amount is available for use.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableDate")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? AvailableDate { get; set; }= default!;
    
        /// <summary>Date on which the account has been blocked.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blockedDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? BlockedDateTime { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>identifies the Continuous Linked Settlement (CLS) currency used to eliminate the risk of foreign exchange rate settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clsCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? ClsCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyMarketResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarketResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyMarketResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarketResponseBody 
    {
        /// <summary>Specifies the name displayed for the currency market</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyMarketNames")]
        public System.Collections.Generic.ICollection<CurrencyMarketNames>? CurrencyMarketNames { get; set; }= default!;
    
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutine")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? SpreadCalcuationRoutine { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyFromNumericCodeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyFromNumericCodeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyFromNumericCodeResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyFromNumericCodeResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>CurrencyModificationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyModificationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyModificationsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyModificationsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>CurrencyForRankResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyForRankResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyForRankResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyForRankResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>CurrencyBasicInfoResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyBasicInfoResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyBasicInfoResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyBasicInfoResponseBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames2>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the applicable number of decimal positions for amount calculations and display purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberofDecimal")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? NumberofDecimal { get; set; }= default!;
    
        /// <summary>Numeric code for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numericCurrencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? NumericCurrencyCode { get; set; }= default!;
    
        /// <summary>Indicates the base currency used for  the currency conversion if primary conversions are not specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrencyRank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BaseCurrencyRank { get; set; }= default!;
    
        /// <summary>Defines the method of calculation for accrued interest on a Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestDayBasis")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InterestDayBasis { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyInfo</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyInfoBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyInfoBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames3>? DisplayNames { get; set; }= default!;
    
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("markets")]
        public System.Collections.Generic.ICollection<Markets2>? Markets { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rateInformation")]
        public System.Collections.Generic.ICollection<RateInformation2>? RateInformation { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("equivalentCurrencies")]
        public System.Collections.Generic.ICollection<EquivalentCurrencies2>? EquivalentCurrencies { get; set; }= default!;
    
        /// <summary>Indicates the rank of the payment order product within the group.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rank")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? Rank { get; set; }= default!;
    
        /// <summary>Numeric code for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numericCurrencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? NumericCurrencyCode { get; set; }= default!;
    
        /// <summary>Indicates the applicable number of decimal positions for amount calculations and display purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberofDecimal")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? NumberofDecimal { get; set; }= default!;
    
        /// <summary>Identifies the method of quotation of the exchange rate for the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? QuotationCode { get; set; }= default!;
    
        /// <summary>Identifies the decimal displacement of percentage in points for a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationPips")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? QuotationPips { get; set; }= default!;
    
        /// <summary>Indicates the number of days prior to rollover or renewal date on which the notice to be sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noticeDay")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? NoticeDay { get; set; }= default!;
    
        /// <summary>Defines the number of working days forward, from the run date, to commence detailed Nostro reporting.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroProjectionDay")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NostroProjectionDay { get; set; }= default!;
    
        /// <summary>Defines the method of calculation for accrued interest on a Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestDayBasis")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InterestDayBasis { get; set; }= default!;
    
        /// <summary>Defines the percentage variance allowed on the middle rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowedVariance")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AllowedVariance { get; set; }= default!;
    
        /// <summary>Indicates the date of the rate fixing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedRateDate")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? FixedRateDate { get; set; }= default!;
    
        /// <summary>Contains the minimum principal amount defined for the deposit contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? MinAmount { get; set; }= default!;
    
        /// <summary>Specifies whether rounding of amounts in this currency is to take place only for cash transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashOnlyRounding")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CashOnlyRounding { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for non-cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MinimumRoundType { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? CashRoundType { get; set; }= default!;
    
        /// <summary>Identifies if the currency is a precious metal or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preciousMetal")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PreciousMetal { get; set; }= default!;
    
        /// <summary>ISO Country code, IBAN number will be generated based on the structure of this country.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CountryCode { get; set; }= default!;
    
        /// <summary>Numeric value for the interest rate entered manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedRate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? FixedRate { get; set; }= default!;
    
        /// <summary>Defines whether this currency is fixed to another currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FixedCurrencyId { get; set; }= default!;
    
        /// <summary>Beginning Date of IPO Subscription</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? StartDate { get; set; }= default!;
    
        /// <summary>Indicates the base currency used for  the currency conversion if primary conversions are not specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrencyRank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BaseCurrencyRank { get; set; }= default!;
    
        /// <summary>Specifies the date after which the contract or amount is available for use.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableDate")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? AvailableDate { get; set; }= default!;
    
        /// <summary>Date on which the account has been blocked.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blockedDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? BlockedDateTime { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>identifies the Continuous Linked Settlement (CLS) currency used to eliminate the risk of foreign exchange rate settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clsCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? ClsCurrencyId { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyInfoDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyInfoDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyMarket</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarket 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyMarketBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarketBody 
    {
        /// <summary>Specifies the name displayed for the currency market</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyMarketNames")]
        public System.Collections.Generic.ICollection<CurrencyMarketNames2>? CurrencyMarketNames { get; set; }= default!;
    
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutine")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? SpreadCalcuationRoutine { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyBasicInfo</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyBasicInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyBasicInfoBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyBasicInfoBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames4>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the applicable number of decimal positions for amount calculations and display purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberofDecimal")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? NumberofDecimal { get; set; }= default!;
    
        /// <summary>Numeric code for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numericCurrencyCode")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? NumericCurrencyCode { get; set; }= default!;
    
        /// <summary>Indicates the base currency used for  the currency conversion if primary conversions are not specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrencyRank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BaseCurrencyRank { get; set; }= default!;
    
        /// <summary>Defines the method of calculation for accrued interest on a Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestDayBasis")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InterestDayBasis { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyBasicInfoDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyBasicInfoDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("markets")]
        public System.Collections.Generic.ICollection<Markets3>? Markets { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Markets 
    {
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("market")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? Market { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is bought.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? BuyRate { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellRate")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? SellRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateInformation 
    {
        /// <summary>Indicates the Mid rate for the currency pair. System derived if Rate type is choosen as Buy/Sell or User entered if Rate type Mid.Rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("midRate")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? MidRate { get; set; }= default!;
    
        /// <summary>Indicates the amount to be added to/ subtracted from average revaluation rate to obtain the market buy/sell rates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DefaultSpread { get; set; }= default!;
    
        /// <summary>Defines the amount below which the System will apply the default Customer and Treasury Small Spreads</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoSmallAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? UptoSmallAmount { get; set; }= default!;
    
        /// <summary>Defines the profit margin attributable to the dealers that will be used to calculate the tresaury buy or sell rate on any small value transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasurySmallSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TreasurySmallSpread { get; set; }= default!;
    
        /// <summary>Defines the default spread rates required to calculate the customer buy or sell rate from the treasury buy or sell rate on any small value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSmallSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerSmallSpread { get; set; }= default!;
    
        /// <summary>Defines the amount above which the exchange rate to be used must be obtained from the dealer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiableAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? NegotiableAmount { get; set; }= default!;
    
        /// <summary>Defines the profit margin attributable to the dealers that will be used to calculate the tresaury buy or sell rate on any medium value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryMediumSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? TreasuryMediumSpread { get; set; }= default!;
    
        /// <summary>Defines the default spread rates required to calculate the customer buy or sell rate from the treasury buy or sell rate on any medium value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerMediumSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerMediumSpread { get; set; }= default!;
    
        /// <summary>Specifies the alternative market rate for the Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revalrate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Revalrate { get; set; }= default!;
    
        /// <summary>Specifies the treasury dealing limits of a currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryLimitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TreasuryLimitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EquivalentCurrencies 
    {
        /// <summary>Specifies an equivalent currency that can be used instead of the actual currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("equivalentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? EquivalentCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarketNames 
    {
        /// <summary>Specifies the name displayed for the currency market</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyMarketName")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? CurrencyMarketName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("currencyHistory")]
        public System.Collections.Generic.ICollection<CurrencyHistory>? CurrencyHistory { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames2 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames3 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Markets2 
    {
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("market")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? Market { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is bought.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? BuyRate { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellRate")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? SellRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateInformation2 
    {
        /// <summary>Indicates the Mid rate for the currency pair. System derived if Rate type is choosen as Buy/Sell or User entered if Rate type Mid.Rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("midRate")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? MidRate { get; set; }= default!;
    
        /// <summary>Indicates the amount to be added to/ subtracted from average revaluation rate to obtain the market buy/sell rates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DefaultSpread { get; set; }= default!;
    
        /// <summary>Defines the amount below which the system will apply the default customer and treasury small spreads</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoSmallAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? UptoSmallAmount { get; set; }= default!;
    
        /// <summary>Defines the profit margin attributable to the dealers that will be used to calculate the tresaury buy or sell rate on any small value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasurySmallSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TreasurySmallSpread { get; set; }= default!;
    
        /// <summary>Defines the default spread rates required to calculate the customer buy or sell rate from the treasury buy or sell rate on any small value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSmallSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerSmallSpread { get; set; }= default!;
    
        /// <summary>Defines the amount above which the exchange rate to be used must be obtained from the dealer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiableAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? NegotiableAmount { get; set; }= default!;
    
        /// <summary>Defines the profit margin attributable to the dealers that will be used to calculate the tresaury buy or sell rate on any medium value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryMediumSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? TreasuryMediumSpread { get; set; }= default!;
    
        /// <summary>Defines the default spread rates required to calculate the customer buy or sell rate from the treasury buy or sell rate on any medium value transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerMediumSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerMediumSpread { get; set; }= default!;
    
        /// <summary>Specifies the alternative market rate for the Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revalrate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Revalrate { get; set; }= default!;
    
        /// <summary>Specifies the treasury dealing limits of a currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryLimitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TreasuryLimitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EquivalentCurrencies2 
    {
        /// <summary>Specifies an equivalent currency that can be used instead of the actual currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("equivalentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? EquivalentCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyMarketNames2 
    {
        /// <summary>Specifies the name displayed for the currency market</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyMarketName")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? CurrencyMarketName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames4 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Markets3 
    {
        /// <summary>The currency market for which the currency rates applies to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("market")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? Market { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is bought.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BuyRate { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? SellRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyHistory 
    {
        /// <summary>Date on which the Bundle has been modified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ModifiedDate { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016