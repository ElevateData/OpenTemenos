//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Reference.InterestRates
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInterestRatesService
    {
        /// <summary>Retrieves details of interest conditions</summary>
        /// <param name="rateTextId">The basic interest rate ID / name.</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>RateTextsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RateTextsResponse> GetRateTextsAsync(string? rateTextId, string? displayName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves details of interest conditions</summary>
        /// <param name="rateTextId">The basic interest rate ID / name.</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>RateTextsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RateTextsResponse> GetRateTextsAsync(string? rateTextId, string? displayName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves basic interest rate</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> GetBasicInterestAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves basic interest rate</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> GetBasicInterestAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates basic interest rate record</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> CreateBasicInterestAsync(string rateId, BasicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates basic interest rate record</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> CreateBasicInterestAsync(string rateId, BasicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates basic interest rate</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> UpdateBasicInterestAsync(string rateId, BasicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates basic interest rate</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestResponse> UpdateBasicInterestAsync(string rateId, BasicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves effective date of floating rates</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>BasicInterestChangeDatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestChangeDatesResponse> GetBasicInterestChangeDatesAsync(string rateId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves effective date of floating rates</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>BasicInterestChangeDatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestChangeDatesResponse> GetBasicInterestChangeDatesAsync(string rateId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves floating rates for a specified date</summary>
        /// <param name="date">Indicates the date on which activity was performed</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestRateChangesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestRateChangesResponse> GetBasicInterestRateChangesAsync(string date, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves floating rates for a specified date</summary>
        /// <param name="date">Indicates the date on which activity was performed</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestRateChangesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestRateChangesResponse> GetBasicInterestRateChangesAsync(string date, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> GetPeriodicInterestAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> GetPeriodicInterestAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> CreatePeriodicInterestAsync(string rateId, PeriodicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> CreatePeriodicInterestAsync(string rateId, PeriodicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> UpdatePeriodicInterestAsync(string rateId, PeriodicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates periodic interest details</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> UpdatePeriodicInterestAsync(string rateId, PeriodicInterest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves periodic rates for a specified date</summary>
        /// <param name="date">Indicates the date on which activity was performed</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PeriodicRateChangesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateChangesResponse> GetPeriodicRateChangesAsync(string date, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves periodic rates for a specified date</summary>
        /// <param name="date">Indicates the date on which activity was performed</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PeriodicRateChangesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateChangesResponse> GetPeriodicRateChangesAsync(string date, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> GetBasicInterestNameAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> GetBasicInterestNameAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> CreateBasicInterestNameAsync(string rateId, BasicInterestName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> CreateBasicInterestNameAsync(string rateId, BasicInterestName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> UpdateBasicInterestNameAsync(string rateId, BasicInterestName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates floating rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BasicInterestNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicInterestNameResponse> UpdateBasicInterestNameAsync(string rateId, BasicInterestName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> GetPeriodicRateNameAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> GetPeriodicRateNameAsync(string rateId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> CreatePeriodicRateNameAsync(string rateId, PeriodicRateName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> CreatePeriodicRateNameAsync(string rateId, PeriodicRateName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> UpdatePeriodicRateNameAsync(string rateId, PeriodicRateName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicRateNameResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicRateNameResponse> UpdatePeriodicRateNameAsync(string rateId, PeriodicRateName payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> DeletePeriodicRateNameAsync(string rateId, PeriodicRateNameDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes periodic rate name</summary>
        /// <param name="rateId">Identifies the periodic or floating interest rates</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicInterestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicInterestResponse> DeletePeriodicRateNameAsync(string rateId, PeriodicRateNameDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>RateTextsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateTextsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public RateTextsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateTextsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>BasicInterestResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestResponseBody 
    {
        /// <summary>Identifies the bid rate of the related currency for the defined time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InterestRate { get; set; }= default!;
    
        /// <summary>Contains the negative rate of interest that can be used for a contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeInterestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? NegativeInterestRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BasicInterestChangeDatesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestChangeDatesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestChangeDatesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestChangeDatesResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>BasicInterestRateChangesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestRateChangesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestRateChangesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestRateChangesResponseBody 
    {
        /// <summary>The interest rate is chosen from a selection of values which represent different interest types and rates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("floatingRates")]
        public System.Collections.Generic.ICollection<FloatingRates>? FloatingRates { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rateChanges")]
        public System.Collections.Generic.ICollection<RateChanges>? RateChanges { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicInterestResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicInterestResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicInterestResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicInterestResponseBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames>? RateNames { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCondition")]
        public System.Collections.Generic.ICollection<InterestCondition>? InterestCondition { get; set; }= default!;
    
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutines")]
        public System.Collections.Generic.ICollection<SpreadCalcuationRoutines>? SpreadCalcuationRoutines { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("negativeRateApplications")]
        public System.Collections.Generic.ICollection<NegativeRateApplications>? NegativeRateApplications { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("updateHistory")]
        public System.Collections.Generic.ICollection<UpdateHistory>? UpdateHistory { get; set; }= default!;
    
        /// <summary>Identifies the default Management Information System (M.I.S.) rate to be used for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultMisRateId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DefaultMisRateId { get; set; }= default!;
    
        /// <summary>Indicates whether the Forward rate of a currency should be calculated automatically or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buildForwardRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BuildForwardRate { get; set; }= default!;
    
        /// <summary>Indicates the tolerance interest percentage cap that can be applied on a contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tolerancePercentage")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TolerancePercentage { get; set; }= default!;
    
        /// <summary>Indicates the largest possible interest rate applicable for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumInterestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? MaximumInterestRate { get; set; }= default!;
    
        /// <summary>Specifies when set to Y, that the Rest date will be derived as a working day if the actual date falls on an holiday</summary>
        [System.Text.Json.Serialization.JsonPropertyName("useLastWorkingDay")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? UseLastWorkingDay { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Indicates the rate of return on an investment with zero risk</summary>
        [System.Text.Json.Serialization.JsonPropertyName("riskFreeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? RiskFreeRate { get; set; }= default!;
    
        /// <summary>Identifies the date on which the document was received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ReceivedDate { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicRateChangesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateChangesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicRateChangesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateChangesResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>BasicInterestNameResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestNameResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestNameResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestNameResponseBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames2>? RateNames { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicRateNameResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateNameResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicRateNameResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateNameResponseBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames3>? RateNames { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>BasicInterest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterest 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestBody 
    {
        /// <summary>Identifies the bid rate of the related currency for the defined time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InterestRate { get; set; }= default!;
    
        /// <summary>Contains the negative rate of interest that can be used for a contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeInterestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? NegativeInterestRate { get; set; }= default!;
    
    
    }
    
    /// <summary>BasicInterestName</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestName 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BasicInterestNameBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BasicInterestNameBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames4>? RateNames { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicRateName</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateName 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicRateNameBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateNameBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames5>? RateNames { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicRateNameDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicRateNameDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicInterest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicInterest 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicInterestBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicInterestBody 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateNames")]
        public System.Collections.Generic.ICollection<RateNames6>? RateNames { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCondition")]
        public System.Collections.Generic.ICollection<InterestCondition2>? InterestCondition { get; set; }= default!;
    
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutines")]
        public System.Collections.Generic.ICollection<SpreadCalcuationRoutines2>? SpreadCalcuationRoutines { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("negativeRateApplications")]
        public System.Collections.Generic.ICollection<NegativeRateApplications2>? NegativeRateApplications { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("updateHistory")]
        public System.Collections.Generic.ICollection<UpdateHistory2>? UpdateHistory { get; set; }= default!;
    
        /// <summary>Identifies the default Management Information System (M.I.S.) rate to be used for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultMisRateId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DefaultMisRateId { get; set; }= default!;
    
        /// <summary>Indicates whether the Forward rate of a currency should be calculated automatically or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buildForwardRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BuildForwardRate { get; set; }= default!;
    
        /// <summary>Indicates the tolerance interest percentage cap that can be applied on a contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tolerancePercentage")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TolerancePercentage { get; set; }= default!;
    
        /// <summary>Indicates the largest possible interest rate applicable for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumInterestRate")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? MaximumInterestRate { get; set; }= default!;
    
        /// <summary>Specifies when set to Y, that the Rest date will be derived as a working day if the actual date falls on an holiday</summary>
        [System.Text.Json.Serialization.JsonPropertyName("useLastWorkingDay")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? UseLastWorkingDay { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Indicates whether amount definition is allowed for the application</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? AllowAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The basic interest rate ID / name.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateTextId")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RateTextId { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? EffectiveDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FloatingRates 
    {
        /// <summary>The interest rate is chosen from a selection of values which represent different interest types and rates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("floatingRate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? FloatingRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateChanges 
    {
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Rate { get; set; }= default!;
    
        /// <summary>Contains the old rate which was used before effective date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("oldRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? OldRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InterestCondition 
    {
        /// <summary>Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("period")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Period { get; set; }= default!;
    
        /// <summary>Specifies the date till which given rates are applicable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDate")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? RateDate { get; set; }= default!;
    
        /// <summary>Specifies the number of days from the effective or value date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysSinceStart")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? DaysSinceStart { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rates")]
        public System.Collections.Generic.ICollection<Rates>? Rates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SpreadCalcuationRoutines 
    {
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutine")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? SpreadCalcuationRoutine { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NegativeRateApplications 
    {
        /// <summary>Specifies that negative interest rates can be accessed in the application given in this field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeRateApplicationId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NegativeRateApplicationId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UpdateHistory 
    {
        /// <summary>Specifies the ID of the company through which record is modified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyCompanyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? HistoryCompanyId { get; set; }= default!;
    
        /// <summary>Specifies the date when the record is modified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? HistoryDate { get; set; }= default!;
    
        /// <summary>Specifies the previous version number of the modified record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? HistoryNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Contains the id of the rate of interest assessed on a loan or investment over a set time period when compounding occurs more than once per year</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodicInterestId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PeriodicInterestId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames2 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames3 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames4 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames5 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateNames6 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? RateName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InterestCondition2 
    {
        /// <summary>Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("period")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Period { get; set; }= default!;
    
        /// <summary>Specifies the date till which given rates are applicable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDate")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? RateDate { get; set; }= default!;
    
        /// <summary>Specifies the number of days from the effective or value date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysSinceStart")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? DaysSinceStart { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rates")]
        public System.Collections.Generic.ICollection<Rates2>? Rates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SpreadCalcuationRoutines2 
    {
        /// <summary>Specifies the name of the routine to be used for customised spread calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spreadCalcuationRoutine")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? SpreadCalcuationRoutine { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NegativeRateApplications2 
    {
        /// <summary>Specifies that negative interest rates can be accessed in the application given in this field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeRateApplicationId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NegativeRateApplicationId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UpdateHistory2 
    {
        /// <summary>Specifies the ID of the company through which record is modified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyCompanyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? HistoryCompanyId { get; set; }= default!;
    
        /// <summary>Specifies the date when the record is modified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? HistoryDate { get; set; }= default!;
    
        /// <summary>Specifies the previous version number of the modified record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historyNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? HistoryNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Rates 
    {
        /// <summary>Specifies the amount of the band till which given rates are applicable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bandAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BandAmount { get; set; }= default!;
    
        /// <summary>Identifies the BID rate of the related currency for the time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bidRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? BidRate { get; set; }= default!;
    
        /// <summary>Identifies the OFFER rate of the related currency for the time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("offerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? OfferRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Rates2 
    {
        /// <summary>Specifies the amount of the band till which given rates are applicable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bandAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BandAmount { get; set; }= default!;
    
        /// <summary>Identifies the BID rate of the related currency for the time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bidRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? BidRate { get; set; }= default!;
    
        /// <summary>Identifies the OFFER rate of the related currency for the time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("offerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? OfferRate { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016