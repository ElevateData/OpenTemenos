//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Enterprise.Pricings
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPricingService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the package pricing benefit details</summary>
        /// <param name="packageId">Indicates the arrangement reference of the package</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PackageStatementResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageStatementResponse> GetPackageStatementAsync(string packageId, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the fee amount charged on an event</summary>
        /// <param name="baseContractReference">Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</param>
        /// <param name="systemReference">Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</param>
        /// <param name="companyReference">Contains the identifier of the underlying Entity or Company or Branch</param>
        /// <param name="eventName">The name that is displayed for the event</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="channel">Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</param>
        /// <param name="branch">Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</param>
        /// <param name="lineOfBusiness">Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ActivityChargeAmountResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityChargeAmountResponse> GetActivityChargeAmountAsync(string baseContractReference, string? systemReference = null, string? companyReference = null, string? eventName = null, string? effectiveDate = null, string? channel = null, string? branch = null, string? lineOfBusiness = null, string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the fee amount charged on an event</summary>
        /// <param name="baseContractReference">Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</param>
        /// <param name="systemReference">Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</param>
        /// <param name="companyReference">Contains the identifier of the underlying Entity or Company or Branch</param>
        /// <param name="eventName">The name that is displayed for the event</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="channel">Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</param>
        /// <param name="branch">Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</param>
        /// <param name="lineOfBusiness">Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PeriodicChargesAmountResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicChargesAmountResponse> GetPeriodicChargesAmountAsync(string baseContractReference, string? systemReference = null, string? companyReference = null, string? eventName = null, string? effectiveDate = null, string? channel = null, string? branch = null, string? lineOfBusiness = null, string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the interest rates</summary>
        /// <param name="baseContractReference">Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</param>
        /// <param name="systemReference">Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</param>
        /// <param name="companyReference">Contains the identifier of the underlying Entity or Company or Branch</param>
        /// <param name="eventName">The name that is displayed for the event</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="channel">Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</param>
        /// <param name="branch">Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</param>
        /// <param name="lineOfBusiness">Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InterestRateResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InterestRateResponse> GetInterestRateAsync(string baseContractReference, string? systemReference = null, string? companyReference = null, string? eventName = null, string? effectiveDate = null, string? channel = null, string? branch = null, string? lineOfBusiness = null, string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the interest rates for the given product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="partyId">Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="rateName">Specifies the name displayed for the interest rates</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="tenor">This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</param>
        /// <param name="rolloverPeriod">Indicates the roll over period after which contract will switch on to the new set of interest or fee conditions. For contracts dealing with periodic indexes, rates are influenced by Amount or Tenor or Rollover period. So, rollover period need to be stated if accurate rate needs to be retrieved.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>RequestRateResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestRateResponse> GetRequestRateAsync(string productId, string? partyId = null, string? effectiveDate = null, string? rateName = null, string? amount = null, string? tenor = null, string? rolloverPeriod = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the eligibility details for the product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="partyId">Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</param>
        /// <param name="partyRole">Contains the identifier used for the role played by the party or customer in the contract or account</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>EligibilityDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EligibilityDetailsResponse> GetEligibilityDetailsAsync(string productId, string? partyId = null, string? partyRole = null, string? effectiveDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the pricing for transaction business activity</summary>
        /// <param name="baseContractReference">Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</param>
        /// <param name="systemReference">Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</param>
        /// <param name="companyReference">Contains the identifier of the underlying Entity or Company or Branch</param>
        /// <param name="eventName">The name that is displayed for the event</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="channel">Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</param>
        /// <param name="branch">Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</param>
        /// <param name="lineOfBusiness">Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</param>
        /// <param name="transactionCurrency">Indicates the currency of the transaction. For example GBP, USD etc.</param>
        /// <param name="transactionAmount">Contains the transaction amount. This is based on the currency, either local or foreign currency</param>
        /// <param name="contractAmount">Indicates the amount of the transaction in contract currency</param>
        /// <param name="contextName">Field name returned by the payment engine (TPH) for information or further processing.</param>
        /// <param name="contextValue">Field value returned by the payment engine (TPH) for information or further processing.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>TransactionPricingRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransactionPricingRequestResponse> GetTransactionPricingRequestAsync(string baseContractReference, string? systemReference = null, string? companyReference = null, string? eventName = null, string? effectiveDate = null, string? currency = null, string? channel = null, string? branch = null, string? lineOfBusiness = null, string? transactionCurrency = null, string? transactionAmount = null, string? contractAmount = null, string? contextName = null, string? contextValue = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the pricing for an event</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="companyReference">Contains the identifier of the underlying Entity or Company or Branch</param>
        /// <param name="eventName">The name that is displayed for the event</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="channel">Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</param>
        /// <param name="branch">Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</param>
        /// <param name="lineOfBusiness">Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</param>
        /// <param name="partyReference">Contains the identifier used for the party or customer</param>
        /// <param name="partyRole">Contains the identifier used for the role played by the party or customer in the contract or account</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>NewActivityPricingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewActivityPricingResponse> GetNewActivityPricingAsync(string productId, string? companyReference = null, string? eventName = null, string? effectiveDate = null, string? currency = null, string? channel = null, string? branch = null, string? lineOfBusiness = null, string? partyReference = null, string? partyRole = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the pricing details on a single Event</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PricingDetailsEventListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PricingDetailsEventListResponse> GetPricingDetailsEventListAsync(string arrangementId, string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the periodic pricing that have happened on a package</summary>
        /// <param name="packageId">Indicates the arrangement reference of the package</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PackagePeriodicPricingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackagePeriodicPricingResponse> GetPackagePeriodicPricingAsync(string packageId, string? effectiveDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of packages created in enterprise product pricing</summary>
        /// <param name="packageId">Indicates the arrangement reference of the package</param>
        /// <param name="effectiveDate">Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PackageDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageDetailsResponse> GetPackageDetailsAsync(string packageId, string? effectiveDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of contracts held by the party</summary>
        /// <param name="partyId">Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CustomerHeldContractsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerHeldContractsResponse> GetCustomerHeldContractsAsync(string partyId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of events</summary>
        /// <param name="baseContractReference">Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</param>
        /// <param name="systemReference">Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</param>
        /// <param name="numberOfTransactions">Indicates the number of transactions performed on the contract or the account</param>
        /// <param name="dateFrom">Indicates the end date till which the transactions or events performed on the contract or account is to be returned</param>
        /// <param name="dateTo">Indicates the start date from which the transactions or events performed on the contract or account is to be returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ContractEventListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContractEventListResponse> GetContractEventListAsync(string baseContractReference, string? systemReference = null, string? numberOfTransactions = null, string? dateFrom = null, string? dateTo = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PackageStatementResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageStatementResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PackageStatementResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageStatementResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ActivityChargeAmountResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ActivityChargeAmountResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ActivityChargeAmountResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ActivityChargeAmountResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>PeriodicChargesAmountResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicChargesAmountResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicChargesAmountResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicChargesAmountResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>InterestRateResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InterestRateResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InterestRateResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InterestRateResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>RequestRateResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestRateResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public RequestRateResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestRateResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>EligibilityDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EligibilityDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public EligibilityDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EligibilityDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    /// <summary>TransactionPricingRequestResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TransactionPricingRequestResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public TransactionPricingRequestResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TransactionPricingRequestResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>NewActivityPricingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewActivityPricingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NewActivityPricingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewActivityPricingResponseBody : System.Collections.ObjectModel.Collection<Anonymous8>
    {
    
    }
    
    /// <summary>PricingDetailsEventListResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PricingDetailsEventListResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PricingDetailsEventListResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PricingDetailsEventListResponseBody : System.Collections.ObjectModel.Collection<Anonymous9>
    {
    
    }
    
    /// <summary>PackagePeriodicPricingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackagePeriodicPricingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PackagePeriodicPricingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackagePeriodicPricingResponseBody : System.Collections.ObjectModel.Collection<Anonymous10>
    {
    
    }
    
    /// <summary>PackageDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PackageDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous11>
    {
    
    }
    
    /// <summary>CustomerHeldContractsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerHeldContractsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerHeldContractsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerHeldContractsResponseBody : System.Collections.ObjectModel.Collection<Anonymous12>
    {
    
    }
    
    /// <summary>ContractEventListResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractEventListResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ContractEventListResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractEventListResponseBody : System.Collections.ObjectModel.Collection<Anonymous13>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        [System.Text.Json.Serialization.JsonPropertyName("packagePricing")]
        public System.Collections.Generic.ICollection<PackagePricing>? PackagePricing { get; set; }= default!;
    
        /// <summary>Indicates the net pricing benefit amount  of package when pricing type is debit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPackageFees")]
        public string? TotalPackageFees { get; set; }= default!;
    
        /// <summary>Indicates the net pricing benefit amount of package when pricing type is credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPackageCredits")]
        public string? TotalPackageCredits { get; set; }= default!;
    
        /// <summary>Indicates the  total  benefit amount of the package</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPackageSavings")]
        public string? NetPackageSavings { get; set; }= default!;
    
        /// <summary>Indicates the summation  of baseValue, adjustvalue, package benefit Value when pricing type is debit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalOriginalFees")]
        public string? TotalOriginalFees { get; set; }= default!;
    
        /// <summary>Indicates the total  Package benefit amount  when pricing type is debit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalFeeBenefits")]
        public string? TotalFeeBenefits { get; set; }= default!;
    
        /// <summary>Indicates the summation  of baseValue, adjustvalue, package benefit Value when pricing type is credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalOriginalCredits")]
        public string? TotalOriginalCredits { get; set; }= default!;
    
        /// <summary>Indicates the total  Package benefit amount  when pricing type is credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCreditBenefits")]
        public string? TotalCreditBenefits { get; set; }= default!;
    
        /// <summary>Indicates the net original cost i.e difference of fees and credits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netOriginalCost")]
        public string? NetOriginalCost { get; set; }= default!;
    
        /// <summary>Indicates the total benefit value when the contracts are not part of the package</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalBenefits")]
        public string? TotalBenefits { get; set; }= default!;
    
        /// <summary>Indicates the summation of total pricing values and benefit values  when the contracts are packaged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netSavings")]
        public string? NetSavings { get; set; }= default!;
    
        /// <summary>Indicates the summation between net savings and net package savings</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPackageSavings")]
        public string? TotalPackageSavings { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Indicates the identifier for base details in which system reference, base contract reference, event name, effective date and other related details are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseDetails")]
        public System.Collections.Generic.ICollection<BaseDetails>? BaseDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Indicates the identifier for base details in which system reference, base contract reference, event name, effective date and other related details are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseDetails")]
        public System.Collections.Generic.ICollection<BaseDetails2>? BaseDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails2>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Indicates the identifier for base details in which system reference, base contract reference, event name, effective date and other related details are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseDetails")]
        public System.Collections.Generic.ICollection<BaseDetails3>? BaseDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDetails")]
        public System.Collections.Generic.ICollection<RateDetails>? RateDetails { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Currency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDetails")]
        public System.Collections.Generic.ICollection<RateDetails2>? RateDetails { get; set; }= default!;
    
        /// <summary>Contains the product currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Indicates the identifier for eligibility details in which rule name, rule message and rule pass are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails>? PartyDetails { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Indicates whether the customer passed the eligibility rule for the product. For example, rules like customer should be local resident, customer's age should be greater than 18, etc. It will be applied on the customers while creating new contract or account. Result will be Pass or Fail</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eligibilityPass")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EligibilityPass { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        /// <summary>Indicates the identifier for base details in which system reference, base contract reference, event name, effective date and other related details are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseDetails")]
        public System.Collections.Generic.ICollection<BaseDetails4>? BaseDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("context")]
        public System.Collections.Generic.ICollection<Context>? Context { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails3>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the currency of the transaction. For example GBP, USD etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionCurrency { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount of the transaction in contract currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ContractAmount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous8 
    {
        /// <summary>Identifier of individuals in terms of Customers or Person or Entities with reference to the bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseDetails")]
        public System.Collections.Generic.ICollection<BaseDetails5>? BaseDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails4>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous9 
    {
        /// <summary>Indicates the identifier for party details in which party id and party owner are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractDetails")]
        public System.Collections.Generic.ICollection<ContractDetails>? ContractDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for event details in which transaction reference, event name and effective date are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventDetails")]
        public System.Collections.Generic.ICollection<EventDetails>? EventDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for pricing benefit details in which benefit program, benefit amount and benefit type are defined. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails5>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous10 
    {
        /// <summary>Indicates the identifier for party details in which party id and party owner are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractDetails")]
        public System.Collections.Generic.ICollection<ContractDetails2>? ContractDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for event details in which transaction reference, event name and effective date are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventDetails")]
        public System.Collections.Generic.ICollection<EventDetails2>? EventDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for individual fee details in which base fee name, fee description, fee amount, fee adjusted and fee net amount are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDetails")]
        public System.Collections.Generic.ICollection<FeeDetails6>? FeeDetails { get; set; }= default!;
    
        /// <summary>Indicates the date which can be used as the start date for computing the period charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PeriodStartDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous11 
    {
        /// <summary>Indicates the identifier for party details in which party id and party owner are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails2>? PartyDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for package details in which base contract reference, systme reference, productId are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageDetails")]
        public System.Collections.Generic.ICollection<PackageDetails>? PackageDetails { get; set; }= default!;
    
        /// <summary>Indicates the arrangement reference of the package</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PackageId { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product for the package or bundle. It is required at the time of package or bundle creation. It contains the predefined condition for fees, interest, pricing conditions, etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageProduct")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PackageProduct { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product for the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageProductName")]
        public string? PackageProductName { get; set; }= default!;
    
        /// <summary>Contains the creation date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreationDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous12 
    {
        /// <summary>Indicates the identifier for party details in which party id and party owner are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails3>? PartyDetails { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the creation date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreationDate { get; set; }= default!;
    
        /// <summary>Indicates the arrangement reference of the package</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PackageId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous13 
    {
        /// <summary>Indicates the identifier for party details in which party id and party owner are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails4>? PartyDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier for event details in which transaction reference, event name and effective date are defined</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventDetails")]
        public System.Collections.Generic.ICollection<EventDetails3>? EventDetails { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the creation date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreationDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackagePricing 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public string? Date { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLine")]
        public string? ProductLine { get; set; }= default!;
    
        /// <summary>Indicates the pricing type such as Debit,Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pricingType")]
        public string? PricingType { get; set; }= default!;
    
        /// <summary>Indicates the  property description to which benefit has been applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        public string? PropertyName { get; set; }= default!;
    
        /// <summary>Indicates the base value for which benefit has been applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseValue")]
        public string? BaseValue { get; set; }= default!;
    
        /// <summary>Indicates the value by which base value has to be adjusted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adjustValue")]
        public string? AdjustValue { get; set; }= default!;
    
        /// <summary>Indicates the final adjusted net value. For example NetValue is  sum or difference of BaseValue and AdjustValue</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netValue")]
        public string? NetValue { get; set; }= default!;
    
        /// <summary>Indicates the total  benefit amount when packaged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageBenefitValue")]
        public string? PackageBenefitValue { get; set; }= default!;
    
        /// <summary>Indicates the benefit names when packaged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageBenefitName")]
        public string? PackageBenefitName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDetails 
    {
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier of the underlying Entity or Company or Branch</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CompanyReference { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Branch { get; set; }= default!;
    
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lineOfBusiness")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDetails2 
    {
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier of the underlying Entity or Company or Branch</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CompanyReference { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Branch { get; set; }= default!;
    
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lineOfBusiness")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails2 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails2>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDetails3 
    {
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier of the underlying Entity or Company or Branch</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CompanyReference { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Branch { get; set; }= default!;
    
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lineOfBusiness")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateDetails 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateName { get; set; }= default!;
    
        /// <summary>Indicates the description of the rate name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDescription")]
        public string? RateDescription { get; set; }= default!;
    
        /// <summary>Indicates the original rate or base rate before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalRate { get; set; }= default!;
    
        /// <summary>Indicates the adjusted rate which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final rate after pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalRate { get; set; }= default!;
    
        /// <summary>Indicates whether a debit or credit type of interest passed. Allowed values are DEBIT or CREDIT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateType { get; set; }= default!;
    
        /// <summary>Indicates the rate calculation method. For exmaple, Fixed, Floating or Periodic</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDefinition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateDefinition { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails3>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RateDetails2 
    {
        /// <summary>Specifies the name displayed for the interest rates</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateName { get; set; }= default!;
    
        /// <summary>Indicates the description of the rate name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDescription")]
        public string? RateDescription { get; set; }= default!;
    
        /// <summary>Indicates the original rate or base rate before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalRate { get; set; }= default!;
    
        /// <summary>Indicates the adjusted rate which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final rate after pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalRate { get; set; }= default!;
    
        /// <summary>Indicates whether a debit or credit type of interest passed. Allowed values are DEBIT or CREDIT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateType { get; set; }= default!;
    
        /// <summary>Indicates the rate calculation method. For exmaple, Fixed, Floating or Periodic</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateDefinition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RateDefinition { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails4>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails 
    {
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
        /// <summary>Indicates whether the elibility is passed for the customer or customer role. For example, rules like customer should be local resident, customer's age should be greater than 18, etc. It will be applied on the customer while creating new contract or account. Result will be Pass or Fail</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyEligibilityPass")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyEligibilityPass { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eligibilityDetails")]
        public System.Collections.Generic.ICollection<EligibilityDetails>? EligibilityDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDetails4 
    {
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier of the underlying Entity or Company or Branch</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CompanyReference { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Branch { get; set; }= default!;
    
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lineOfBusiness")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LineOfBusiness { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Context 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ContextName { get; set; }= default!;
    
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValue")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ContextValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails3 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails5>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDetails5 
    {
        /// <summary>Contains the identifier of the underlying Entity or Company or Branch</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CompanyReference { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Branch { get; set; }= default!;
    
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lineOfBusiness")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("party")]
        public System.Collections.Generic.ICollection<Party>? Party { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails4 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails6>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractDetails 
    {
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the creation date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreationDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails5>? PartyDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventDetails 
    {
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails5 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails7>? BenefitDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractDetails2 
    {
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the creation date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreationDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("partyDetails")]
        public System.Collections.Generic.ICollection<PartyDetails6>? PartyDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventDetails2 
    {
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FeeDetails6 
    {
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the description of the fee name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeDescription")]
        public string? FeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the standard fee amount before pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OriginalFee { get; set; }= default!;
    
        /// <summary>Indicates the total signed adjustment amount which is calculated during pricing evaluation. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAdjusted")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeAdjusted { get; set; }= default!;
    
        /// <summary>Indicates the final fee after pricing evaluation. This would typically be unsigned. Pricing Evaluation means fee or interest amount calculated based on the predefined rules applied for the contract. It will add or subtract the adjusted amount to the original fee or interest amount based on the predefined pricing operand and the rule value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FinalFee { get; set; }= default!;
    
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates the final adjusted amount for the periodic charge. Periodic charge can be calculated based on the individual fee amount and pricing benefit also applied on it if defined. Pricing benefit defines the benefits applied for the fee or interest amount calculated which can be waived, adjusted or override their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseFeeAdjustment")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseFeeAdjustment { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benefitDetails")]
        public System.Collections.Generic.ICollection<BenefitDetails8>? BenefitDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("individualFeeDetails")]
        public System.Collections.Generic.ICollection<IndividualFeeDetails>? IndividualFeeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails2 
    {
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PackageDetails 
    {
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the contract or account in which the event is raised. This would typically be a unique reference to identify the specific contract or account in the system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseContractReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseContractReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the system in which the event originated from. For ex, ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SystemReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails3 
    {
        /// <summary>Contains the unique identifier of the product for the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("packageProductName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PackageProductName { get; set; }= default!;
    
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails4 
    {
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventDetails3 
    {
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the transaction reference which is triggered from external system like ‘Hogan’ or ‘TransactAccounts’ etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseTransactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseTransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails 
    {
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails2 
    {
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails3 
    {
        /// <summary>Indicates the identifier for the name of the benefit(s) passed on to the customer/party. Example: Southern Region, Account Package, Mobile Channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitName { get; set; }= default!;
    
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the rate for benefit in terms of percentage. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails4 
    {
        /// <summary>Indicates the identifier for the name of the benefit(s) passed on to the customer/party. Example: Southern Region, Account Package, Mobile Channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitName { get; set; }= default!;
    
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the rate for benefit in terms of percentage. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitRate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EligibilityDetails 
    {
        /// <summary>Name of the validation rule to be checked against an online or periodic activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ruleName")]
        public string? RuleName { get; set; }= default!;
    
        /// <summary>Indicates the failure message, if the rule applied on the customer has failed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ruleMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RuleMessage { get; set; }= default!;
    
        /// <summary>Indicates whether the individual rule passed for the customer or customer role. Result will be Pass or FailIndicates whether the individual rule passed for the customer or customer role. Result will be Pass or Fail</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rulePass")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RulePass { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails5 
    {
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Party 
    {
        /// <summary>Contains the identifier used for the party or customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyReference { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails6 
    {
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails5 
    {
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails7 
    {
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyDetails6 
    {
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Contains the identifier used for the role played by the party or customer in the contract or account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        public string? PartyRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenefitDetails8 
    {
        /// <summary>Indicates whether the fee needs to be made Due or Pay or Capitalise. Allowed values are DUE, PAY or CAPITALISE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeApplicationType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FeeApplicationType { get; set; }= default!;
    
        /// <summary>Indicates the pricing program under which benefit was offered. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitProgram { get; set; }= default!;
    
        /// <summary>Indicates the nature of benefit. It can be adjust, override or waive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitType { get; set; }= default!;
    
        /// <summary>Indicates the quantum of benefit for the benefit type. Pricing benefit defines the benefits which applied for the calculated fee or interest amount which can be waived, adjusted or overrides their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("benefitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BenefitAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IndividualFeeDetails 
    {
        /// <summary>Indicates the individual fee name for the periodic charge. Periodic charge can be calculated based on the individual fee amount and pricing benefit also applied on it if defined. Pricing benefit defines the benefits applied for the fee or interest amount calculated which can be waived, adjusted or override their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseFeeName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseFeeName { get; set; }= default!;
    
        /// <summary>Indicates the individual fee name description for the periodic charge. Periodic charge can be calculated based on the individual fee amount and pricing benefit also applied on it if defined. Pricing benefit defines the benefits applied for the fee or interest amount calculated which can be waived, adjusted or override their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseFeeDescription")]
        public string? BaseFeeDescription { get; set; }= default!;
    
        /// <summary>Indicates the individual fee amount for the periodic charge. Periodic charge can be calculated based on the individual fee amount and pricing benefit also applied on it if defined. Pricing benefit defines the benefits applied for the fee or interest amount calculated which can be waived, adjusted or override their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseFeeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseFeeAmount { get; set; }= default!;
    
        /// <summary>Indicates the final amount after adjustments are applied for the periodic charge. Periodic charge can be calculated based on the individual fee amount and pricing benefit also applied on it if defined. Pricing benefit defines the benefits applied for the fee or interest amount calculated which can be waived, adjusted or override their original amounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseFeeNetAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BaseFeeNetAmount { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016