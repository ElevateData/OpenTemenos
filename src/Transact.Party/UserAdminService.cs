//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Party.UserAdmin
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserAdminService
    {
        /// <summary>Create External User For Customer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserCustomerResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserCustomerResponse> CreateExternalUserCustomerAsync(ExternalUserCustomer payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create External User For Customer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserCustomerResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserCustomerResponse> CreateExternalUserCustomerAsync(ExternalUserCustomer payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse1> GetExternalUserAsync(string externalUserId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse1> GetExternalUserAsync(string externalUserId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> CreateExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> CreateExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> UpdateExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> UpdateExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> DeleteExternalUserAsync(string externalUserId, ExternalUserDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> DeleteExternalUserAsync(string externalUserId, ExternalUserDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Initiate External User</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> InitiateExternalUserAsync(ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate External User</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> InitiateExternalUserAsync(ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Amend External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> AmendExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Amend External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> AmendExternalUserAsync(string externalUserId, ExternalUser payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Approve External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> ApproveExternalUserAsync(string externalUserId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> ApproveExternalUserAsync(string externalUserId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Reject External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> RejectExternalUserAsync(string externalUserId, ExternalUserDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reject External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> RejectExternalUserAsync(string externalUserId, ExternalUserDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Initiate External User Delete</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserDeleteResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> InitiateExternalUserDeleteAsync(string externalUserId, ExternalUserDeleteDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate External User Delete</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalUserDeleteResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserResponse> InitiateExternalUserDeleteAsync(string externalUserId, ExternalUserDeleteDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve Unauthorised External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="subArrangementId">The subset of Master arrangement.</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUserApprovalsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserApprovalsResponse> GetExternalUserApprovalsAsync(string? externalUserId, string? externalUserName, string? customerId, string? arrangementId, string? subArrangementId, string? channelId, string? externalUserStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Unauthorised External User</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="subArrangementId">The subset of Master arrangement.</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUserApprovalsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalUserApprovalsResponse> GetExternalUserApprovalsAsync(string? externalUserId, string? externalUserName, string? customerId, string? arrangementId, string? subArrangementId, string? channelId, string? externalUserStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve Customer External Users</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CustomerExternalUsersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerExternalUsersResponse> GetCustomerExternalUsersAsync(string customerId, string? externalUserId, string? externalUserName, string? arrangementId, string? channelId, string? externalUserStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Customer External Users</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CustomerExternalUsersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerExternalUsersResponse> GetCustomerExternalUsersAsync(string customerId, string? externalUserId, string? externalUserName, string? arrangementId, string? channelId, string? externalUserStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve External Users</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="subArrangementId">The subset of Master arrangement.</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUsersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerExternalUsersResponse> GetExternalUsersAsync(string? externalUserId, string? externalUserName, string? arrangementId, string? subArrangementId, string? channelId, string? externalUserStatus, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve External Users</summary>
        /// <param name="externalUserId">Contains the external user identifier for which the consent is created.</param>
        /// <param name="externalUserName">External or Digital Channel User Name</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="subArrangementId">The subset of Master arrangement.</param>
        /// <param name="channelId">Id of the (digital) channel</param>
        /// <param name="externalUserStatus">External User Access status. Can be Active,  Inactive, Barred, Initiated</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExternalUsersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerExternalUsersResponse> GetExternalUsersAsync(string? externalUserId, string? externalUserName, string? arrangementId, string? subArrangementId, string? channelId, string? externalUserStatus, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve Customer Relations</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="relationType">The type of relation that is used between customers</param>
        /// <param name="excludeCustomerType">The type of the customer to be excluded from the related customers list</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CustomerRelationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerRelationsResponse> GetCustomerRelationsAsync(string customerId, string? relationType, string? excludeCustomerType, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Customer Relations</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="relationType">The type of relation that is used between customers</param>
        /// <param name="excludeCustomerType">The type of the customer to be excluded from the related customers list</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CustomerRelationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerRelationsResponse> GetCustomerRelationsAsync(string customerId, string? relationType, string? excludeCustomerType, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves User Profile</summary>
        /// <param name="userId">The user name to be loaded for reporting jobs during Close of Business If no user name is entered in this field then the default profile for the user 'operator' is used.</param>
        /// <param name="userSignOnName">This is the name entered by the User to sign on to the System. It is used by the System as an alternative key to access User details</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UserProfileResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfileResponse> GetUserProfileAsync(string? userId, string? userSignOnName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves User Profile</summary>
        /// <param name="userId">The user name to be loaded for reporting jobs during Close of Business If no user name is entered in this field then the default profile for the user 'operator' is used.</param>
        /// <param name="userSignOnName">This is the name entered by the User to sign on to the System. It is used by the System as an alternative key to access User details</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UserProfileResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfileResponse> GetUserProfileAsync(string? userId, string? userSignOnName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserCustomer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserCustomer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserCustomerBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserCustomerBody 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public System.Collections.Generic.ICollection<Email>? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("sms")]
        public System.Collections.Generic.ICollection<Sms>? Sms { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("legalDoc")]
        public System.Collections.Generic.ICollection<LegalDoc>? LegalDoc { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public System.Collections.Generic.ICollection<Street>? Street { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public System.Collections.Generic.ICollection<PostCode>? PostCode { get; set; }= default!;
    
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public System.Collections.Generic.ICollection<TownCountry>? TownCountry { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public System.Collections.Generic.ICollection<Country>? Country { get; set; }= default!;
    
        /// <summary>Identifies the inter-relationship between customer with other customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relation")]
        public System.Collections.Generic.ICollection<Relation>? Relation { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public System.Collections.Generic.ICollection<Override2>? Override { get; set; }= default!;
    
        /// <summary>Main menu title or header which the user wants to display on the screen when requesting the display of this main menu. This field can be expanded to allow the user to enter the description of the main menu in various languages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Title { get; set; }= default!;
    
        /// <summary>Customer's given name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string GivenName { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string LastName { get; set; }= default!;
    
        /// <summary>Gender of the Individual Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Gender { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }= default!;
    
        /// <summary>The identifier of the nationality of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nationalityId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? NationalityId { get; set; }= default!;
    
        /// <summary>The identifier of the country of residence of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("residenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ResidenceId { get; set; }= default!;
    
        /// <summary>An institution-defined identifier of the type of customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? SectorId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CompanyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserCustomerResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserCustomerResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserCustomerResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserCustomerResponseBody 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public System.Collections.Generic.ICollection<Email2>? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("sms")]
        public System.Collections.Generic.ICollection<Sms2>? Sms { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("legalDoc")]
        public System.Collections.Generic.ICollection<LegalDoc2>? LegalDoc { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public System.Collections.Generic.ICollection<Street2>? Street { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public System.Collections.Generic.ICollection<PostCode2>? PostCode { get; set; }= default!;
    
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public System.Collections.Generic.ICollection<TownCountry2>? TownCountry { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public System.Collections.Generic.ICollection<Country2>? Country { get; set; }= default!;
    
        /// <summary>Contains the name of the account, basically the short title of the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        public System.Collections.Generic.ICollection<ShortName>? ShortName { get; set; }= default!;
    
        /// <summary>Short title for the Account to be created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public System.Collections.Generic.ICollection<Name>? Name { get; set; }= default!;
    
        /// <summary>Identifies the inter-relationship between customer with other customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relation")]
        public System.Collections.Generic.ICollection<Relation2>? Relation { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public System.Collections.Generic.ICollection<Override3>? Override { get; set; }= default!;
    
        /// <summary>Main menu title or header which the user wants to display on the screen when requesting the display of this main menu. This field can be expanded to allow the user to enter the description of the main menu in various languages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Title { get; set; }= default!;
    
        /// <summary>Customer's given name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("givenName")]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string? GivenName { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string? LastName { get; set; }= default!;
    
        /// <summary>Gender of the Individual Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Gender { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }= default!;
    
        /// <summary>The identifier of the nationality of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nationalityId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? NationalityId { get; set; }= default!;
    
        /// <summary>The identifier of the country of residence of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("residenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ResidenceId { get; set; }= default!;
    
        /// <summary>Specifies an alternative easy means of referencing the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerMnemonic")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerMnemonic { get; set; }= default!;
    
        /// <summary>Internet banking service enabled for customer or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internetBankingService")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? InternetBankingService { get; set; }= default!;
    
        /// <summary>Contains the type of customer, for example ACTIVE, PROSPECT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerType { get; set; }= default!;
    
        /// <summary>An institution-defined identifier of the type of customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sectorId")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? SectorId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CompanyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUser</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUser 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserBody 
    {
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<Channels>? Channels { get; set; }= default!;
    
        /// <summary>External or Digital Channel User Name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ExternalUserName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Authenticate on customer login update</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authenticationServerUpdate")]
        public bool? AuthenticationServerUpdate { get; set; }= default!;
    
        /// <summary>External user sign in channels details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserSignMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ExternalUserSignMethod { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Used for deciding in which format the dates are to be displayed for a user / for a language</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateFormat")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DateFormat { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserResponseBody 
    {
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<Channels2>? Channels { get; set; }= default!;
    
        /// <summary>External or Digital Channel User Name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ExternalUserName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Authenticate on customer login update</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authenticationServerUpdate")]
        public bool? AuthenticationServerUpdate { get; set; }= default!;
    
        /// <summary>External user sign in channels details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserSignMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ExternalUserSignMethod { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Used for deciding in which format the dates are to be displayed for a user / for a language</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateFormat")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DateFormat { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserDeleteDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserDeleteDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserResponse1Body : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalUserApprovalsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserApprovalsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalUserApprovalsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalUserApprovalsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>CustomerExternalUsersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerExternalUsersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerExternalUsersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerExternalUsersResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>CustomerRelationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerRelationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerRelationsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerRelationsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>UserProfileResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UserProfileResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UserProfileResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UserProfileResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Email 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Email1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Sms 
    {
        /// <summary>The mobile SMS number of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("smsNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? SmsNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LegalDoc 
    {
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string DocumentName { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string DocumentId { get; set; }= default!;
    
        /// <summary>Identifies the Name of the  joint, substantial or beneficial owner</summary>
        [System.Text.Json.Serialization.JsonPropertyName("holderName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? HolderName { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Street 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Street1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostCode 
    {
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostCode1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TownCountry 
    {
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TownCountry1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Country 
    {
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Country1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Relation 
    {
        /// <summary>Identifies the inter-relationship between Customer records and enables a link to be formed for the purpose of evaluating the overall Customer position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(13, MinimumLength = 1)]
        public string RelationCode { get; set; }= default!;
    
        /// <summary>Identifies the Customer id details of the Related Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? RelatedCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Email2 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Email { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Sms2 
    {
        /// <summary>The mobile SMS number of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("smsNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? SmsNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LegalDoc2 
    {
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DocumentName { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Identifies the Name of the  joint, substantial or beneficial owner</summary>
        [System.Text.Json.Serialization.JsonPropertyName("holderName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? HolderName { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Street2 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Street { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostCode2 
    {
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TownCountry2 
    {
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TownCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Country2 
    {
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Country { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShortName 
    {
        /// <summary>Indicates the short name of Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerShortName")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? CustomerShortName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Name 
    {
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? CustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Relation2 
    {
        /// <summary>Identifies the inter-relationship between Customer records and enables a link to be formed for the purpose of evaluating the overall Customer position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(13, MinimumLength = 1)]
        public string? RelationCode { get; set; }= default!;
    
        /// <summary>Identifies the Customer id details of the Related Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? RelatedCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override3 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channels 
    {
        /// <summary>Id of the (digital) channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channelId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChannelId { get; set; }= default!;
    
        /// <summary>External User Access status. Can be Active,  Inactive, Barred, Initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ExternalUserStatus { get; set; }= default!;
    
        /// <summary>Customer status update with respective reasons</summary>
        [System.Text.Json.Serialization.JsonPropertyName("statusChangeReason")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? StatusChangeReason { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ProductLineId { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ArrangementId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SubArrangementId { get; set; }= default!;
    
        /// <summary>Defines whether the user has accepted the Terms and Conditions first displayed when the user logs in to the system for the very first time.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAccepted")]
        public bool? TermsAccepted { get; set; }= default!;
    
        /// <summary>The type of the user. Can be CORPORATE, INTERMEDIARY,PERSONAL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UserType { get; set; }= default!;
    
        /// <summary>The type of login method e.g. password, PIN, OTP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("loginMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LoginMethod { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("startDateTime")]
        public System.Collections.Generic.ICollection<StartDateTime>? StartDateTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("endDateTime")]
        public System.Collections.Generic.ICollection<EndDateTime>? EndDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channels2 
    {
        /// <summary>Id of the (digital) channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channelId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChannelId { get; set; }= default!;
    
        /// <summary>External User Access status. Can be Active,  Inactive, Barred, Initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ExternalUserStatus { get; set; }= default!;
    
        /// <summary>Customer status update with respective reasons</summary>
        [System.Text.Json.Serialization.JsonPropertyName("statusChangeReason")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? StatusChangeReason { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineId")]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string? ProductLineId { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SubArrangementId { get; set; }= default!;
    
        /// <summary>Defines whether the user has accepted the Terms and Conditions first displayed when the user logs in to the system for the very first time.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAccepted")]
        public bool? TermsAccepted { get; set; }= default!;
    
        /// <summary>The type of the user. Can be CORPORATE, INTERMEDIARY,PERSONAL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UserType { get; set; }= default!;
    
        /// <summary>The type of login method e.g. password, PIN, OTP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("loginMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LoginMethod { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("startDateTime")]
        public System.Collections.Generic.ICollection<StartDateTime2>? StartDateTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("endDateTime")]
        public System.Collections.Generic.ICollection<EndDateTime2>? EndDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<Channels3>? Channels { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public System.Collections.Generic.ICollection<Audit5>? Audit { get; set; }= default!;
    
        /// <summary>Contains the external user identifier for which the consent is created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserId { get; set; }= default!;
    
        /// <summary>External or Digital Channel User Name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Authenticate on customer login update</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authenticationServerUpdate")]
        public bool? AuthenticationServerUpdate { get; set; }= default!;
    
        /// <summary>External user sign in channels details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserSignMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalUserSignMethod { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Used for deciding in which format the dates are to be displayed for a user / for a language</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateFormat")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? DateFormat { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<Channels4>? Channels { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public System.Collections.Generic.ICollection<Audit6>? Audit { get; set; }= default!;
    
        /// <summary>Contains the external user identifier for which the consent is created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserId { get; set; }= default!;
    
        /// <summary>External or Digital Channel User Name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The type of authentication for this external user. It should be either External or User Maintained.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authenticationType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AuthenticationType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<Channels5>? Channels { get; set; }= default!;
    
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emails")]
        public System.Collections.Generic.ICollection<Emails>? Emails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public System.Collections.Generic.ICollection<Audit7>? Audit { get; set; }= default!;
    
        /// <summary>Contains the external user identifier for which the consent is created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserId { get; set; }= default!;
    
        /// <summary>External or Digital Channel User Name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ExternalUserName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Flag to authenticate the transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("txnSign")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TxnSign { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Gender of the Individual Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string? Gender { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Identifies the Customer id details of the Related Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedCustomerId")]
        public string? RelatedCustomerId { get; set; }= default!;
    
        /// <summary>Main menu title or header which the user wants to display on the screen when requesting the display of this main menu. This field can be expanded to allow the user to enter the description of the main menu in various languages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; }= default!;
    
        /// <summary>Level of permission applicable for the associated Products; Possible values: Exclude, See, Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedCustomerName")]
        public string? RelatedCustomerName { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string? Street { get; set; }= default!;
    
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public string? TownCountry { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string? PostCode { get; set; }= default!;
    
        /// <summary>Identifies the inter-relationship id details of customer relationship with other customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationCodeId")]
        public string? RelationCodeId { get; set; }= default!;
    
        /// <summary>Identifies the inter-relationship name details of customer relationship with other customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationCodeName")]
        public string? RelationCodeName { get; set; }= default!;
    
        /// <summary>Identifies the Relationship code id details for the Related Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reverseRelationCodeId")]
        public string? ReverseRelationCodeId { get; set; }= default!;
    
        /// <summary>Identifies the Relationship code name details for the Related Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reverseRelationCodeName")]
        public string? ReverseRelationCodeName { get; set; }= default!;
    
        /// <summary>The type of relation that is used between customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RelationType { get; set; }= default!;
    
        /// <summary>The type of the customer to be excluded from the related customers list</summary>
        [System.Text.Json.Serialization.JsonPropertyName("excludeCustomerType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExcludeCustomerType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>The user name to be loaded for reporting jobs during Close of Business If no user name is entered in this field then the default profile for the user 'operator' is used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? UserId { get; set; }= default!;
    
        /// <summary>Specifies the name by which the User is known and can be used for reporting purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UserName { get; set; }= default!;
    
        /// <summary>This is the name entered by the User to sign on to the System. It is used by the System as an alternative key to access User details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userSignOnName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? UserSignOnName { get; set; }= default!;
    
        /// <summary>The last Date and time when the Customer logged in to the Digital Channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateLastUsed")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateLastUsed { get; set; }= default!;
    
        /// <summary>Indicates the time stamp at which the transaction history for the account is retrieved</summary>
        [System.Text.Json.Serialization.JsonPropertyName("timeLastUsed")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? TimeLastUsed { get; set; }= default!;
    
        /// <summary>Used for deciding in which format the dates are to be displayed for a user / for a language</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateFormat")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? DateFormat { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("languageId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Date of the current business day for all online activities in the selected Company. This field is updated automatically with the date from 'nextWorkingDay' during the Close of Business processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentWorkingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentWorkingDate { get; set; }= default!;
    
        /// <summary>Department identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("departmentId")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? DepartmentId { get; set; }= default!;
    
        /// <summary>Specifies the function the user can perform on the application</summary>
        [System.Text.Json.Serialization.JsonPropertyName("function")]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string? Function { get; set; }= default!;
    
        /// <summary>Specifies the format of the amount to be used for the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountFormat")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? AmountFormat { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? DealerDesk { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StartDateTime 
    {
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? StartTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EndDateTime 
    {
        /// <summary>Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? EndTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StartDateTime2 
    {
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? StartTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EndDateTime2 
    {
        /// <summary>Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? EndTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channels3 
    {
        /// <summary>Id of the (digital) channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channelId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChannelId { get; set; }= default!;
    
        /// <summary>External User Access status. Can be Active,  Inactive, Barred, Initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalUserStatus { get; set; }= default!;
    
        /// <summary>Customer status update with respective reasons</summary>
        [System.Text.Json.Serialization.JsonPropertyName("statusChangeReason")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? StatusChangeReason { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProductLineId { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubArrangementId { get; set; }= default!;
    
        /// <summary>Defines whether the user has accepted the Terms and Conditions first displayed when the user logs in to the system for the very first time.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAccepted")]
        public bool? TermsAccepted { get; set; }= default!;
    
        /// <summary>The type of the user. Can be CORPORATE, INTERMEDIARY,PERSONAL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? UserType { get; set; }= default!;
    
        /// <summary>The type of login method e.g. password, PIN, OTP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("loginMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LoginMethod { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("startDateTime")]
        public System.Collections.Generic.ICollection<StartDateTime3>? StartDateTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("endDateTime")]
        public System.Collections.Generic.ICollection<EndDateTime3>? EndDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit5 
    {
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Unique identification number for the request initiator</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterId")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? InputterId { get; set; }= default!;
    
        /// <summary>Request initiator name details of bank user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterName")]
        public string? InputterName { get; set; }= default!;
    
        /// <summary>Name of the external user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalInputterName")]
        public string? ExternalInputterName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channels4 
    {
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubArrangementId { get; set; }= default!;
    
        /// <summary>The name of the sub arrangement that is displayed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubArrangementName { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Id of the (digital) channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channelId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChannelId { get; set; }= default!;
    
        /// <summary>External User Access status. Can be Active,  Inactive, Barred, Initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalUserStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit6 
    {
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>To get the version record details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? CurrentNumber { get; set; }= default!;
    
        /// <summary>Unique identification number for the request initiator</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterId")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? InputterId { get; set; }= default!;
    
        /// <summary>Request initiator name details of bank user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterName")]
        public string? InputterName { get; set; }= default!;
    
        /// <summary>Name of the external user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalInputterName")]
        public string? ExternalInputterName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Channels5 
    {
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubArrangementId { get; set; }= default!;
    
        /// <summary>The name of the sub arrangement that is displayed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subArrangementName")]
        public string? SubArrangementName { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Id of the (digital) channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("channelId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChannelId { get; set; }= default!;
    
        /// <summary>External User Access status. Can be Active,  Inactive, Barred, Initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalUserStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalUserStatus { get; set; }= default!;
    
        /// <summary>The type of the user. Can be CORPORATE, INTERMEDIARY,PERSONAL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? UserType { get; set; }= default!;
    
        /// <summary>The type of login method e.g. password, PIN, OTP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("loginMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LoginMethod { get; set; }= default!;
    
        /// <summary>Defines whether the user has accepted the Terms and Conditions first displayed when the user logs in to the system for the very first time.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAccepted")]
        public bool? TermsAccepted { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("dateTimeLastUsed")]
        public System.Collections.Generic.ICollection<DateTimeLastUsed>? DateTimeLastUsed { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Emails 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit7 
    {
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>To get the version record details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? CurrentNumber { get; set; }= default!;
    
        /// <summary>Unique identification number for the request initiator</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterId")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? InputterId { get; set; }= default!;
    
        /// <summary>Request initiator name details of bank user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputterName")]
        public string? InputterName { get; set; }= default!;
    
        /// <summary>Name of the external user</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalInputterName")]
        public string? ExternalInputterName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StartDateTime3 
    {
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$")]
        public string? StartTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EndDateTime3 
    {
        /// <summary>Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$")]
        public string? EndTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DateTimeLastUsed 
    {
        /// <summary>The last Date and time when the Customer logged in to the Digital Channel</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateLastUsed")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateLastUsed { get; set; }= default!;
    
        /// <summary>Indicates the time stamp at which the transaction history for the account is retrieved</summary>
        [System.Text.Json.Serialization.JsonPropertyName("timeLastUsed")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$")]
        public string? TimeLastUsed { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016