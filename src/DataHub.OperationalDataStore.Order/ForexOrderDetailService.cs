//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace DataHub.OperationalDataStore.Order.ForexOrderDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IForexOrderDetailService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the forex orders of a customer</summary>
        /// <param name="counterpartyId">The identifier of the counter party</param>
        /// <param name="limOrderReference">Transaction reference ID of the limit order.</param>
        /// <returns>getForexDealsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexDealsResponse> GetForexDealsAsync(string counterpartyId, string? limOrderReference = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the forex order created for customers to buy/sell currencies at desired rates</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="counterpartyId">The identifier of the counter party</param>
        /// <returns>getCustomerForexLimitOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerForexLimitOrdersResponse> GetCustomerForexLimitOrdersAsync(string recordId, string? counterpartyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    /// <summary>getForexDealsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexDealsResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealsResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("forex")]
        public System.Collections.Generic.ICollection<Forex>? Forex { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerForexLimitOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerForexLimitOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerForexLimitOrdersResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerForexLimitOrdersResponseBody 
    {
        /// <summary>Holds the Forex limit order details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fxLimOrder")]
        public System.Collections.Generic.ICollection<FxLimOrder>? FxLimOrder { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Forex 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Exchange rate applicable for spot trades.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spotRate")]
        public string? SpotRate { get; set; }= default!;
    
        /// <summary>FX rate applicable for forward period contracts. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardRate")]
        public string? ForwardRate { get; set; }= default!;
    
        /// <summary>Transaction reference ID of the limit order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limOrderReference")]
        public string? LimOrderReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        public string? DealType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxLimOrder 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSell")]
        public BuyOrSell? BuyOrSell { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        public string? OrderStatus { get; set; }= default!;
    
        /// <summary>The rate at which the order is executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionRate")]
        public string? ExecutionRate { get; set; }= default!;
    
        /// <summary>The  FX deal reference number. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexDealId")]
        public ForexDealId? ForexDealId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BuyOrSell 
    {
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSell")]
        public string? BuyOrSell1 { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>Opposite to order amount. Amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraAmount")]
        public string? ContraAmount { get; set; }= default!;
    
        /// <summary>The low rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateLow")]
        public string? OrderRateLow { get; set; }= default!;
    
        /// <summary>The high rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateHI")]
        public string? OrderRateHI { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexDealId 
    {
        /// <summary>The  FX deal reference number. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexDealId")]
        public string? ForexDealId1 { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016