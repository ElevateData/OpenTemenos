//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace DataHub.OperationalDataStore.Order.FundsTransferDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFundsTransferDetailsService
    {
        /// <summary>Retrieves the bulk transfer details</summary>
        /// <param name="inwardPayType">Identifies the incoming SWIFT payment received direct from Delivery, payments generated by standing orders, and local clearing payments.</param>
        /// <returns>getBulkTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBulkTransfersResponse> GetBulkTransfersAsync(string inwardPayType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the bulk transfer details</summary>
        /// <param name="inwardPayType">Identifies the incoming SWIFT payment received direct from Delivery, payments generated by standing orders, and local clearing payments.</param>
        /// <returns>getBulkTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBulkTransfersResponse> GetBulkTransfersAsync(string inwardPayType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getAccountTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAccountTransfersResponse> GetAccountTransfersAsync(string debitAccountId, string creditAccountId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getAccountTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAccountTransfersResponse> GetAccountTransfersAsync(string debitAccountId, string creditAccountId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the Inward Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getInwardFundsTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInwardFundsTransferResponse> GetInwardFundsTransferAsync(string debitAccountId, string creditAccountId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Inward Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getInwardFundsTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInwardFundsTransferResponse> GetInwardFundsTransferAsync(string debitAccountId, string creditAccountId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the Outward Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getOutwardFundsTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOutwardFundsTransferResponse> GetOutwardFundsTransferAsync(string debitAccountId, string creditAccountId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Outward Funds Transfer details between Customer Accounts</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <returns>getOutwardFundsTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOutwardFundsTransferResponse> GetOutwardFundsTransferAsync(string debitAccountId, string creditAccountId, System.Threading.CancellationToken cancellationToken);
    
    }

    /// <summary>getBulkTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetBulkTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetBulkTransfersResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetBulkTransfersResponseBody 
    {
        /// <summary>Handle all types of Local and Foreign Currency, Inward, Outward and Onward payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransfer")]
        public System.Collections.Generic.ICollection<FundsTransfer>? FundsTransfer { get; set; }= default!;
    
    
    }
    
    /// <summary>getAccountTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAccountTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetAccountTransfersResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAccountTransfersResponseBody 
    {
        /// <summary>Handle all types of Local and Foreign Currency, Inward, Outward and Onward payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransfer")]
        public System.Collections.Generic.ICollection<FundsTransfer2>? FundsTransfer { get; set; }= default!;
    
    
    }
    
    /// <summary>getInwardFundsTransferResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetInwardFundsTransferResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetInwardFundsTransferResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetInwardFundsTransferResponseBody 
    {
        /// <summary>Handle all types of Local and Foreign Currency, Inward, Outward and Onward payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransfer")]
        public System.Collections.Generic.ICollection<FundsTransfer3>? FundsTransfer { get; set; }= default!;
    
    
    }
    
    /// <summary>getOutwardFundsTransferResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetOutwardFundsTransferResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetOutwardFundsTransferResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetOutwardFundsTransferResponseBody 
    {
        /// <summary>Handle all types of Local and Foreign Currency, Inward, Outward and Onward payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransfer")]
        public System.Collections.Generic.ICollection<FundsTransfer4>? FundsTransfer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsTransfer 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Identifies the incoming SWIFT payment received direct from Delivery, payments generated by standing orders, and local clearing payments.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inwardPayType")]
        public string? InwardPayType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        public string? DebitAmount { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        public string? CreditAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsTransfer2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        public string? DebitAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date for the debit side of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        public string? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        public string? CreditAmount { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        public string? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>Indicates the commission type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        public CommissionType? CommissionType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsTransfer3 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        public string? DebitAmount { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Indicates the value date for the debit side of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        public string? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        public string? CreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        public string? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        public OrderingCustomerId? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        public OrderingBank? OrderingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsTransfer4 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        public string? DebitAmount { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Indicates the value date for the debit side of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        public string? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        public string? CreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        public string? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        public BeneficiaryName? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        public BeneficiaryBank? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        public BeneficiaryCustomerId? BeneficiaryCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CommissionType 
    {
        /// <summary>Indicates the commission type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        public string? CommissionType1 { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        public string? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingCustomerId 
    {
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        public string? OrderingCustomerId1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingBank 
    {
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        public string? OrderingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryName 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        public string? BeneficiaryName1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryBank 
    {
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        public string? BeneficiaryBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerId 
    {
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        public string? BeneficiaryCustomerId1 { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016