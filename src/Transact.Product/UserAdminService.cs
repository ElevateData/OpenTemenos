//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Product.UserAdmin
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserAdminService
    {
        /// <summary>Retrieves the limit details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ProtectionLimitConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtectionLimitConditionsResponse> GetProtectionLimitConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the limit details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ProtectionLimitConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtectionLimitConditionsResponse> GetProtectionLimitConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the availability details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AvailabilityConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailabilityConditionsResponse> GetAvailabilityConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the availability details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AvailabilityConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailabilityConditionsResponse> GetAvailabilityConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the products</summary>
        /// <param name="productLineId">The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</param>
        /// <param name="productGroupId">The group, as defined by the institution, that the product belongs to.</param>
        /// <param name="eligibilityFilter">Indicates the filter based on the Eligibility options available to the customer</param>
        /// <param name="multiBookEligible">Flag which indicates whether multi booking is applicable or not</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ProductsByProductLineResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductsByProductLineResponse> GetProductsByProductLineAsync(string productLineId, string? productGroupId, string? eligibilityFilter, string? multiBookEligible, string? productId, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the products</summary>
        /// <param name="productLineId">The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</param>
        /// <param name="productGroupId">The group, as defined by the institution, that the product belongs to.</param>
        /// <param name="eligibilityFilter">Indicates the filter based on the Eligibility options available to the customer</param>
        /// <param name="multiBookEligible">Flag which indicates whether multi booking is applicable or not</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ProductsByProductLineResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductsByProductLineResponse> GetProductsByProductLineAsync(string productLineId, string? productGroupId, string? eligibilityFilter, string? multiBookEligible, string? productId, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the permissions</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PermissionConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionConditionsResponse> GetPermissionConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the permissions</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PermissionConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionConditionsResponse> GetPermissionConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the licensing condition</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LicensingConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicensingConditionsResponse> GetLicensingConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the licensing condition</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="propertyId">The identifier of the product condition</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LicensingConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicensingConditionsResponse> GetLicensingConditionsAsync(string productId, string? propertyId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the priveleges</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PrivilegeConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PrivilegeConditionsResponse> GetPrivilegeConditionsAsync(string productId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the priveleges</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PrivilegeConditionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PrivilegeConditionsResponse> GetPrivilegeConditionsAsync(string productId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>ProtectionLimitConditionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProtectionLimitConditionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProtectionLimitConditionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProtectionLimitConditionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>AvailabilityConditionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailabilityConditionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AvailabilityConditionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailabilityConditionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>ProductsByProductLineResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProductsByProductLineResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProductsByProductLineResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProductsByProductLineResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>PermissionConditionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PermissionConditionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PermissionConditionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PermissionConditionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>LicensingConditionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LicensingConditionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LicensingConditionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LicensingConditionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>PrivilegeConditionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PrivilegeConditionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PrivilegeConditionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PrivilegeConditionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The product condition has an activity type associated that drives an action.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiation")]
        public System.Collections.Generic.ICollection<Negotiation>? Negotiation { get; set; }= default!;
    
        /// <summary>Contains Limit allocated value for the customer defined in the online service contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerLimits")]
        public System.Collections.Generic.ICollection<CustomerLimits>? CustomerLimits { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PropertyId { get; set; }= default!;
    
        /// <summary>The Limit amount that is actually available for use. The system limit checks are preformed against the online limit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 10D)]
        public double? LimitAmount { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Contains Maximum limit value that can be assigned to the customers defined in the online service contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerMaximumLimit")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerMaximumLimit { get; set; }= default!;
    
        /// <summary>Contains flag value to define whether the limit update happens at input or authorisation of transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("usageUpdate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UsageUpdate { get; set; }= default!;
    
        /// <summary>Specifies whether the limit utilisation reset takes place as the calendar date or at close of business.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationReset")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UtilisationReset { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("day")]
        public System.Collections.Generic.ICollection<Day>? Day { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PropertyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencies")]
        public System.Collections.Generic.ICollection<Currencies>? Currencies { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("termDetails")]
        public System.Collections.Generic.ICollection<TermDetails>? TermDetails { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineId")]
        public string? ProductLineId { get; set; }= default!;
    
        /// <summary>Description of the product line, e.g. Client Consent for product line CONSENT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineName")]
        public string? ProductLineName { get; set; }= default!;
    
        /// <summary>The group, as defined by the institution, that the product belongs to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProductGroupId { get; set; }= default!;
    
        /// <summary>Description of the product group</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProductGroupName { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>The date the product is available in the catalogue for sale to customers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableFromDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Indicates a group under which the products exists</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroup")]
        public System.Collections.Generic.ICollection<ProductGroup>? ProductGroup { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PropertyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PropertyId { get; set; }= default!;
    
        /// <summary>The maximum number of users that can be linked to a master arrangement or its roles</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noOfUsers")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? NoOfUsers { get; set; }= default!;
    
        /// <summary>The maximum number of roles that can be linked to the master arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noOfRoles")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? NoOfRoles { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public System.Collections.Generic.ICollection<Operations>? Operations { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        public string? PropertyId { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Contains the identifier name of the service that has to be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]
        public string? ServiceId { get; set; }= default!;
    
        /// <summary>The service related to an arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceName")]
        public string? ServiceName { get; set; }= default!;
    
        /// <summary>Indicate whether it is a mandatory service or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mandatoryService")]
        public bool? MandatoryService { get; set; }= default!;
    
        /// <summary>Indicate whether service is active or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceActive")]
        public bool? ServiceActive { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Negotiation 
    {
        /// <summary>Defines which individual attribute (field) has the negotiation rules defined in fields</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationRulesAttribute")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NegotiationRulesAttribute { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<Options>? Options { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public System.Collections.Generic.ICollection<Type>? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerLimits 
    {
        /// <summary>Allowed customers for the selected arrangement; where in they can see their product in Internet Banking</summary>
        [System.Text.Json.Serialization.JsonPropertyName("definedCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DefinedCustomer { get; set; }= default!;
    
        /// <summary>Contains Limit allocated value for the customer defined in the online service contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerLimit")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerLimit { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Day 
    {
        /// <summary>The Day for which availabilities are defined. This is a multi value set of fields, one set for each week day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dayName")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DayName { get; set; }= default!;
    
        /// <summary>The permissions for the current Day.Possible values: Null/Yes/No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("daySelect")]
        public bool? DaySelect { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public System.Collections.Generic.ICollection<Time>? Time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Currencies 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyName")]
        public string? CurrencyName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TermDetails 
    {
        /// <summary>Refers to the minimum term associated with the loan process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumTerm")]
        public string? MinimumTerm { get; set; }= default!;
    
        /// <summary>Refers to the maximum term associated with the loan process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumTerm")]
        public string? MaximumTerm { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProductGroup 
    {
        /// <summary>The group, as defined by the institution, that the product belongs to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ProductGroupId { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>The act of permitting, especially in giving formal consent to access a particular file or repository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("permission")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Permission { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Operations 
    {
        /// <summary>ID of the operation which Identifies the required operation to be executed for a Trade Finance contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operationId")]
        public string? OperationId { get; set; }= default!;
    
        /// <summary>Name of the operation which Identifies the required operation to be executed for a Trade Finance contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operationName")]
        public string? OperationName { get; set; }= default!;
    
        /// <summary>Indicate whether it is a mandatory operation or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mandatoryOperation")]
        public bool? MandatoryOperation { get; set; }= default!;
    
        /// <summary>Indiciate whether operation is active or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operationActive")]
        public bool? OperationActive { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("dependency")]
        public System.Collections.Generic.ICollection<Dependency>? Dependency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Options 
    {
        /// <summary>Defines named values to indicate if an option applies to the associated NR.ATTRIBUTE. More than one option can be associated with the NR.ATTRIBUTE, with certain restrictions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationRulesOptions")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NegotiationRulesOptions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Type 
    {
        /// <summary>Defines the negotiation rule that is linked to the field defined in Nr.Attribute. If an attribute has a negotiation rule linked to it. It is possible to define more than one negotiation rule for an attribute.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationRulesType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NegotiationRulesType { get; set; }= default!;
    
        /// <summary>Defines the value that links to the rule in field Nr.Type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationRulesValue")]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string? NegotiationRulesValue { get; set; }= default!;
    
        /// <summary>This field indicates whether to raise error or override message when rule is broken,Allows only two values ERROR or OVERRIDE,ERROR - Error message is raisedOVERRIDE - Override message is generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationRulesMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? NegotiationRulesMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Time 
    {
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$")]
        public string? StartTime { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$")]
        public string? EndTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dependency 
    {
        /// <summary>Indicate whether it is a dependent service or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dependentService")]
        public string? DependentService { get; set; }= default!;
    
        /// <summary>Indicate whether it is a dependent operation or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dependentOperation")]
        public string? DependentOperation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016