//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.System.ServiceAutomations
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IServiceAutomationService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new process in system</summary>
        /// <param name="processId">Contains the process identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>NewProcessResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewProcessResponse> CreateNewProcessAsync(string processId, NewProcess payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update process in system</summary>
        /// <param name="processId">Contains the process identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>NewProcessResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewProcessResponse> AmendNewProcessAsync(string processId, NewProcess payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of a specific service</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="serverName">Contains the name of the Server on which the service will run.</param>
        /// <param name="serverStatus">Status of Server  POSSIBLE VALUES: ACTIVE: To set the server as active INACTIVE: To set the server as inactive</param>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="processStatus">Contains the current process status. Allowed values: - 0: Ready - 1: Running - 2: Completed successfully - 3: On hold or in error</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailableServicesResponse> GetServiceAsync(string serviceId, string? serverName = null, string? serverStatus = null, string? workProfileId = null, string? processStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new service in system</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>NewServiceResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewServiceResponse> CreateNewServiceAsync(string serviceId, NewService payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a service in the system</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewServiceResponse> AmendServiceAsync(string serviceId, NewService payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a specific workload profile</summary>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="agentsRequired">Contains the number of agents required</param>
        /// <param name="workProfileTime">Contains the time a multithreaded process takes.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceWorkProfileResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AllServiceWorkProfilesResponse> GetServiceWorkProfileAsync(string workProfileId, string? agentsRequired = null, string? workProfileTime = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create service work load profile</summary>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceWorkProfileResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceWorkProfileResponse> CreateServiceWorkProfileAsync(string workProfileId, ServiceWorkProfile payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a service work load profile</summary>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceWorkProfileResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceWorkProfileResponse> AmendServiceWorkProfileAsync(string workProfileId, ServiceWorkProfile payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a list of all available services in system.</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="serverName">Contains the name of the Server on which the service will run.</param>
        /// <param name="serverStatus">Status of Server  POSSIBLE VALUES: ACTIVE: To set the server as active INACTIVE: To set the server as inactive</param>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="processStatus">Contains the current process status. Allowed values: - 0: Ready - 1: Running - 2: Completed successfully - 3: On hold or in error</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AvailableServicesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailableServicesResponse> GetAvailableServicesAsync(string? serviceId = null, string? serverName = null, string? serverStatus = null, string? workProfileId = null, string? processStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a detailed status of the specified service</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceStatusResponse> GetServiceStatusAsync(string serviceId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves  status of all the services</summary>
        /// <param name="serviceId">Contains the identifier name of the service that has to be executed.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AllServicesStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceStatusResponse> GetAllServicesStatusAsync(string? serviceId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a list of all available executed process times in system</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ServiceProcessTimesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceProcessTimesResponse> GetServiceProcessTimesAsync(int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves a list of elapsed times for reports generated during close of business processing</summary>
        /// <param name="businessClosureDate">Contains the business closure time and date on which the error occurred.</param>
        /// <param name="reportName">Contains the name of the process that produces the report</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ReportTimesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReportTimesResponse> GetReportTimesAsync(string businessClosureDate, string? reportName = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of all service workload profiles available in system</summary>
        /// <param name="workProfileId">Contains the reference to the record in service workload profiles for services.</param>
        /// <param name="agentsRequired">Contains the number of agents required</param>
        /// <param name="workProfileTime">Contains the time a multithreaded process takes.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AllServiceWorkProfilesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AllServiceWorkProfilesResponse> GetAllServiceWorkProfilesAsync(string? workProfileId = null, string? agentsRequired = null, string? workProfileTime = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves any logged error messages for a company during the Close of Business processing</summary>
        /// <param name="companyIdPath">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="businessClosureDate">Contains the business closure time and date on which the error occurred.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BusinessClosureErrorForCompanyResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessClosureErrorForCompanyResponse> GetBusinessClosureErrorForCompanyAsync(string companyIdPath, string? businessClosureDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyIdHeader = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the status metrics of the Close of Business process</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CobProgressResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CobProgressResponse> GetCobProgressAsync(int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the resolution date of the logged error messages for the  Close of Business processing to continue</summary>
        /// <param name="errorDetailId">Contains the unique identifier to the records on the table which logs the error messages for the close of business processing</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BusinessClosureErrorResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessClosureErrorResponse> AmendBusinessClosureErrorAsync(string errorDetailId, BusinessClosureError payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>NewProcess</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewProcess 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NewProcessBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewProcessBody 
    {
        /// <summary>Indicates the close of business stage in which the process is executed. The processes are grouped into four distinct stages. The first character is used to define the stage, which must be one of the following: A: Application D: Start of Day R: Reporting S: System O: Online. The system verifies that all the processes in the previous stage have completed successfully before continuing. The remaining 3 characters are process sequence number. Modifications to the sequence number should adhere to the following guidelines: Range 000 to 099: should not be modified. Range 100 to 899: only the last two digits should be modified. Range 900 - 999: should not be modified. If no sequence number (process dependency) has been appended to the process stage, then this process can be run concurrently within the stage. However if a sequence number (e.g. A009) has been specified then the process can be run only when all other processes with sequence numbers lower than this have completed successfully. Processes with the same sequence number can be run concurrently.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processStage")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ProcessStage { get; set; }= default!;
    
        /// <summary>Environment where the process will run. Typically this should be set to F</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processEnvironment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NewProcessBodyProcessEnvironment? ProcessEnvironment { get; set; }= default!;
    
        /// <summary>Contains the job identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? JobId { get; set; }= default!;
    
        /// <summary>Contains the verification job identifier.Typically used to control whether a job is completed before the current jobId is executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("verificationJobId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? VerificationJobId { get; set; }= default!;
    
        /// <summary>Contains the frequency on which the job is next processed. POSSIBLE VALUES:- D: Every working day. Dnn: Every nn'th working day. W: Weekly every Friday. - M: Last working day of every month. - Mnn: nn represents the offset added to the first day of every month to arrive at Next Run date. When the resultant date is a holiday, previous Working day is considered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? JobFrequency { get; set; }= default!;
    
        /// <summary>Contains bank date on which the job is to be next run</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nextRunDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NextRunDate { get; set; }= default!;
    
        /// <summary>Contains any input parameters/data required for the job</summary>
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Data { get; set; }= default!;
    
        /// <summary>Contains the operator-user name to be loaded for reporting jobs during Close of Business </summary>
        [System.Text.Json.Serialization.JsonPropertyName("operatorName")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? OperatorName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>NewProcessResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewProcessResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NewProcessResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewProcessResponseBody 
    {
        /// <summary>Indicates the close of business stage in which the process is executed. The processes are grouped into four distinct stages. The first character is used to define the stage, which must be one of the following: A: Application D: Start of Day R: Reporting S: System O: Online. The system verifies that all the processes in the previous stage have completed successfully before continuing. The remaining 3 characters are process sequence number. Modifications to the sequence number should adhere to the following guidelines: Range 000 to 099: should not be modified. Range 100 to 899: only the last two digits should be modified. Range 900 - 999: should not be modified. If no sequence number (process dependency) has been appended to the process stage, then this process can be run concurrently within the stage. However if a sequence number (e.g. A009) has been specified then the process can be run only when all other processes with sequence numbers lower than this have completed successfully. Processes with the same sequence number can be run concurrently.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processStage")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ProcessStage { get; set; }= default!;
    
        /// <summary>Environment where the process will run. Typically this should be set to F</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processEnvironment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NewProcessResponseBodyProcessEnvironment? ProcessEnvironment { get; set; }= default!;
    
        /// <summary>Contains the job identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? JobId { get; set; }= default!;
    
        /// <summary>Contains the verification job identifier.Typically used to control whether a job is completed before the current jobId is executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("verificationJobId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? VerificationJobId { get; set; }= default!;
    
        /// <summary>Contains the frequency on which the job is next processed. POSSIBLE VALUES:- D: Every working day. Dnn: Every nn'th working day. W: Weekly every Friday. - M: Last working day of every month. - Mnn: nn represents the offset added to the first day of every month to arrive at Next Run date. When the resultant date is a holiday, previous Working day is considered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? JobFrequency { get; set; }= default!;
    
        /// <summary>Contains bank date on which the job is to be next run</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nextRunDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NextRunDate { get; set; }= default!;
    
        /// <summary>Contains any input parameters/data required for the job</summary>
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Data { get; set; }= default!;
    
        /// <summary>Contains the operator-user name to be loaded for reporting jobs during Close of Business </summary>
        [System.Text.Json.Serialization.JsonPropertyName("operatorName")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? OperatorName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>NewService</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewService 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NewServiceBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewServiceBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("jobServerProfiles")]
        public System.Collections.Generic.ICollection<JobServerProfiles>? JobServerProfiles { get; set; }= default!;
    
        /// <summary>Contains the description of the Service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ServiceDescription { get; set; }= default!;
    
        /// <summary>Contains the operator-user name to be loaded for reporting jobs during Close of Business </summary>
        [System.Text.Json.Serialization.JsonPropertyName("operatorName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OperatorName { get; set; }= default!;
    
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NewServiceBodyInstruction? Instruction { get; set; }= default!;
    
        /// <summary>Unique reference to be used in service execution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? CorrelationId { get; set; }= default!;
    
    
    }
    
    /// <summary>NewServiceResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewServiceResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NewServiceResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewServiceResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("jobServerProfiles")]
        public System.Collections.Generic.ICollection<JobServerProfiles2>? JobServerProfiles { get; set; }= default!;
    
        /// <summary>Contains the description of the Service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ServiceDescription { get; set; }= default!;
    
        /// <summary>Contains the operator-user name to be loaded for reporting jobs during Close of Business </summary>
        [System.Text.Json.Serialization.JsonPropertyName("operatorName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OperatorName { get; set; }= default!;
    
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NewServiceResponseBodyInstruction? Instruction { get; set; }= default!;
    
        /// <summary>Unique reference to be used in service execution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? CorrelationId { get; set; }= default!;
    
    
    }
    
    /// <summary>ServiceWorkProfile</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceWorkProfile 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ServiceWorkProfileBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceWorkProfileBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StartTime { get; set; }= default!;
    
        /// <summary>Contains the number of agents required</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentsRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AgentsRequired { get; set; }= default!;
    
    
    }
    
    /// <summary>ServiceWorkProfileResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceWorkProfileResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ServiceWorkProfileResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceWorkProfileResponseBody 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StartTime { get; set; }= default!;
    
        /// <summary>Contains the number of agents required</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentsRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AgentsRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>AvailableServicesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableServicesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AvailableServicesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableServicesResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ServiceStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceStatusResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ServiceStatusResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceStatusResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>ServiceProcessTimesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceProcessTimesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ServiceProcessTimesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServiceProcessTimesResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>ReportTimesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportTimesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ReportTimesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReportTimesResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>AllServiceWorkProfilesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AllServiceWorkProfilesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AllServiceWorkProfilesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AllServiceWorkProfilesResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>BusinessClosureErrorForCompanyResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureErrorForCompanyResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BusinessClosureErrorForCompanyResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureErrorForCompanyResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    /// <summary>CobProgressResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CobProgressResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CobProgressResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CobProgressResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>BusinessClosureError</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureError 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BusinessClosureErrorBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureErrorBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fatalError")]
        public System.Collections.Generic.ICollection<FatalError>? FatalError { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessClosureErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BusinessClosureErrorResponseBody? Body { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessClosureErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fatalError")]
        public System.Collections.Generic.ICollection<FatalError2>? FatalError { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NewProcessBodyProcessEnvironment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NewProcessResponseBodyProcessEnvironment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class JobServerProfiles 
    {
        /// <summary>Contains the reference to the record in service workload profiles for services.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workProfileId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WorkProfileId { get; set; }= default!;
    
        /// <summary>Contains the name of the Server on which the service will run.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serverName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ServerName { get; set; }= default!;
    
        /// <summary>Contains the Status of Server. POSSIBLE VALUES: ACTIVE: To set the server as active INACTIVE: To set the server as inactive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobServerStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? JobServerStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NewServiceBodyInstruction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"START")]
        START = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STOP")]
        STOP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class JobServerProfiles2 
    {
        /// <summary>Contains the reference to the record in service workload profiles for services.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workProfileId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WorkProfileId { get; set; }= default!;
    
        /// <summary>Contains the name of the Server on which the service will run.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serverName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ServerName { get; set; }= default!;
    
        /// <summary>Contains the Status of Server. POSSIBLE VALUES: ACTIVE: To set the server as active INACTIVE: To set the server as inactive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobServerStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? JobServerStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum NewServiceResponseBodyInstruction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"START")]
        START = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STOP")]
        STOP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        [System.Text.Json.Serialization.JsonPropertyName("serverDetails")]
        public System.Collections.Generic.ICollection<ServerDetails>? ServerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("jobs")]
        public System.Collections.Generic.ICollection<Jobs>? Jobs { get; set; }= default!;
    
        /// <summary>Contains the identifier name of the service that has to be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ServiceId { get; set; }= default!;
    
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        public string? Instruction { get; set; }= default!;
    
        /// <summary>Contains the current process status. Allowed values: - 0: Ready - 1: Running - 2: Completed successfully - 3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? ProcessStatus { get; set; }= default!;
    
        /// <summary>Contains the time on which the service was started.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobLastStartedAt")]
        public string? JobLastStartedAt { get; set; }= default!;
    
        /// <summary>Contains the time on which the service was stopped.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobLastStoppedAt")]
        public string? JobLastStoppedAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Contains the identifier name of the service that has to be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ServiceId { get; set; }= default!;
    
        /// <summary>Contains the agent reference number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? AgentReference { get; set; }= default!;
    
        /// <summary>Contains the name of the Server on which the service will run.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serverName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ServerName { get; set; }= default!;
    
        /// <summary>Contains the status of the agent. Possible values: - RUNNING - STOPPED</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AgentStatus { get; set; }= default!;
    
        /// <summary>Contains the port on which agent is running</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? PortId { get; set; }= default!;
    
        /// <summary>Contains the session number in which the agent is running</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sessionNo")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 10D)]
        public double? SessionNo { get; set; }= default!;
    
        /// <summary>Contains the Last contact time of running agent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastContactTime")]
        public System.DateTimeOffset? LastContactTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public System.Collections.Generic.ICollection<Group>? Group { get; set; }= default!;
    
        /// <summary>Contains the identifier name of the service that has to be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ServiceId { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public System.DateTimeOffset? StartTime { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public System.DateTimeOffset? EndTime { get; set; }= default!;
    
        /// <summary>Contains the number of records processed per minute. Calculated as: keys processed / elapsed time * 60</summary>
        [System.Text.Json.Serialization.JsonPropertyName("throughPut")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ThroughPut { get; set; }= default!;
    
        /// <summary>Contains the time taken to complete the job. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastTime")]
        public System.DateTimeOffset? LastTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public System.Collections.Generic.ICollection<Group2>? Group { get; set; }= default!;
    
        /// <summary>Contains the name of the process that produces the report</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reportName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ReportName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public System.Collections.Generic.ICollection<Group3>? Group { get; set; }= default!;
    
        /// <summary>Contains the reference to the record in service workload profiles for services.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workProfileId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? WorkProfileId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Contains the unique identifier to the records on the table which logs the error messages for the close of business processing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorDetailId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? ErrorDetailId { get; set; }= default!;
    
        /// <summary>Contains the business closure time and date on which the error occurred.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("businessClosureDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BusinessClosureDate { get; set; }= default!;
    
        /// <summary>The identifier of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Contains the keys to the records that were saved at the time the error was reported.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DetailKey { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        public System.DateTimeOffset? DateTime { get; set; }= default!;
    
        /// <summary>Contains the description of the error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ErrorMessage { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>Indicates if error is considered to be a critical error or not. For Critical Error, the batch control application will not be able to be invoked until this error has been resolved. For a Non Critical Error, the batch control application may be invoked even when this error is unresolved, by overriding it.  Allowed values: - YES: Critical Error - NO: Non Critical Error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isFixRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? IsFixRequired { get; set; }= default!;
    
        /// <summary>Contains the date on which error has been resolved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateResolved")]
        public System.DateTimeOffset? DateResolved { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        [System.Text.Json.Serialization.JsonPropertyName("placeholder")]
        public string? Placeholder { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FatalError 
    {
        /// <summary>Contains the time and date on which the fatal error occurred in Close of Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("timeDate")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? TimeDate { get; set; }= default!;
    
        /// <summary>Contains the date on which error has been resolved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateResolved")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DateResolved { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FatalError2 
    {
        /// <summary>Contains the date and time</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DateTime { get; set; }= default!;
    
        /// <summary>Contains the date on which error has been resolved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateResolved")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DateResolved { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ServerDetails 
    {
        /// <summary>Contains the name of the Server on which the service will run.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serverName")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ServerName { get; set; }= default!;
    
        /// <summary>Status of Server  POSSIBLE VALUES: ACTIVE: To set the server as active INACTIVE: To set the server as inactive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serverStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? ServerStatus { get; set; }= default!;
    
        /// <summary>Contains the reference to the record in service workload profiles for services.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workProfileId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WorkProfileId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Jobs 
    {
        /// <summary>Contains the job identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobId")]
        public string? JobId { get; set; }= default!;
    
        /// <summary>Contains the current status of the job. POSSIBLE VALUES: 0: Ready 1: Running 2: Completed successfully 3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? JobStatus { get; set; }= default!;
    
        /// <summary>Contains the verification job identifier.Typically used to control whether a job is completed before the current jobId is executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("verificationJobId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? VerificationJobId { get; set; }= default!;
    
        /// <summary>Contains the frequency on which the job is next processed. POSSIBLE VALUES:- D: Every working day. Dnn: Every nn'th working day. W: Weekly every Friday. - M: Last working day of every month. - Mnn: nn represents the offset added to the first day of every month to arrive at Next Run date. When the resultant date is a holiday, previous Working day is considered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jobFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? JobFrequency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Group 
    {
        /// <summary>Contains the service control list of values to process</summary>
        [System.Text.Json.Serialization.JsonPropertyName("controlList")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ControlList { get; set; }= default!;
    
        /// <summary>Contains the total number of records/contracts that were processed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processedJob")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ProcessedJob { get; set; }= default!;
    
        /// <summary>Contains the number of contracts completed processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? Completed { get; set; }= default!;
    
        /// <summary>Unique reference to be used in service execution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? CorrelationId { get; set; }= default!;
    
        /// <summary>Co-ordinated Universal Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utcDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UtcDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Group2 
    {
        /// <summary>Contains the business closure time and date on which the error occurred.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("businessClosureDate")]
        public System.DateTimeOffset? BusinessClosureDate { get; set; }= default!;
    
        /// <summary>Contains the session number in which the agent is running</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sessionNo")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 3D)]
        public double? SessionNo { get; set; }= default!;
    
        /// <summary>Contains the time job was started</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public System.DateTimeOffset? StartTime { get; set; }= default!;
    
        /// <summary>Contains the time the job  ended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public System.DateTimeOffset? EndTime { get; set; }= default!;
    
        /// <summary>Contains the elapsed time of the report in seconds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("elapsedTime")]
        public System.DateTimeOffset? ElapsedTime { get; set; }= default!;
    
        /// <summary>Unique reference to be used in service execution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? CorrelationId { get; set; }= default!;
    
        /// <summary>Co-ordinated Universal Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utcDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UtcDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Group3 
    {
        /// <summary>Contains the number of agents required</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentsRequired")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 2D)]
        public double? AgentsRequired { get; set; }= default!;
    
        /// <summary>Contains the time a multithreaded process takes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workProfileTime")]
        public System.DateTimeOffset? WorkProfileTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016