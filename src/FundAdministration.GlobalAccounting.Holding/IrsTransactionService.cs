//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.FundAdministrations.GlobalAccounting.Holding.IrsTransactions
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IIrsTransactionService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates and manages Swap transactions</summary>
        /// <param name="payload">irsTransactions Payload</param>
        /// <param name="referenceId">uniqueId for security purpose</param>
        /// <param name="token">unique token</param>
        /// <param name="username">username</param>
        /// <param name="company">company name</param>
        /// <param name="command">API operations like INVOKE, VALIDATE, PROCESS can be set or by default PROCESS is set</param>
        /// <returns>irsTransactions Success Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IrsTransactionsSuccessResponse> IrsTransactionsAsync(_0BULKPayload payload, string? referenceId = null, string? token = null, string? username = null, string? company = null, string? command = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class _0BULKPayload 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaginationSchema 
    {
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Page { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Size { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Count { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Total { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AuditSchema 
    {
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartTime { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndTime { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("processTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProcessTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SuccessHeaderstatusSchema 
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Result { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("HTTP_MESSAGE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("HTTP_CODE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HTTP_CODE { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RequestId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("responseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResponseId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ETag { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModified { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsSuccessheaderResponse 
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuditSchema? Audit { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SuccessHeaderstatusSchema? Status { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Company { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Token { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Details>? Details { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsrecordsSchema : System.Collections.ObjectModel.Collection<_0>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsSuccessbodyResponse 
    {
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrsTransactionsrecordsSchema? Records { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsSuccessResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrsTransactionsSuccessheaderResponse? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrsTransactionsSuccessbodyResponse? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorHeaderstatusSchema 
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Result { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("HTTP_MESSAGE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("HTTP_CODE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HTTP_CODE { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RequestId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("responseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResponseId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("eTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ETag { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModified { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Details2>? Details { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsErrorheaderResponse 
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuditSchema? Audit { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeaderstatusSchema? Status { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceId { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Token { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsErrorbodyResponse 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items>? Items { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IrsTransactionsErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrsTransactionsErrorheaderResponse? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class _0 
    {
        /// <summary>Multifonds Transaction type code</summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Database Link</summary>
        [Newtonsoft.Json.JsonProperty("tradeRetrievalFromExternalDatabase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TradeRetrievalFromExternalDatabase { get; set; }= default!;
    
        /// <summary>Corresponds to default parameters to be used for calculation of specific hedged yield report.</summary>
        [Newtonsoft.Json.JsonProperty("usanceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UsanceCode { get; set; }= default!;
    
        /// <summary>Denotes the currency like EUR,USD etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Nominal currency code for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("grossAmountCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GrossAmountCurrency { get; set; }= default!;
    
        /// <summary>Input Trade date or Value date or accounting date. Depends on the feature that is used</summary>
        [Newtonsoft.Json.JsonProperty("accountingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountingDate { get; set; }= default!;
    
        /// <summary>Maturity date</summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Trade date of the trnsaction</summary>
        [Newtonsoft.Json.JsonProperty("tradeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Settlement date of transaction</summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Exchange rate applied. (if Null : calculated by MF)</summary>
        [Newtonsoft.Json.JsonProperty("exchangeRateCorrespondent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRateCorrespondent { get; set; }= default!;
    
        /// <summary>Charges</summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fees { get; set; }= default!;
    
        /// <summary>Upfront Amount in case of GERMAN IRS</summary>
        [Newtonsoft.Json.JsonProperty("grossAmountPerShare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossAmountPerShare { get; set; }= default!;
    
        /// <summary>Nominal Amount for Fund</summary>
        [Newtonsoft.Json.JsonProperty("fundAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FundAmount { get; set; }= default!;
    
        /// <summary>Nominal Amount for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("counterpartAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CounterpartAmount { get; set; }= default!;
    
        /// <summary>Amount of fees in deal currency.</summary>
        [Newtonsoft.Json.JsonProperty("commissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Counterparts correspondent number</summary>
        [Newtonsoft.Json.JsonProperty("counterpartsCorrespondentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CounterpartsCorrespondentNumber { get; set; }= default!;
    
        /// <summary>Account manager number (fund)</summary>
        [Newtonsoft.Json.JsonProperty("accountManagerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountManagerNumber { get; set; }= default!;
    
        /// <summary>Tax lot number to identify tax lots based on acquisition date</summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ContractNumber { get; set; }= default!;
    
        /// <summary>Correspondent bank where the cash proceeds from the transaction would be settled</summary>
        [Newtonsoft.Json.JsonProperty("correspondentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CorrespondentNumber { get; set; }= default!;
    
        /// <summary>Custodian where the units of the transaction would be lodged</summary>
        [Newtonsoft.Json.JsonProperty("depositaryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositaryNumber { get; set; }= default!;
    
        /// <summary>Existing system entry number</summary>
        [Newtonsoft.Json.JsonProperty("externalReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalReferenceNumber { get; set; }= default!;
    
        /// <summary>Existing system fund number</summary>
        [Newtonsoft.Json.JsonProperty("existingSystemFundNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExistingSystemFundNumber { get; set; }= default!;
    
        /// <summary>Description of transaction.</summary>
        [Newtonsoft.Json.JsonProperty("operationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OperationDescription { get; set; }= default!;
    
        /// <summary>Floor for Fund</summary>
        [Newtonsoft.Json.JsonProperty("fundFloor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FundFloor { get; set; }= default!;
    
        /// <summary>Floor for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("correspondentFloor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CorrespondentFloor { get; set; }= default!;
    
        /// <summary>Flag to denote if accrued interest on a lent/borrowed security needs to be included in engagement amount</summary>
        [Newtonsoft.Json.JsonProperty("accruedInterestCalculationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccruedInterestCalculationFlag { get; set; }= default!;
    
        /// <summary>Flag to determine if the provision on a security lending transaction should be accrued in the NAV</summary>
        [Newtonsoft.Json.JsonProperty("mortgageManualSettlementFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MortgageManualSettlementFlag { get; set; }= default!;
    
        /// <summary>Logic to decide if payment date falls on a non working day should it process paymet on same date or prior/next working day.</summary>
        [Newtonsoft.Json.JsonProperty("calculationPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CalculationPaymentDate { get; set; }= default!;
    
        /// <summary>Valuation method for specific security types such as zero bonds, polish T-bills, Mortgaged Backed Securities.</summary>
        [Newtonsoft.Json.JsonProperty("evaluationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EvaluationType { get; set; }= default!;
    
        /// <summary>Usance code (calculation base of the interest)</summary>
        [Newtonsoft.Json.JsonProperty("interestBaseCorrespondant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestBaseCorrespondant { get; set; }= default!;
    
        /// <summary>Spread on interest rate for Fund</summary>
        [Newtonsoft.Json.JsonProperty("spread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Spread { get; set; }= default!;
    
        /// <summary>Spread on interest rate for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("coefficientCorporateActionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoefficientCorporateActionPercentage { get; set; }= default!;
    
        /// <summary>Cap for Fund</summary>
        [Newtonsoft.Json.JsonProperty("coefficientGuaranteePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoefficientGuaranteePercentage { get; set; }= default!;
    
        /// <summary>Cap for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("upfrontAmountCounterpartySide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UpfrontAmountCounterpartySide { get; set; }= default!;
    
        /// <summary>Type of interest rate (libor, pibor,...) for fund</summary>
        [Newtonsoft.Json.JsonProperty("interestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestRateType { get; set; }= default!;
    
        /// <summary>Interest rate type for Correspondent Cmess table is TYP_TAUX</summary>
        [Newtonsoft.Json.JsonProperty("correspondentInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CorrespondentInterestRateType { get; set; }= default!;
    
        /// <summary>Maturity for Fund Cmess table is TXECH</summary>
        [Newtonsoft.Json.JsonProperty("mbsSoldTransactionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MbsSoldTransactionNumber { get; set; }= default!;
    
        /// <summary>Maturity for Correspondent Cmess table is TXECH</summary>
        [Newtonsoft.Json.JsonProperty("capitalisationDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CapitalisationDay { get; set; }= default!;
    
        /// <summary>Fixed rate for Fund</summary>
        [Newtonsoft.Json.JsonProperty("fundFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FundFixedRate { get; set; }= default!;
    
        /// <summary>Fixed rate for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("correspondentsFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CorrespondentsFixedRate { get; set; }= default!;
    
        /// <summary>Frequency for Fund Cmess table is FREQUENCE</summary>
        [Newtonsoft.Json.JsonProperty("fundFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FundFrequency { get; set; }= default!;
    
        /// <summary>Frequency for Correspondent Cmess table is FREQUENCE</summary>
        [Newtonsoft.Json.JsonProperty("correspondentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CorrespondentFrequency { get; set; }= default!;
    
        /// <summary>Payment day for Fund</summary>
        [Newtonsoft.Json.JsonProperty("paymentDayForFund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentDayForFund { get; set; }= default!;
    
        /// <summary>Payment day for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("paymentDayForCorrespondent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentDayForCorrespondent { get; set; }= default!;
    
        /// <summary>Starting Irregular dates for Fund</summary>
        [Newtonsoft.Json.JsonProperty("irregularPeriodStartFundLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IrregularPeriodStartFundLeg { get; set; }= default!;
    
        /// <summary>Starting irregular dates for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("irregularPeriodStartCounterpartyLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IrregularPeriodStartCounterpartyLeg { get; set; }= default!;
    
        /// <summary>End irregular dates for Correspondent</summary>
        [Newtonsoft.Json.JsonProperty("irregularPeriodEndCounterpartyLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IrregularPeriodEndCounterpartyLeg { get; set; }= default!;
    
        /// <summary>Entry number of original transaction for triggering repayment</summary>
        [Newtonsoft.Json.JsonProperty("repaymentEntryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RepaymentEntryNumber { get; set; }= default!;
    
        /// <summary>Interest Period Begin Date</summary>
        [Newtonsoft.Json.JsonProperty("interestPeriodBeginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestPeriodBeginDate { get; set; }= default!;
    
        /// <summary>Interest Period End Date</summary>
        [Newtonsoft.Json.JsonProperty("interestPeriodEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestPeriodEndDate { get; set; }= default!;
    
        /// <summary>Income type whether from settlement date or settlement date+1 for security lending/borrowing comm accrual</summary>
        [Newtonsoft.Json.JsonProperty("incomeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IncomeType { get; set; }= default!;
    
        /// <summary>Upfront amount for fund</summary>
        [Newtonsoft.Json.JsonProperty("switchPurchasedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SwitchPurchasedAmount { get; set; }= default!;
    
        /// <summary>The "TBA" flag must be checked, whether the transaction is manually accounted in Multifonds or interfaced, to indicate that it is a TBA trade</summary>
        [Newtonsoft.Json.JsonProperty("engagementAdjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EngagementAdjustment { get; set; }= default!;
    
        /// <summary>Currency of the upfront for fund</summary>
        [Newtonsoft.Json.JsonProperty("netAmountCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NetAmountCurrency { get; set; }= default!;
    
        /// <summary>Recoverable tax amount on Income , type 2</summary>
        [Newtonsoft.Json.JsonProperty("amountOfRecoverableTaxes2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountOfRecoverableTaxes2 { get; set; }= default!;
    
        /// <summary>Usance code for security lending commission calculation</summary>
        [Newtonsoft.Json.JsonProperty("lendingUsanceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LendingUsanceCode { get; set; }= default!;
    
        /// <summary>Currency in which the settlement would be processed.</summary>
        [Newtonsoft.Json.JsonProperty("correspondentTransactionCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CorrespondentTransactionCurrency { get; set; }= default!;
    
        /// <summary>Security identifier used in the transaction</summary>
        [Newtonsoft.Json.JsonProperty("shareSecurityNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShareSecurityNumber { get; set; }= default!;
    
        /// <summary>Flag to automatically block the security lent position in the portfolio</summary>
        [Newtonsoft.Json.JsonProperty("coverSecurityFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CoverSecurityFlag { get; set; }= default!;
    
        /// <summary>Commission type for lending/borrowing transactions</summary>
        [Newtonsoft.Json.JsonProperty("commissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommissionType { get; set; }= default!;
    
        /// <summary>The transaction will not be settled unless the TBA flag is unchecked. Therefore, If the actual security information is not received enable the flag so that the transaction will remain unsettled.</summary>
        [Newtonsoft.Json.JsonProperty("tbaFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TbaFlag { get; set; }= default!;
    
        /// <summary>Fees code for booking transaction fees</summary>
        [Newtonsoft.Json.JsonProperty("feesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeesCode { get; set; }= default!;
    
        /// <summary>Number of days of purchase/sale interest in a transaction done on an interest bearing instrument</summary>
        [Newtonsoft.Json.JsonProperty("numberOfInterestDaysAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumberOfInterestDaysAccrued { get; set; }= default!;
    
        /// <summary>Future margin account number</summary>
        [Newtonsoft.Json.JsonProperty("marginAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MarginAccount { get; set; }= default!;
    
        /// <summary>Deposit Bank Code</summary>
        [Newtonsoft.Json.JsonProperty("depositaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositaryCode { get; set; }= default!;
    
        /// <summary>Capitalisation method for sec lending /borrowing commission calculation</summary>
        [Newtonsoft.Json.JsonProperty("capitalisationRateCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CapitalisationRateCalculationMethod { get; set; }= default!;
    
        /// <summary>This field denotes the status of the trade. Confirmed or Not Confirmed</summary>
        [Newtonsoft.Json.JsonProperty("confirmationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConfirmationFlag { get; set; }= default!;
    
        /// <summary>Relates to Identifier codes of security,Provider,Thirdparty and industry etc</summary>
        [Newtonsoft.Json.JsonProperty("securitySourceIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecuritySourceIdentification { get; set; }= default!;
    
        /// <summary>The External identification code for Security like 01 for Telekurs, 03 for Sedol. Also used for other provider identifiers</summary>
        [Newtonsoft.Json.JsonProperty("externalSecurityIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalSecurityIdentification { get; set; }= default!;
    
        /// <summary>Time stamp of the trade execution in the market.</summary>
        [Newtonsoft.Json.JsonProperty("execTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExecTimestamp { get; set; }= default!;
    
        /// <summary>Income Type of counter party leg</summary>
        [Newtonsoft.Json.JsonProperty("incomeTypeOfCounterpartyLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IncomeTypeOfCounterpartyLeg { get; set; }= default!;
    
        /// <summary>Delay days to be applied on coupon/ paydown transactions to trigger payment</summary>
        [Newtonsoft.Json.JsonProperty("daysToAddToCounterPartyLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysToAddToCounterPartyLeg { get; set; }= default!;
    
        /// <summary>Flag to denote of a security lending booked in pool needs to be allocated to all sub funds or only impact a single sub fund</summary>
        [Newtonsoft.Json.JsonProperty("keepOriginalPositionFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? KeepOriginalPositionFlag { get; set; }= default!;
    
        /// <summary>Contract no of lent contract</summary>
        [Newtonsoft.Json.JsonProperty("lendingContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LendingContractNumber { get; set; }= default!;
    
        /// <summary>Deal Type</summary>
        [Newtonsoft.Json.JsonProperty("purchasedCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PurchasedCurrencyCode { get; set; }= default!;
    
        /// <summary>Flag Y/N for the interest booking or not</summary>
        [Newtonsoft.Json.JsonProperty("interestBookingFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestBookingFlag { get; set; }= default!;
    
        /// <summary>Fund Strategy for Hedge Fund</summary>
        [Newtonsoft.Json.JsonProperty("hedgeFundStrategy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HedgeFundStrategy { get; set; }= default!;
    
        /// <summary>Fund Link Id for Hedge Fund</summary>
        [Newtonsoft.Json.JsonProperty("hedgeFundLinkId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HedgeFundLinkId { get; set; }= default!;
    
        /// <summary>This is to trigger the accounting of the capital transaction. If unchecked only the units are considered but there is no impact on capital and cash ( in case of migration)</summary>
        [Newtonsoft.Json.JsonProperty("capitalisationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CapitalisationFlag { get; set; }= default!;
    
        /// <summary>The currency in which the fees are denoted in a transaction.</summary>
        [Newtonsoft.Json.JsonProperty("upfrontSettlementCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UpfrontSettlementCurrencyCode { get; set; }= default!;
    
        /// <summary>Trade Date in case of income transaction like coupon or dividend, Execution date for Dividend announcement and Corporate Action</summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentDate { get; set; }= default!;
    
        /// <summary>Share Class for advanced hedging on derivatives</summary>
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShareType { get; set; }= default!;
    
        /// <summary>MF Security Id for CFD</summary>
        [Newtonsoft.Json.JsonProperty("underlyingSecurityInternalMfIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnderlyingSecurityInternalMfIdentification { get; set; }= default!;
    
        /// <summary>External identification code</summary>
        [Newtonsoft.Json.JsonProperty("cfdIdCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CfdIdCode { get; set; }= default!;
    
        /// <summary>External security number</summary>
        [Newtonsoft.Json.JsonProperty("cfdExternalReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CfdExternalReferenceNumber { get; set; }= default!;
    
        /// <summary>"CDS index" flag: if Y then will be ticked.</summary>
        [Newtonsoft.Json.JsonProperty("dealType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Select the appropriate code to be used in the French annual reporting.</summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; }= default!;
    
        /// <summary>IFRS classification</summary>
        [Newtonsoft.Json.JsonProperty("ifrsClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IfrsClassification { get; set; }= default!;
    
        /// <summary>Indication for full/partial settlement</summary>
        [Newtonsoft.Json.JsonProperty("fullPartialSettlementFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullPartialSettlementFlag { get; set; }= default!;
    
        /// <summary>Cash Settlement Flag</summary>
        [Newtonsoft.Json.JsonProperty("cashSettlementFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CashSettlementFlag { get; set; }= default!;
    
        /// <summary>Quotation place</summary>
        [Newtonsoft.Json.JsonProperty("securityQuotationPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecurityQuotationPlace { get; set; }= default!;
    
        /// <summary>Domicile of correspondent</summary>
        [Newtonsoft.Json.JsonProperty("securityIssuedCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecurityIssuedCountryCode { get; set; }= default!;
    
        /// <summary>OTC clearing information</summary>
        [Newtonsoft.Json.JsonProperty("utiDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UtiDescription { get; set; }= default!;
    
        /// <summary>OTC clearing information</summary>
        [Newtonsoft.Json.JsonProperty("usiDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UsiDescription { get; set; }= default!;
    
        /// <summary>Rate of FATCA Tax payable on the income. FATCA is taxation based on US residence</summary>
        [Newtonsoft.Json.JsonProperty("percentOfFatcaTaxes1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentOfFatcaTaxes1 { get; set; }= default!;
    
        /// <summary>Interest amount Int</summary>
        [Newtonsoft.Json.JsonProperty("interestAmountInt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InterestAmountInt { get; set; }= default!;
    
        /// <summary>Interest amount Cor</summary>
        [Newtonsoft.Json.JsonProperty("interestAmountCor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InterestAmountCor { get; set; }= default!;
    
        /// <summary>Underlying Account Manager Id</summary>
        [Newtonsoft.Json.JsonProperty("underlyingAccountManagerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UnderlyingAccountManagerNumber { get; set; }= default!;
    
        /// <summary>Flag Uncnf</summary>
        [Newtonsoft.Json.JsonProperty("flgUncnf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FlgUncnf { get; set; }= default!;
    
        /// <summary>Transaction Quantity</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The unit price of an instrument which is being transacted.</summary>
        [Newtonsoft.Json.JsonProperty("securityPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SecurityPrice { get; set; }= default!;
    
        /// <summary>Market value of the security</summary>
        [Newtonsoft.Json.JsonProperty("correspondentLoanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CorrespondentLoanAmount { get; set; }= default!;
    
        /// <summary>Purchase/sale interest on a interest bearing instrument</summary>
        [Newtonsoft.Json.JsonProperty("interestAmountAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InterestAmountAccrued { get; set; }= default!;
    
        /// <summary>Interest Rate</summary>
        [Newtonsoft.Json.JsonProperty("depositInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DepositInterestRate { get; set; }= default!;
    
        /// <summary>External code for Security</summary>
        [Newtonsoft.Json.JsonProperty("basketReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BasketReferenceNumber { get; set; }= default!;
    
        /// <summary>Debit credit indicator tagged to an account number</summary>
        [Newtonsoft.Json.JsonProperty("bookingDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BookingDirection { get; set; }= default!;
    
        /// <summary>Percentage of transaction fees</summary>
        [Newtonsoft.Json.JsonProperty("taxCom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxCom { get; set; }= default!;
    
        /// <summary>Fees amount in settlement currency</summary>
        [Newtonsoft.Json.JsonProperty("rebookingFeesAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RebookingFeesAmount { get; set; }= default!;
    
        /// <summary>This field denotes the fee amount of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("transactionFeesAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransactionFeesAmount { get; set; }= default!;
    
        /// <summary>End irregular dates for Fund</summary>
        [Newtonsoft.Json.JsonProperty("irregularPeriodEndFundLeg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IrregularPeriodEndFundLeg { get; set; }= default!;
    
        /// <summary>Udf Code</summary>
        [Newtonsoft.Json.JsonProperty("udfCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UdfCode { get; set; }= default!;
    
        /// <summary>Chk Data</summary>
        [Newtonsoft.Json.JsonProperty("chkData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChkData { get; set; }= default!;
    
        /// <summary>Flag to denote whether the security is in a defaulted status</summary>
        [Newtonsoft.Json.JsonProperty("flgNonAccStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FlgNonAccStatus { get; set; }= default!;
    
        /// <summary>Amount in fund currency</summary>
        [Newtonsoft.Json.JsonProperty("amountInFundCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountInFundCurrency { get; set; }= default!;
    
        /// <summary>Short Code</summary>
        [Newtonsoft.Json.JsonProperty("shortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortCode { get; set; }= default!;
    
        /// <summary>Long Desc</summary>
        [Newtonsoft.Json.JsonProperty("longDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LongDesc { get; set; }= default!;
    
        /// <summary>Message ID</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MsgId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Body 
    {
        [Newtonsoft.Json.JsonProperty("irsTransactionses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<_0>? IrsTransactionses { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Details 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Details2 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016