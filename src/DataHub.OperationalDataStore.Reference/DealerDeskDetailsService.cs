//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace DataHub.OperationalDataStore.Reference.DealerDeskDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDealerDeskDetailsService
    {
        /// <summary>Retrieves description of the given forex agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getForexAgreementTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexAgreementTypeResponse> GetForexAgreementTypeAsync(string recordId, string? displayName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves description of the given forex agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getForexAgreementTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexAgreementTypeResponse> GetForexAgreementTypeAsync(string recordId, string? displayName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves description of forex deal method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getForexDealMethodResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexDealMethodResponse> GetForexDealMethodAsync(string recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves description of forex deal method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getForexDealMethodResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexDealMethodResponse> GetForexDealMethodAsync(string recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves information of a given revaluation method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="swapForwardposition">Indicates the profit or loss position through positive and negative signs respectively</param>
        /// <returns>getForexRevaluationTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexRevaluationTypeResponse> GetForexRevaluationTypeAsync(string recordId, string? displayName, string? swapForwardposition);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves information of a given revaluation method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="swapForwardposition">Indicates the profit or loss position through positive and negative signs respectively</param>
        /// <returns>getForexRevaluationTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexRevaluationTypeResponse> GetForexRevaluationTypeAsync(string recordId, string? displayName, string? swapForwardposition, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves description of the given agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="defaultAgreement">The master agreement type to be to be defaulted  on the contract.</param>
        /// <param name="defaultDate">The date to indicate the year of the version of the ISDA agreement.</param>
        /// <returns>getAgreementTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAgreementTypeResponse> GetAgreementTypeAsync(string recordId, string? displayName, string? defaultAgreement, System.DateTimeOffset? defaultDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves description of the given agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="defaultAgreement">The master agreement type to be to be defaulted  on the contract.</param>
        /// <param name="defaultDate">The date to indicate the year of the version of the ISDA agreement.</param>
        /// <returns>getAgreementTypeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAgreementTypeResponse> GetAgreementTypeAsync(string recordId, string? displayName, string? defaultAgreement, System.DateTimeOffset? defaultDate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the dealer details such as dealer id, description</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getDealersListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDealersListResponse> GetDealersListAsync(string? recordId, string? displayName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the dealer details such as dealer id, description</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getDealersListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDealersListResponse> GetDealersListAsync(string? recordId, string? displayName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves description of the given forex agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getForexAgreementTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexAgreementTypesResponse> GetForexAgreementTypesAsync(string? recordId, string? displayName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves description of the given forex agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <returns>getForexAgreementTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexAgreementTypesResponse> GetForexAgreementTypesAsync(string? recordId, string? displayName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve description of the forex deal method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getForexDealMethodsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexDealMethodsResponse> GetForexDealMethodsAsync(string? recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve description of the forex deal method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getForexDealMethodsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexDealMethodsResponse> GetForexDealMethodsAsync(string? recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves information of a given revaluation method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="swapForwardposition">Indicates the profit or loss position through positive and negative signs respectively</param>
        /// <returns>getForexRevaluationTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexRevaluationTypesResponse> GetForexRevaluationTypesAsync(string? recordId, string? displayName, string? swapForwardposition);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves information of a given revaluation method</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="swapForwardposition">Indicates the profit or loss position through positive and negative signs respectively</param>
        /// <returns>getForexRevaluationTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetForexRevaluationTypesResponse> GetForexRevaluationTypesAsync(string? recordId, string? displayName, string? swapForwardposition, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves description of the given agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="defaultAgreement">The master agreement type to be to be defaulted  on the contract.</param>
        /// <param name="defaultDate">The date to indicate the year of the version of the ISDA agreement.</param>
        /// <returns>getAgreementTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAgreementTypesResponse> GetAgreementTypesAsync(string? recordId, string? displayName, string? defaultAgreement, System.DateTimeOffset? defaultDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves description of the given agreement type</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="defaultAgreement">The master agreement type to be to be defaulted  on the contract.</param>
        /// <param name="defaultDate">The date to indicate the year of the version of the ISDA agreement.</param>
        /// <returns>getAgreementTypesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAgreementTypesResponse> GetAgreementTypesAsync(string? recordId, string? displayName, string? defaultAgreement, System.DateTimeOffset? defaultDate, System.Threading.CancellationToken cancellationToken);
    
    }

    /// <summary>getForexAgreementTypeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexAgreementTypeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexAgreementTypeResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexAgreementTypeResponseBody 
    {
        /// <summary>Identifier of the agreement type, e.g. ISDA.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agreementTypeId")]
        public System.Collections.Generic.ICollection<AgreementTypeId>? AgreementTypeId { get; set; }= default!;
    
    
    }
    
    /// <summary>getForexDealMethodResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealMethodResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexDealMethodResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealMethodResponseBody 
    {
        /// <summary>Allows the user to define which are the accepted deal methods within his environment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fxDealMethod")]
        public System.Collections.Generic.ICollection<FxDealMethod>? FxDealMethod { get; set; }= default!;
    
    
    }
    
    /// <summary>getForexRevaluationTypeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexRevaluationTypeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexRevaluationTypeResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexRevaluationTypeResponseBody 
    {
        /// <summary>Holds the revaluation types available in the Foreign Exchange Application</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fxRevalType")]
        public System.Collections.Generic.ICollection<FxRevalType>? FxRevalType { get; set; }= default!;
    
    
    }
    
    /// <summary>getAgreementTypeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAgreementTypeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetAgreementTypeResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAgreementTypeResponseBody 
    {
        /// <summary>Holds the types of agreements used in contracts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agreementType")]
        public System.Collections.Generic.ICollection<AgreementType>? AgreementType { get; set; }= default!;
    
    
    }
    
    /// <summary>getDealersListResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetDealersListResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetDealersListResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetDealersListResponseBody 
    {
        /// <summary>Specify to the system how its dealing room activity is organised</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        public System.Collections.Generic.ICollection<DealerDesk>? DealerDesk { get; set; }= default!;
    
    
    }
    
    /// <summary>getForexAgreementTypesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexAgreementTypesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexAgreementTypesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexAgreementTypesResponseBody 
    {
        /// <summary>Identifier of the agreement type, e.g. ISDA.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agreementTypeId")]
        public System.Collections.Generic.ICollection<AgreementTypeId2>? AgreementTypeId { get; set; }= default!;
    
    
    }
    
    /// <summary>getForexDealMethodsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealMethodsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexDealMethodsResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexDealMethodsResponseBody 
    {
        /// <summary>Allows the user to define which are the accepted deal methods within his environment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fxDealMethod")]
        public System.Collections.Generic.ICollection<FxDealMethod2>? FxDealMethod { get; set; }= default!;
    
    
    }
    
    /// <summary>getForexRevaluationTypesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexRevaluationTypesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetForexRevaluationTypesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetForexRevaluationTypesResponseBody 
    {
        /// <summary>Holds the revaluation types available in the Foreign Exchange Application</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fxRevalType")]
        public System.Collections.Generic.ICollection<FxRevalType2>? FxRevalType { get; set; }= default!;
    
    
    }
    
    /// <summary>getAgreementTypesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAgreementTypesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetAgreementTypesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetAgreementTypesResponseBody 
    {
        /// <summary>Holds the types of agreements used in contracts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agreementType")]
        public System.Collections.Generic.ICollection<AgreementType2>? AgreementType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AgreementTypeId 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language? Language { get; set; }= default!;
    
        /// <summary>Department identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("departmentId")]
        public string? DepartmentId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxDealMethod 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language2? Language { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxRevalType 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language3? Language { get; set; }= default!;
    
        /// <summary>Indicates the profit or loss position through positive and negative signs respectively</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swapForwardposition")]
        public string? SwapForwardposition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AgreementType 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language4? Language { get; set; }= default!;
    
        /// <summary>The master agreement type to be to be defaulted  on the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultAgreement")]
        public string? DefaultAgreement { get; set; }= default!;
    
        /// <summary>The date to indicate the year of the version of the ISDA agreement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultDate")]
        public string? DefaultDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DealerDesk 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language5? Language { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AgreementTypeId2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language6? Language { get; set; }= default!;
    
        /// <summary>Department identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("departmentId")]
        public string? DepartmentId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxDealMethod2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language7? Language { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxRevalType2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language8? Language { get; set; }= default!;
    
        /// <summary>Indicates the profit or loss position through positive and negative signs respectively</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swapForwardposition")]
        public string? SwapForwardposition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AgreementType2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language9? Language { get; set; }= default!;
    
        /// <summary>The master agreement type to be to be defaulted  on the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultAgreement")]
        public string? DefaultAgreement { get; set; }= default!;
    
        /// <summary>The date to indicate the year of the version of the ISDA agreement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultDate")]
        public string? DefaultDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language2 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language3 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language4 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language5 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language6 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language7 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language8 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language9 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016