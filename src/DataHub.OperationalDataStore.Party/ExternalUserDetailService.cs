//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.DataHubs.OperationalDataStore.Party.ExternalUserDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IExternalUserDetailService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the external user details</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getExternalUserResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExternalUserResponse> GetExternalUserAsync(string recordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the external user preferences</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getExternalUserPreferencesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetExternalUserPreferencesResponse> GetExternalUserPreferencesAsync(string? recordId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    /// <summary>getExternalUserResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetExternalUserResponse 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetExternalUserResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetExternalUserResponseBody 
    {
        /// <summary>application holding details about users of the system who are not staff of the bank. Examples include Internet banking users.</summary>
        [Newtonsoft.Json.JsonProperty("ebExternalUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EbExternalUser>? EbExternalUser { get; set; }= default!;
    
    
    }
    
    /// <summary>getExternalUserPreferencesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetExternalUserPreferencesResponse 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetExternalUserPreferencesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetExternalUserPreferencesResponseBody 
    {
        /// <summary>Holds the external user's preferences</summary>
        [Newtonsoft.Json.JsonProperty("externalUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalUserPreference>? ExternalUserPreference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EbExternalUser 
    {
        /// <summary>Unique identifier of an entity</summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Name of the Customer or Bank Employee or a Person</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The identifier of the underlying Entity/Company/Branch.</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Id of the (digital) channel</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelId? ChannelId { get; set; }= default!;
    
        /// <summary>Authenticate on customer login update</summary>
        [Newtonsoft.Json.JsonProperty("authenticationServerUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuthenticationServerUpdate { get; set; }= default!;
    
        /// <summary>Determines the transaction signing method</summary>
        [Newtonsoft.Json.JsonProperty("authorizationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuthorizationType { get; set; }= default!;
    
        /// <summary>Represents the language code of the underlying Entity/Company/Branch.</summary>
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LanguageId { get; set; }= default!;
    
        /// <summary>Used for deciding in which format the dates are to be displayed for a user / for a language</summary>
        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DateFormat { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Override? Override { get; set; }= default!;
    
        /// <summary>Current Number which indicates how many times the record is modified.</summary>
        [Newtonsoft.Json.JsonProperty("currNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrNo { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [Newtonsoft.Json.JsonProperty("recordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>The user identifier who input the transaction</summary>
        [Newtonsoft.Json.JsonProperty("inputter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inputter? Inputter { get; set; }= default!;
    
        /// <summary>Contains the time at which the arrangement was created</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatedAt? CreatedAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalUserPreference 
    {
        /// <summary>Unique identifier of an entity</summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Name of a Customer Relationship Group if applicable to the relationship.</summary>
        [Newtonsoft.Json.JsonProperty("customerRelationGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerRelationGroupName { get; set; }= default!;
    
        /// <summary>Display the details of group name</summary>
        [Newtonsoft.Json.JsonProperty("groupDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GroupDisplayName { get; set; }= default!;
    
        /// <summary>Group position</summary>
        [Newtonsoft.Json.JsonProperty("groupPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GroupPosition { get; set; }= default!;
    
        /// <summary>Favourite group</summary>
        [Newtonsoft.Json.JsonProperty("favouriteGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FavouriteGroup { get; set; }= default!;
    
        /// <summary>View the balance of customer</summary>
        [Newtonsoft.Json.JsonProperty("balanceCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BalanceCustomer? BalanceCustomer { get; set; }= default!;
    
        /// <summary>The service related to an arrangement</summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceName? ServiceName { get; set; }= default!;
    
        /// <summary>Current Number which indicates how many times the record is modified.</summary>
        [Newtonsoft.Json.JsonProperty("currNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrNo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelId 
    {
        /// <summary>Customer status update with respective reasons</summary>
        [Newtonsoft.Json.JsonProperty("statusChangeReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatusChangeReason { get; set; }= default!;
    
        /// <summary>The unique identifier of an arrangement contract.</summary>
        [Newtonsoft.Json.JsonProperty("arrangementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The type of login method e.g. password, PIN, OTP</summary>
        [Newtonsoft.Json.JsonProperty("loginMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LoginMethod { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Defines whether the user has accepted the Terms and Conditions first displayed when the user logs in to the system for the very first time.</summary>
        [Newtonsoft.Json.JsonProperty("termsAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermsAccepted { get; set; }= default!;
    
        /// <summary>The beginning of the time interval in the current Day</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartTime { get; set; }= default!;
    
        /// <summary>The end of the time interval in corresponding Day</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndTime { get; set; }= default!;
    
        /// <summary>The type of the user. Can be CORPORATE, INTERMEDIARY,PERSONAL</summary>
        [Newtonsoft.Json.JsonProperty("userType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserType { get; set; }= default!;
    
        /// <summary>Id of the (digital) channel</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelId1 { get; set; }= default!;
    
        /// <summary>Status update of the claim records</summary>
        [Newtonsoft.Json.JsonProperty("claimStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClaimStatus { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [Newtonsoft.Json.JsonProperty("productLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProductLineId { get; set; }= default!;
    
        /// <summary>The subset of Master arrangement.</summary>
        [Newtonsoft.Json.JsonProperty("subArrangementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubArrangementId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Override 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Override1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Inputter 
    {
        /// <summary>The user identifier who input the transaction</summary>
        [Newtonsoft.Json.JsonProperty("inputter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Inputter1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatedAt 
    {
        /// <summary>Contains the time at which the arrangement was created</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedAt1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BalanceCustomer 
    {
        /// <summary>Id of the product line (e.g. DEPOSITS), which is used in the calculation of the total balance.</summary>
        [Newtonsoft.Json.JsonProperty("balanceProductLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BalanceProductLine? BalanceProductLine { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceName 
    {
        /// <summary>The service related to an arrangement</summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceName1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BalanceProductLine 
    {
        /// <summary>Id of the product line (e.g. DEPOSITS), which is used in the calculation of the total balance.</summary>
        [Newtonsoft.Json.JsonProperty("balanceProductLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceProductLine1 { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016