//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace DataHub.OperationalDataStore.Party.CustomerDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICustomerDetailsService
    {
        /// <summary>Retrieves the KYC details of a Customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerKycDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerKycDetailsResponse> GetCustomerKycDetailsAsync(string recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the KYC details of a Customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerKycDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerKycDetailsResponse> GetCustomerKycDetailsAsync(string recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the list of customers having the Kyc details</summary>
        /// <param name="kycRelationship">Indicates the Customer Relationship details of the customer</param>
        /// <returns>getCustomerKycListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerKycListResponse> GetCustomerKycListAsync(string? kycRelationship);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of customers having the Kyc details</summary>
        /// <param name="kycRelationship">Indicates the Customer Relationship details of the customer</param>
        /// <returns>getCustomerKycListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerKycListResponse> GetCustomerKycListAsync(string? kycRelationship, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the list of customers not having the Kyc details</summary>
        /// <param name="kycRelationship">Indicates the Customer Relationship details of the customer</param>
        /// <returns>getCustomerNoKycListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerNoKycListResponse> GetCustomerNoKycListAsync(string? kycRelationship);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of customers not having the Kyc details</summary>
        /// <param name="kycRelationship">Indicates the Customer Relationship details of the customer</param>
        /// <returns>getCustomerNoKycListResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerNoKycListResponse> GetCustomerNoKycListAsync(string? kycRelationship, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the details of a Customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerForMDALResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerForMDALResponse> GetCustomerForMDALAsync(string recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of a Customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerForMDALResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerForMDALResponse> GetCustomerForMDALAsync(string recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the customer relationship details</summary>
        /// <param name="customerRelationGroupId">Identifies the key to Customer Relationship Group to form a relation</param>
        /// <param name="partyId">Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</param>
        /// <param name="relationPartyId">Related customers or persons/entities that are part of the relationship.</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerRelationshipDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerRelationshipDetailsResponse> GetCustomerRelationshipDetailsAsync(string? customerRelationGroupId, string? partyId, string? relationPartyId, string? recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the customer relationship details</summary>
        /// <param name="customerRelationGroupId">Identifies the key to Customer Relationship Group to form a relation</param>
        /// <param name="partyId">Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</param>
        /// <param name="relationPartyId">Related customers or persons/entities that are part of the relationship.</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerRelationshipDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerRelationshipDetailsResponse> GetCustomerRelationshipDetailsAsync(string? customerRelationGroupId, string? partyId, string? relationPartyId, string? recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the list of messages of a customer from Bank to Customer and from customer to Bank</summary>
        /// <param name="fromCustomerId">The Customer ID from which the message is triggered.</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="parentMessageId">Identifier of the parent message.</param>
        /// <param name="toCustomerId">The unique customer identifier of the Payee, to whom the payment message is to be sent</param>
        /// <param name="messageStatus">Status of the message</param>
        /// <returns>getSecureMessagesForCustomerResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSecureMessagesForCustomerResponse> GetSecureMessagesForCustomerAsync(string fromCustomerId, string? recordId, string? parentMessageId, string? toCustomerId, string? messageStatus);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of messages of a customer from Bank to Customer and from customer to Bank</summary>
        /// <param name="fromCustomerId">The Customer ID from which the message is triggered.</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="parentMessageId">Identifier of the parent message.</param>
        /// <param name="toCustomerId">The unique customer identifier of the Payee, to whom the payment message is to be sent</param>
        /// <param name="messageStatus">Status of the message</param>
        /// <returns>getSecureMessagesForCustomerResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSecureMessagesForCustomerResponse> GetSecureMessagesForCustomerAsync(string fromCustomerId, string? recordId, string? parentMessageId, string? toCustomerId, string? messageStatus, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the list of messages from Bank to Customer and from Customer to Bank</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="parentMessageId">Identifier of the parent message.</param>
        /// <param name="toCustomerId">The unique customer identifier of the Payee, to whom the payment message is to be sent</param>
        /// <param name="fromCustomerId">The Customer ID from which the message is triggered.</param>
        /// <param name="messageStatus">Status of the message</param>
        /// <returns>getSecureMessagesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSecureMessagesResponse> GetSecureMessagesAsync(string? recordId, string? parentMessageId, string? toCustomerId, string? fromCustomerId, string? messageStatus);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of messages from Bank to Customer and from Customer to Bank</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <param name="parentMessageId">Identifier of the parent message.</param>
        /// <param name="toCustomerId">The unique customer identifier of the Payee, to whom the payment message is to be sent</param>
        /// <param name="fromCustomerId">The Customer ID from which the message is triggered.</param>
        /// <param name="messageStatus">Status of the message</param>
        /// <returns>getSecureMessagesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSecureMessagesResponse> GetSecureMessagesAsync(string? recordId, string? parentMessageId, string? toCustomerId, string? fromCustomerId, string? messageStatus, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>API to retrieve the list of travel notification details for specific customer</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="overallStatus">Contains the overall status</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerTravelNotificationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerTravelNotificationsResponse> GetCustomerTravelNotificationsAsync(string customerId, string? overallStatus, string? recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to retrieve the list of travel notification details for specific customer</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="overallStatus">Contains the overall status</param>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerTravelNotificationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerTravelNotificationsResponse> GetCustomerTravelNotificationsAsync(string customerId, string? overallStatus, string? recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the Prospect customer details</summary>
        /// <returns>getProspectCustomersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetProspectCustomersResponse> GetProspectCustomersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Prospect customer details</summary>
        /// <returns>getProspectCustomersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetProspectCustomersResponse> GetProspectCustomersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the list of preferred communication channels for the customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerDeliveryPreferencesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerDeliveryPreferencesResponse> GetCustomerDeliveryPreferencesAsync(object unnamed, string? recordId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of preferred communication channels for the customer</summary>
        /// <param name="recordId">Unique identifier of an entity</param>
        /// <returns>getCustomerDeliveryPreferencesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerDeliveryPreferencesResponse> GetCustomerDeliveryPreferencesAsync(object unnamed, string? recordId, System.Threading.CancellationToken cancellationToken);
    
    }

    /// <summary>getCustomerKycDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerKycDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerKycDetailsResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerKycDetailsResponseBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public System.Collections.Generic.ICollection<CustomerId>? CustomerId { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerKycListResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerKycListResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerKycListResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerKycListResponseBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public System.Collections.Generic.ICollection<CustomerId2>? CustomerId { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerNoKycListResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerNoKycListResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerNoKycListResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerNoKycListResponseBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public System.Collections.Generic.ICollection<CustomerId3>? CustomerId { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerForMDALResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerForMDALResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerForMDALResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerForMDALResponseBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public System.Collections.Generic.ICollection<CustomerId4>? CustomerId { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerRelationshipDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerRelationshipDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerRelationshipDetailsResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerRelationshipDetailsResponseBody 
    {
        /// <summary>Create relationships between records held on the Customer application or the PERSON.ENTITY application</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRelationship")]
        public System.Collections.Generic.ICollection<CustomerRelationship>? CustomerRelationship { get; set; }= default!;
    
    
    }
    
    /// <summary>getSecureMessagesForCustomerResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSecureMessagesForCustomerResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetSecureMessagesForCustomerResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSecureMessagesForCustomerResponseBody 
    {
        /// <summary>To establish a secure messaging system in a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ebSecureMessage")]
        public System.Collections.Generic.ICollection<EbSecureMessage>? EbSecureMessage { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountOfficer")]
        public System.Collections.Generic.ICollection<AccountOfficer>? AccountOfficer { get; set; }= default!;
    
    
    }
    
    /// <summary>getSecureMessagesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSecureMessagesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetSecureMessagesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSecureMessagesResponseBody 
    {
        /// <summary>To establish a secure messaging system in a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ebSecureMessage")]
        public System.Collections.Generic.ICollection<EbSecureMessage2>? EbSecureMessage { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountOfficer")]
        public System.Collections.Generic.ICollection<AccountOfficer2>? AccountOfficer { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerTravelNotificationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerTravelNotificationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerTravelNotificationsResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerTravelNotificationsResponseBody 
    {
        /// <summary>Holds the travel details of the CUSTOMER</summary>
        [System.Text.Json.Serialization.JsonPropertyName("travelNotification")]
        public System.Collections.Generic.ICollection<TravelNotification>? TravelNotification { get; set; }= default!;
    
    
    }
    
    /// <summary>getProspectCustomersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetProspectCustomersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetProspectCustomersResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetProspectCustomersResponseBody 
    {
        /// <summary>Identifies if the record is for a real person or a legal entity. Allowed Options: Person or Entity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("personEntity")]
        public System.Collections.Generic.ICollection<PersonEntity>? PersonEntity { get; set; }= default!;
    
    
    }
    
    /// <summary>getCustomerDeliveryPreferencesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerDeliveryPreferencesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetCustomerDeliveryPreferencesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetCustomerDeliveryPreferencesResponseBody 
    {
        /// <summary>Holds the Customer preferences such as message carrier, message delivery address, message format, language definition, customer/employee to receive that message group, number of copies needed, blackout SMS start and end times, local time offset from UST</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerPreferences")]
        public System.Collections.Generic.ICollection<CustomerPreferences>? CustomerPreferences { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId 
    {
        /// <summary>Date that first contact was made with the Customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDate")]
        public string? ContactDate { get; set; }= default!;
    
        /// <summary>The last date when Anti Money Laundering result is performed and updated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amlLastResultDate")]
        public string? AmlLastResultDate { get; set; }= default!;
    
        /// <summary>Name of the person who introduced the Customer to the bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("introducer")]
        public string? Introducer { get; set; }= default!;
    
        /// <summary>Indicates the Customer Relationship details of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("kycRelationship")]
        public string? KycRelationship { get; set; }= default!;
    
        /// <summary>Whether information related to the customer has been collected and verified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isKycComplete")]
        public string? IsKycComplete { get; set; }= default!;
    
        /// <summary>Date customer KYC information was last reviewed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("kycLastReviewDate")]
        public string? KycLastReviewDate { get; set; }= default!;
    
        /// <summary>Date system has calculated customer should next be reviewed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("kycNextSystemReviewDate")]
        public string? KycNextSystemReviewDate { get; set; }= default!;
    
        /// <summary>Next date of KYC review defined manually by the User</summary>
        [System.Text.Json.Serialization.JsonPropertyName("kycNextReviewDate")]
        public string? KycNextReviewDate { get; set; }= default!;
    
        /// <summary>Describe the legal controls that is required by institutions to prevent or report Anti Money Laundering activities. It can have YES, SENT or NULL values.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amlCheck")]
        public string? AmlCheck { get; set; }= default!;
    
        /// <summary>Describe the results of Anti Money Laundering.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amlResult")]
        public string? AmlResult { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId2 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Shortcut code for referring an Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mnemonic")]
        public string? Mnemonic { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language? Language { get; set; }= default!;
    
        /// <summary>The identifier of the nationality of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nationalityId")]
        public string? NationalityId { get; set; }= default!;
    
        /// <summary>The identifier of the department head or specific account officer responsible for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountOfficerId")]
        public string? AccountOfficerId { get; set; }= default!;
    
        /// <summary>Indicates the Customer Relationship details of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("kycRelationship")]
        public string? KycRelationship { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId3 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Shortcut code for referring an Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mnemonic")]
        public string? Mnemonic { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language2? Language { get; set; }= default!;
    
        /// <summary>The identifier of the nationality of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nationalityId")]
        public string? NationalityId { get; set; }= default!;
    
        /// <summary>The identifier of the department head or specific account officer responsible for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountOfficerId")]
        public string? AccountOfficerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId4 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Main menu title or header which the user wants to display on the screen when requesting the display of this main menu. This field can be expanded to allow the user to enter the description of the main menu in various languages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; }= default!;
    
        /// <summary>Specifies customer's first name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; }= default!;
    
        /// <summary>Shortcut code for referring an Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mnemonic")]
        public string? Mnemonic { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        public string? DateOfBirth { get; set; }= default!;
    
        /// <summary>Gender of the Individual Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string? Gender { get; set; }= default!;
    
        /// <summary>Marital status of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maritalstatus")]
        public string? Maritalstatus { get; set; }= default!;
    
        /// <summary>The identifier of the nationality of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nationalityId")]
        public string? NationalityId { get; set; }= default!;
    
        /// <summary>Specifies the number of dependents to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfDependents")]
        public string? NumberOfDependents { get; set; }= default!;
    
        /// <summary>Date on which the entity is incorporated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("birthIncorpDate")]
        public string? BirthIncorpDate { get; set; }= default!;
    
        /// <summary>An institution-defined identifier of the industry in which the customer is trading, operating or is associated with</summary>
        [System.Text.Json.Serialization.JsonPropertyName("industryId")]
        public string? IndustryId { get; set; }= default!;
    
        /// <summary>Specifies how the Customer is considered by the bank and how he fits in with the Account Officer's overall marketing strategy</summary>
        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public string? Target { get; set; }= default!;
    
        /// <summary>The identifier of the country of residence of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("residenceId")]
        public string? ResidenceId { get; set; }= default!;
    
        /// <summary>Represents the name of the building, entrance</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buildingName")]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Represents the number that identifies the position of a building on a street</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buildingNumber")]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>The number that identifies apartment and unit that have other dwellings above or below, often with shared access and common areas</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]
        public string? FlatNumber { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language3? Language { get; set; }= default!;
    
        /// <summary>Unique reference number of the legal documents submitted as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalId")]
        public LegalId? LegalId { get; set; }= default!;
    
        /// <summary>Employment status of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("employmentStatus")]
        public EmploymentStatus? EmploymentStatus { get; set; }= default!;
    
        /// <summary>The phone number of the customer or prospect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public PhoneNumber? PhoneNumber { get; set; }= default!;
    
        /// <summary>Identifies the residence status of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("residentialStatus")]
        public ResidentialStatus? ResidentialStatus { get; set; }= default!;
    
        /// <summary>Holds the Customer's TAX/SSN Id.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxId")]
        public TaxId? TaxId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerRelationship 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifies the key to Customer Relationship Group to form a relation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRelationGroupId")]
        public string? CustomerRelationGroupId { get; set; }= default!;
    
        /// <summary>Name of a Customer Relationship Group if applicable to the relationship.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRelationGroupName")]
        public string? CustomerRelationGroupName { get; set; }= default!;
    
        /// <summary>Originating Party's relationship to the underlying portfolio. Should be a valid relationship.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRelation")]
        public PartyRelation? PartyRelation { get; set; }= default!;
    
        /// <summary>The purpose of the relationship between the Originating Party and the Related Party. Valid options - TAX, LIMIT, ADVICES, OTHERS or can be left blank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfRelationship")]
        public string? PurposeOfRelationship { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EbSecureMessage 
    {
        /// <summary>Indicates the status of Secured mail between the Customer and bank.  Allowed values: - READ - UNREAD</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageStatus")]
        public string? MessageStatus { get; set; }= default!;
    
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>The subject of the message to be sent or received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string? Subject { get; set; }= default!;
    
        /// <summary>The date when the message is sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateSent")]
        public string? DateSent { get; set; }= default!;
    
        /// <summary>The time on which the message was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sentAt")]
        public string? SentAt { get; set; }= default!;
    
        /// <summary>The identifier of the originating department</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromDepartmentId")]
        public string? FromDepartmentId { get; set; }= default!;
    
        /// <summary>The unique department identifier, to which the message is to be sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toDepartmentId")]
        public string? ToDepartmentId { get; set; }= default!;
    
        /// <summary>Identifier of the parent message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentMessageId")]
        public string? ParentMessageId { get; set; }= default!;
    
        /// <summary>The Customer ID from which the message is triggered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerId")]
        public string? FromCustomerId { get; set; }= default!;
    
        /// <summary>The unique customer identifier of the Payee, to whom the payment message is to be sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toCustomerId")]
        public string? ToCustomerId { get; set; }= default!;
    
        /// <summary>The unique identifier of the uploaded file</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uploadId")]
        public string? UploadId { get; set; }= default!;
    
        /// <summary>The directory path to which the file is uploaded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uploadPath")]
        public string? UploadPath { get; set; }= default!;
    
        /// <summary>Specifies the record ID of parent message. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public Message? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountOfficer 
    {
        /// <summary>Name of the Customer or Bank Employee or a Person</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EbSecureMessage2 
    {
        /// <summary>Indicates the status of Secured mail between the Customer and bank.  Allowed values: - READ - UNREAD</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageStatus")]
        public string? MessageStatus { get; set; }= default!;
    
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>The subject of the message to be sent or received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string? Subject { get; set; }= default!;
    
        /// <summary>The date when the message is sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateSent")]
        public string? DateSent { get; set; }= default!;
    
        /// <summary>The time on which the message was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sentAt")]
        public string? SentAt { get; set; }= default!;
    
        /// <summary>The identifier of the originating department</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromDepartmentId")]
        public string? FromDepartmentId { get; set; }= default!;
    
        /// <summary>The unique department identifier, to which the message is to be sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toDepartmentId")]
        public string? ToDepartmentId { get; set; }= default!;
    
        /// <summary>Identifier of the parent message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentMessageId")]
        public string? ParentMessageId { get; set; }= default!;
    
        /// <summary>The Customer ID from which the message is triggered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerId")]
        public string? FromCustomerId { get; set; }= default!;
    
        /// <summary>The unique customer identifier of the Payee, to whom the payment message is to be sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toCustomerId")]
        public string? ToCustomerId { get; set; }= default!;
    
        /// <summary>The unique identifier of the uploaded file</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uploadId")]
        public string? UploadId { get; set; }= default!;
    
        /// <summary>The directory path to which the file is uploaded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uploadPath")]
        public string? UploadPath { get; set; }= default!;
    
        /// <summary>Specifies the record ID of parent message. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public Message2? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountOfficer2 
    {
        /// <summary>Name of the Customer or Bank Employee or a Person</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TravelNotification 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The country to which the customer travels</summary>
        [System.Text.Json.Serialization.JsonPropertyName("travelCountry")]
        public TravelCountry? TravelCountry { get; set; }= default!;
    
        /// <summary>Contains the overall status</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overallStatus")]
        public string? OverallStatus { get; set; }= default!;
    
        /// <summary>Current Number which indicates how many times the record is modified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currNo")]
        public string? CurrNo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PersonEntity 
    {
        /// <summary>Identifies if the record is for a real person or a legal entity. Allowed Options: Person or Entity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("personEntity")]
        public string? PersonEntity1 { get; set; }= default!;
    
        /// <summary>Specifies the Version of address to which the message should be sent to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("carrierPosition")]
        public string? CarrierPosition { get; set; }= default!;
    
        /// <summary>Gender of the Individual Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string? Gender { get; set; }= default!;
    
        /// <summary>Date on which the entity is incorporated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("birthIncorpDate")]
        public string? BirthIncorpDate { get; set; }= default!;
    
        /// <summary>Language specific fields will be displayed under this entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Language4? Language { get; set; }= default!;
    
        /// <summary>The phone number of the customer or prospect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public PhoneNumber2? PhoneNumber { get; set; }= default!;
    
        /// <summary>Unique reference number of the legal documents submitted as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalId")]
        public LegalId2? LegalId { get; set; }= default!;
    
        /// <summary>Social Network Identification of the person/entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("socialNetworkId")]
        public SocialNetworkId? SocialNetworkId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerPreferences 
    {
        /// <summary>Unique identifier of an entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Specifies the Message group name that provides details of all Messages to be triggered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageGroupId")]
        public MessageGroupId? MessageGroupId { get; set; }= default!;
    
        /// <summary>Current Number which indicates how many times the record is modified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currNo")]
        public string? CurrNo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language 
    {
        /// <summary>Contains the name of the account, basically the short title of the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        public string? ShortName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language2 
    {
        /// <summary>Contains the name of the account, basically the short title of the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        public string? ShortName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language3 
    {
        /// <summary>Communication Address of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string? Street { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string? PostCode { get; set; }= default!;
    
        /// <summary>This is the country name that the financial institution resides in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("countryName")]
        public string? CountryName { get; set; }= default!;
    
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public string? TownCountry { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LegalId 
    {
        /// <summary>Date of Issue of the legal document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalIssueDate")]
        public string? LegalIssueDate { get; set; }= default!;
    
        /// <summary>Unique reference number of the legal documents submitted as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalId")]
        public string? LegalId1 { get; set; }= default!;
    
        /// <summary>Indicates the business date until when the balance reservation event is active.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        public string? ToDate { get; set; }= default!;
    
        /// <summary>Name of the legal documents such as passport, driving licence etc., provided as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalDocumentName")]
        public string? LegalDocumentName { get; set; }= default!;
    
        /// <summary>Authority who issued the legal document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalIssueAuthorisedDate")]
        public string? LegalIssueAuthorisedDate { get; set; }= default!;
    
        /// <summary>Name of the account holder in the Legal Document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalHolderName")]
        public string? LegalHolderName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EmploymentStatus 
    {
        /// <summary>Indicates the business date from when the balance reservation event is active.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public string? FromDate { get; set; }= default!;
    
        /// <summary>The business of customer's employer involved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("employerBusiness")]
        public string? EmployerBusiness { get; set; }= default!;
    
        /// <summary>Occupation of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("occupation")]
        public string? Occupation { get; set; }= default!;
    
        /// <summary>Annual bonus received by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("annualBonus")]
        public string? AnnualBonus { get; set; }= default!;
    
        /// <summary>Indicates the payment frequency of salary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("salaryFrequency")]
        public string? SalaryFrequency { get; set; }= default!;
    
        /// <summary>Currency in which the Salary information of the customer is maintained</summary>
        [System.Text.Json.Serialization.JsonPropertyName("salaryCurrency")]
        public string? SalaryCurrency { get; set; }= default!;
    
        /// <summary>Name of the customer's employer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("employerName")]
        public string? EmployerName { get; set; }= default!;
    
        /// <summary>Employment status of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("employmentStatus")]
        public string? EmploymentStatus1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PhoneNumber 
    {
        /// <summary>The phone number of the customer or prospect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber1 { get; set; }= default!;
    
        /// <summary>Identifies the nature of the postal address, like primary, secondary or office address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("addressLocation")]
        public string? AddressLocation { get; set; }= default!;
    
        /// <summary>The mobile SMS number of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("smsNumber")]
        public string? SmsNumber { get; set; }= default!;
    
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ResidentialStatus 
    {
        /// <summary>Indicates the business date from when the balance reservation event is active.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public string? FromDate { get; set; }= default!;
    
        /// <summary>Identifies the residence status of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("residentialStatus")]
        public string? ResidentialStatus1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxId 
    {
        /// <summary>Holds the Customer's TAX/SSN Id.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxId")]
        public string? TaxId1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartyRelation 
    {
        /// <summary>Used to record the percentage of ownership in the relationship. For example an entity may be partially or wholly owned by another entity. This will only be allowed to be entered if the relation is indicated as a type allowing Ownership</summary>
        [System.Text.Json.Serialization.JsonPropertyName("owningPercent")]
        public string? OwningPercent { get; set; }= default!;
    
        /// <summary>Effective date from which there is a relationship between originating party and the portfolio.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyEffectiveDate")]
        public string? PartyEffectiveDate { get; set; }= default!;
    
        /// <summary>Customer Relationship of originating party. It is used in conjunction with the relatedRelationReference attribute.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationReference")]
        public string? RelationReference { get; set; }= default!;
    
        /// <summary>Indicates the role of a customer or party, Eg: Benefial Owner, Nominee etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyRole")]
        public string? PartyRole { get; set; }= default!;
    
        /// <summary>To state the effective date of the relationship.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedPartyEffectiveDate")]
        public string? RelatedPartyEffectiveDate { get; set; }= default!;
    
        /// <summary>To relate the Customer Relationship between Originating party and other parties. It is used in conjunction with the relationReference attribute</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedRelationReference")]
        public RelatedRelationReference? RelatedRelationReference { get; set; }= default!;
    
        /// <summary>Related customers or persons/entities that are part of the relationship.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationPartyId")]
        public string? RelationPartyId { get; set; }= default!;
    
        /// <summary>Role of joint customer with the main customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointRelationRoleId")]
        public string? JointRelationRoleId { get; set; }= default!;
    
        /// <summary>Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyId")]
        public string? PartyId { get; set; }= default!;
    
        /// <summary>Specify the various types of relation that could exist between Customers and /or Person Entities</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relation")]
        public string? Relation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Message 
    {
        /// <summary>Specifies the record ID of parent message. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Message2 
    {
        /// <summary>Specifies the record ID of parent message. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TravelCountry 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public AccountId? AccountId { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>The time period from which the customer is going to travel to the country on the VISIT.PERIOD.START date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("visitTimeFrom")]
        public string? VisitTimeFrom { get; set; }= default!;
    
        /// <summary>Holds the contact details of the customer during his stay</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetail")]
        public ContactDetail? ContactDetail { get; set; }= default!;
    
        /// <summary>Indicates the status of travel.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("travelStatus")]
        public string? TravelStatus { get; set; }= default!;
    
        /// <summary>Holds the time of arrival to the native</summary>
        [System.Text.Json.Serialization.JsonPropertyName("visitTimeTo")]
        public string? VisitTimeTo { get; set; }= default!;
    
        /// <summary>The type of event schedule. The main ones are interest payment (IP) , principal increase (PI), rate reset (RR).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("scheduleType")]
        public string? ScheduleType { get; set; }= default!;
    
        /// <summary>The country to which the customer travels</summary>
        [System.Text.Json.Serialization.JsonPropertyName("travelCountry")]
        public string? TravelCountry1 { get; set; }= default!;
    
        /// <summary>Holds the purpose of traveling to the country</summary>
        [System.Text.Json.Serialization.JsonPropertyName("visitPurpose")]
        public string? VisitPurpose { get; set; }= default!;
    
        /// <summary>The country to which the customer travels</summary>
        [System.Text.Json.Serialization.JsonPropertyName("visitPeriodStart")]
        public string? VisitPeriodStart { get; set; }= default!;
    
        /// <summary>The date when the customer completes his travel and returns to his native</summary>
        [System.Text.Json.Serialization.JsonPropertyName("visitPeriodEnd")]
        public string? VisitPeriodEnd { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Language4 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string? Street { get; set; }= default!;
    
        /// <summary>Name of the Customer or Bank Employee or a Person</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string? PostCode { get; set; }= default!;
    
        /// <summary>This is the country name that the financial institution resides in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("countryName")]
        public string? CountryName { get; set; }= default!;
    
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public string? TownCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PhoneNumber2 
    {
        /// <summary>The phone number of the customer or prospect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; }= default!;
    
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LegalId2 
    {
        /// <summary>Unique reference number of the legal documents submitted as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalId")]
        public string? LegalId { get; set; }= default!;
    
        /// <summary>Name of the legal documents such as passport, driving licence etc., provided as identification proof</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legalDocumentName")]
        public string? LegalDocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SocialNetworkId 
    {
        /// <summary>Social Network Identification of the person/entity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("socialNetworkId")]
        public string? SocialNetworkId1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageGroupId 
    {
        /// <summary>Specifies the Message group name that provides details of all Messages to be triggered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageGroupId")]
        public string? MessageGroupId1 { get; set; }= default!;
    
        /// <summary>Specifies the Version of address to which the message should be sent to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("carrierPosition")]
        public string? CarrierPosition { get; set; }= default!;
    
        /// <summary>Contains the identifier associated to the carrier respective to a transaction of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("carrierId")]
        public CarrierId? CarrierId { get; set; }= default!;
    
        /// <summary>Flag to set the channel to communicate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public string? Required { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RelatedRelationReference 
    {
        /// <summary>Used to record the percentage of ownership in the relationship. For example an entity may be partially or wholly owned by another entity. This will only be allowed to be entered if the relation is indicated as a type allowing Ownership</summary>
        [System.Text.Json.Serialization.JsonPropertyName("owningPercent")]
        public string? OwningPercent { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountId 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetail 
    {
        /// <summary>Holds the contact details of the customer during his stay</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetail")]
        public string? ContactDetail1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CarrierId 
    {
        /// <summary>Specifies the Version of address to which the message should be sent to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("carrierPosition")]
        public string? CarrierPosition { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016