//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace DataHub.OperationalDataStore.Holding.TradeDetails
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITradeDetailsService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Derivatives Active SELL trade data details of OPTION type contract</summary>
        /// <param name="tradeStatus">The status of the trade in the system defaulted to either ACTIVE or CLOSED</param>
        /// <param name="lot">The number of lots/contracts traded</param>
        /// <param name="tradeType">The type of contract that has been traded on an exchange, FUTURE, OPTION or STOCK</param>
        /// <param name="syTransactionReference">Structured Product reference through which the trade is created</param>
        /// <param name="pndSett">ID of any DX.CLOSEOUT pending (Unauthorised) for this PRI.CUSTOMER.</param>
        /// <param name="dxCloseoutPendingId">DX.CLOSEOUT pending ID for this PRI.CUSTOMER</param>
        /// <param name="buyOrSell">Indicates whether the Customer is buying or selling</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="strikePrice">The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</param>
        /// <param name="callOrPut">Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</param>
        /// <param name="tradeCurrency">The trade currency is the settlement currency for the trade</param>
        /// <param name="contractCurrency">Indicates the Contract currency</param>
        /// <param name="optionStyle">The type of settlement rule that should be applied on the option. AMERICAN: An option that may be exercised at any time prior to its expiry date. EUROPEAN: An option that may only be exercised on its expiry date.</param>
        /// <param name="referenceId">Identifies the unique identifier of the activity.</param>
        /// <returns>getSellOptionTradesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSellOptionTradesResponse> GetSellOptionTradesAsync(string? tradeStatus = null, string? lot = null, string? tradeType = null, string? syTransactionReference = null, string? pndSett = null, string? dxCloseoutPendingId = null, string? buyOrSell = null, string? portfolioId = null, string? instrumentId = null, string? maturityDate = null, string? strikePrice = null, string? callOrPut = null, string? tradeCurrency = null, string? contractCurrency = null, string? optionStyle = null, string? referenceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Derivatives Active BUY trade data details of OPTION type contract</summary>
        /// <param name="tradeStatus">The status of the trade in the system defaulted to either ACTIVE or CLOSED</param>
        /// <param name="lot">The number of lots/contracts traded</param>
        /// <param name="tradeType">The type of contract that has been traded on an exchange, FUTURE, OPTION or STOCK</param>
        /// <param name="syTransactionReference">Structured Product reference through which the trade is created</param>
        /// <param name="pndSett">ID of any DX.CLOSEOUT pending (Unauthorised) for this PRI.CUSTOMER.</param>
        /// <param name="dxCloseoutPendingId">DX.CLOSEOUT pending ID for this PRI.CUSTOMER</param>
        /// <param name="buyOrSell">Indicates whether the Customer is buying or selling</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="strikePrice">The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</param>
        /// <param name="callOrPut">Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</param>
        /// <param name="tradeCurrency">The trade currency is the settlement currency for the trade</param>
        /// <param name="contractCurrency">Indicates the Contract currency</param>
        /// <param name="optionStyle">The type of settlement rule that should be applied on the option. AMERICAN: An option that may be exercised at any time prior to its expiry date. EUROPEAN: An option that may only be exercised on its expiry date.</param>
        /// <param name="referenceId">Identifies the unique identifier of the activity.</param>
        /// <returns>getBuyOptionTradesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBuyOptionTradesResponse> GetBuyOptionTradesAsync(string? tradeStatus = null, string? lot = null, string? tradeType = null, string? syTransactionReference = null, string? pndSett = null, string? dxCloseoutPendingId = null, string? buyOrSell = null, string? portfolioId = null, string? instrumentId = null, string? maturityDate = null, string? strikePrice = null, string? callOrPut = null, string? tradeCurrency = null, string? contractCurrency = null, string? optionStyle = null, string? referenceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Derivatives Active trade data details of OPTION type contract</summary>
        /// <param name="tradeStatus">The status of the trade in the system defaulted to either ACTIVE or CLOSED</param>
        /// <param name="lot">The number of lots/contracts traded</param>
        /// <param name="tradeType">The type of contract that has been traded on an exchange, FUTURE, OPTION or STOCK</param>
        /// <param name="syTransactionReference">Structured Product reference through which the trade is created</param>
        /// <param name="pndSett">ID of any DX.CLOSEOUT pending (Unauthorised) for this PRI.CUSTOMER.</param>
        /// <param name="dxCloseoutPendingId">DX.CLOSEOUT pending ID for this PRI.CUSTOMER</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="strikePrice">The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</param>
        /// <param name="callOrPut">Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</param>
        /// <param name="tradeCurrency">The trade currency is the settlement currency for the trade</param>
        /// <param name="contractCurrency">Indicates the Contract currency</param>
        /// <param name="optionStyle">The type of settlement rule that should be applied on the option. AMERICAN: An option that may be exercised at any time prior to its expiry date. EUROPEAN: An option that may only be exercised on its expiry date.</param>
        /// <param name="referenceId">Identifies the unique identifier of the activity.</param>
        /// <returns>getActiveOptionTradesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetActiveOptionTradesResponse> GetActiveOptionTradesAsync(string? tradeStatus = null, string? lot = null, string? tradeType = null, string? syTransactionReference = null, string? pndSett = null, string? dxCloseoutPendingId = null, string? portfolioId = null, string? instrumentId = null, string? maturityDate = null, string? strikePrice = null, string? callOrPut = null, string? tradeCurrency = null, string? contractCurrency = null, string? optionStyle = null, string? referenceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    /// <summary>getSellOptionTradesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSellOptionTradesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetSellOptionTradesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetSellOptionTradesResponseBody 
    {
        /// <summary>The main trade input application for the Derivatives</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dxtrade")]
        public System.Collections.Generic.ICollection<Dxtrade>? Dxtrade { get; set; }= default!;
    
    
    }
    
    /// <summary>getBuyOptionTradesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetBuyOptionTradesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetBuyOptionTradesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetBuyOptionTradesResponseBody 
    {
        /// <summary>The main trade input application for the Derivatives</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dxtrade")]
        public System.Collections.Generic.ICollection<Dxtrade2>? Dxtrade { get; set; }= default!;
    
    
    }
    
    /// <summary>getActiveOptionTradesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetActiveOptionTradesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public GetActiveOptionTradesResponseBody? Data { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetActiveOptionTradesResponseBody 
    {
        /// <summary>The main trade input application for the Derivatives</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dxtrade")]
        public System.Collections.Generic.ICollection<Dxtrade3>? Dxtrade { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dxtrade 
    {
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public CustomerId? CustomerId { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The price per unit of lot/lots traded. For option trades, it denotes the premium price in the trade currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceOrPremium")]
        public string? PriceOrPremium { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dxtrade2 
    {
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public CustomerId2? CustomerId { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The price per unit of lot/lots traded. For option trades, it denotes the premium price in the trade currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceOrPremium")]
        public string? PriceOrPremium { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dxtrade3 
    {
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public CustomerId3? CustomerId { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The price per unit of lot/lots traded. For option trades, it denotes the premium price in the trade currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceOrPremium")]
        public string? PriceOrPremium { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId 
    {
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lot")]
        public string? Lot { get; set; }= default!;
    
        /// <summary>Number of lots originally transacted on this trade for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalLot")]
        public string? OriginalLot { get; set; }= default!;
    
        /// <summary>Indicates the transaction generated by this leg of the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priTransKey")]
        public string? PriTransKey { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId2 
    {
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lot")]
        public string? Lot { get; set; }= default!;
    
        /// <summary>Number of lots originally transacted on this trade for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalLot")]
        public string? OriginalLot { get; set; }= default!;
    
        /// <summary>Indicates the transaction generated by this leg of the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priTransKey")]
        public string? PriTransKey { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerId3 
    {
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lot")]
        public string? Lot { get; set; }= default!;
    
        /// <summary>Number of lots originally transacted on this trade for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalLot")]
        public string? OriginalLot { get; set; }= default!;
    
        /// <summary>Indicates the transaction generated by this leg of the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priTransKey")]
        public string? PriTransKey { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016