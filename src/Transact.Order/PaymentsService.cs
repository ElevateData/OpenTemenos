//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.Payments
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentsService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the payment details based on status</summary>
        /// <param name="fromDate">Indicates the business date from when the balance reservation event is active.</param>
        /// <param name="status">The status of the early maturity request</param>
        /// <param name="debitCustomerId">Debtor customer details</param>
        /// <param name="creditCustomerId">Creditor customer id details</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="outputChannel">Contains the channel that will be used to send the outward payment message</param>
        /// <param name="paymentSource">Indicates the source from where the payment is originated</param>
        /// <param name="fileSendersReference">Indicates the sender reference that comes from the inward payment file</param>
        /// <param name="fundsTransferId">Identifier of the Funds Transfer</param>
        /// <param name="statusCode">Status code, as defined by the institution</param>
        /// <param name="toDate">Indicates the business date until when the balance reservation event is active.</param>
        /// <param name="beneficiaryId">Indicates the reference of the financial institution that allows access to the beneficiary information</param>
        /// <param name="beneficiaryAccountId">Unique account identifier of the beneficiary account number.</param>
        /// <param name="direction">Indicates the direction of the Direct debit claim for which mandate is received. The claim can be 'Outward' i.e. Claim is sent to the other bank or 'Inward'  i.e. other bank submit their claim to debit our customer's account.</param>
        /// <param name="transactionAmount">Contains the transaction amount. This is based on the currency, either local or foreign currency</param>
        /// <param name="messageType">Defines the type of swift messages that are sent or received for a transaction</param>
        /// <param name="processingDate">The date when payment instruction is processed in system.</param>
        /// <param name="customerReference">The reference which is provided to the beneficiary/ creditor by the originator of payment</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="debitCurrency">Currency of the debit account. For example: USD, EUR etc.</param>
        /// <param name="debitAccountCompany">Contains the company of the debit party</param>
        /// <param name="creditCurrency">Currency of the account which funds will be transferred to.</param>
        /// <param name="creditAccountCompany">Contains the company of the credit party</param>
        /// <param name="partySendersReferenceIncoming">Debtor payment reference details of incoming</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="sendersCorrespondentAddress">Contains additional address lines of the sender correspondent institution.</param>
        /// <param name="receiversCorrespondentAddress">Contains additional address lines of the receiver correspondent institution.</param>
        /// <param name="bulkReference">Contains bulk master reference for the payment.</param>
        /// <param name="customerOrBankTransfer">Indicates if the payment was initiated by Customer or the financial institution</param>
        /// <param name="creditValueDate">Reference quoted by the credit account for a payment</param>
        /// <param name="debitValueDate">Date on which the amount will be debited for settlement</param>
        /// <param name="settlementTransactionIndicator">Indicates whether the payment is settlement transaction or not</param>
        /// <param name="settlementClaimId">Indicates the settlement claim reference of the payment transaction</param>
        /// <param name="entryDateTime">Contains the payment creation time</param>
        /// <param name="approvedDateTime">Contains the time when payment got approved</param>
        /// <param name="clearingNatureCode">Contains the nature of the payment transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentsStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentsStatusResponse> GetPaymentsStatusAsync(string fromDate, string status, string? debitCustomerId = null, string? creditCustomerId = null, string? debitAccountId = null, string? creditAccountId = null, string? outputChannel = null, string? paymentSource = null, string? fileSendersReference = null, string? fundsTransferId = null, string? statusCode = null, string? toDate = null, string? beneficiaryId = null, string? beneficiaryAccountId = null, string? direction = null, string? transactionAmount = null, string? messageType = null, string? processingDate = null, string? customerReference = null, string? companyIdQuery = null, string? debitCurrency = null, string? debitAccountCompany = null, string? creditCurrency = null, string? creditAccountCompany = null, string? partySendersReferenceIncoming = null, string? transactionReference = null, string? sendersCorrespondentAddress = null, string? receiversCorrespondentAddress = null, string? bulkReference = null, string? customerOrBankTransfer = null, string? creditValueDate = null, string? debitValueDate = null, string? settlementTransactionIndicator = null, string? settlementClaimId = null, string? entryDateTime = null, string? approvedDateTime = null, string? clearingNatureCode = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyIdHeader = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the payment fee and tax</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentFeesAndChargesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFeesAndChargesResponse> GetPaymentFeesAndChargesAsync(string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves payment audit trail</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AllPaymentsTransactionLogsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AllPaymentsTransactionLogsResponse> GetAllPaymentsTransactionLogsAsync(string? transactionReference = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a recall in response to a bank operator's request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>BankInitiatedPaymentRecallResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankInitiatedPaymentRecallResponse> CreateBankInitiatedPaymentRecallAsync(BankInitiatedPaymentRecall payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a recall in response to a customer's request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CustomerInitiatedPaymentRecallResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerInitiatedPaymentRecallResponse> CreateCustomerInitiatedPaymentRecallAsync(CustomerInitiatedPaymentRecall payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Respond to a request for recall</summary>
        /// <param name="recallId">Defines the ID to identify the payment which has to be recalled</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ResponseToPaymentRecallResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResponseToPaymentRecallResponse> UpdateResponseToPaymentRecallAsync(string recallId, ResponseToPaymentRecall payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the status of a received acknowledgement</summary>
        /// <param name="sentMessageId">Contains the sent message reference as generated by the system</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentSentMessageResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentSentMessageResponse> UpdatePaymentSentMessageAsync(string sentMessageId, PaymentSentMessage payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the clearing reason codes to place in the recall request</summary>
        /// <param name="optionSelected">The option selected from the total number of options available</param>
        /// <param name="transactionType">Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</param>
        /// <param name="receiver">Identifies the receiver of the message</param>
        /// <param name="clearingId">Clearing channel specific details</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentCancelReasonCodeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentCancelReasonCodeResponse> GetPaymentCancelReasonCodeAsync(string? optionSelected = null, string? transactionType = null, string? receiver = null, string? clearingId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentsStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentsStatusResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentsStatusResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentsStatusResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentFeesAndChargesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentFeesAndChargesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentFeesAndChargesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentFeesAndChargesResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>AllPaymentsTransactionLogsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AllPaymentsTransactionLogsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AllPaymentsTransactionLogsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AllPaymentsTransactionLogsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>BankInitiatedPaymentRecall</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankInitiatedPaymentRecall 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BankInitiatedPaymentRecallBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankInitiatedPaymentRecallBody 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for which the payment is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoCancelReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoCancelReasonCode { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>BankInitiatedPaymentRecallResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankInitiatedPaymentRecallResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BankInitiatedPaymentRecallResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankInitiatedPaymentRecallResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("cancellationDetails")]
        public System.Collections.Generic.ICollection<CancellationDetails>? CancellationDetails { get; set; }= default!;
    
        /// <summary>Indicates the BIC code of the institution where the originator holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originatingBic")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OriginatingBic { get; set; }= default!;
    
        /// <summary>Indicates the national clearing code or sort code where originator holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originatorClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OriginatorClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the direction of payment i.e. incoming, outgoing, book or redirect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDirection")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDirection { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Clearing channel specific details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicates the currency of the transaction. For example GBP, USD etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionCurrency { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for which the payment is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoCancelReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoCancelReasonCode { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the settlement date of the payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SettlementDate { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MessageType { get; set; }= default!;
    
        /// <summary>Indicates the outgoing message type of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalMessageType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OriginalMessageType { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Indicates the processing mode of the request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processingIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProcessingIndicator { get; set; }= default!;
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PaymentStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>CustomerInitiatedPaymentRecall</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerInitiatedPaymentRecall 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerInitiatedPaymentRecallBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerInitiatedPaymentRecallBody 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for which the payment is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoCancelReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoCancelReasonCode { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>CustomerInitiatedPaymentRecallResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerInitiatedPaymentRecallResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerInitiatedPaymentRecallResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerInitiatedPaymentRecallResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("receivers")]
        public System.Collections.Generic.ICollection<Receivers>? Receivers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("cancellationDetails")]
        public System.Collections.Generic.ICollection<CancellationDetails2>? CancellationDetails { get; set; }= default!;
    
        /// <summary>Indicates the direction of payment i.e. incoming, outgoing, book or redirect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDirection")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDirection { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Clearing channel specific details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicates the currency of the transaction. For example GBP, USD etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionCurrency { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for which the payment is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoCancelReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoCancelReasonCode { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the settlement date of the payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SettlementDate { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MessageType { get; set; }= default!;
    
        /// <summary>Indicates the outgoing message type of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalMessageType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OriginalMessageType { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Indicates the processing mode of the request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processingIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProcessingIndicator { get; set; }= default!;
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PaymentStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>ResponseToPaymentRecall</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ResponseToPaymentRecall 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ResponseToPaymentRecallBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ResponseToPaymentRecallBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("rejectAdditionalInfos")]
        public System.Collections.Generic.ICollection<RejectAdditionalInfos>? RejectAdditionalInfos { get; set; }= default!;
    
        /// <summary>Indicates the flag to accept or reject the inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptOrReject")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? AcceptOrReject { get; set; }= default!;
    
        /// <summary>Indicates a descriptive reason for acceptance of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptedReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AcceptedReason { get; set; }= default!;
    
        /// <summary>Indicates a descriptive reason for rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authorisationReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AuthorisationReason { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoRejectReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoRejectReasonCode { get; set; }= default!;
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RejectReasonCode { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>ResponseToPaymentRecallResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ResponseToPaymentRecallResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ResponseToPaymentRecallResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ResponseToPaymentRecallResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("receivers")]
        public System.Collections.Generic.ICollection<Receivers2>? Receivers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("rejectAdditionalInfos")]
        public System.Collections.Generic.ICollection<RejectAdditionalInfos2>? RejectAdditionalInfos { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("cancellationDetails")]
        public System.Collections.Generic.ICollection<CancellationDetails3>? CancellationDetails { get; set; }= default!;
    
        /// <summary>Indicates the BIC code of the institution where the originator holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originatingBic")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OriginatingBic { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Clearing channel specific details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicates the currency of the transaction. For example GBP, USD etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionCurrency { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for which the payment is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoCancelReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoCancelReasonCode { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Indicates the settlement date of the payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SettlementDate { get; set; }= default!;
    
        /// <summary>Indicates the flag to accept or reject the inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptOrReject")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? AcceptOrReject { get; set; }= default!;
    
        /// <summary>Indicates a descriptive reason for acceptance of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptedReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AcceptedReason { get; set; }= default!;
    
        /// <summary>Indicates a descriptive reason for rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authorisationReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AuthorisationReason { get; set; }= default!;
    
        /// <summary>Indicates the ISO reason code for rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isoRejectReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IsoRejectReasonCode { get; set; }= default!;
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RejectReasonCode { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Debtor company BIC details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCompanyBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartyCompanyBIC { get; set; }= default!;
    
        /// <summary> Identifier of the debitAccounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccount { get; set; }= default!;
    
        /// <summary>Identifier of the creditAccounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccount { get; set; }= default!;
    
        /// <summary>Indicates the processing mode of the request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processingIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProcessingIndicator { get; set; }= default!;
    
        /// <summary>Contains the description of the error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ErrorMessage { get; set; }= default!;
    
        /// <summary>Date when recall or cancellation is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recallDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecallDate { get; set; }= default!;
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PaymentStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentSentMessage</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentSentMessage 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentSentMessageBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentSentMessageBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ackDetails")]
        public System.Collections.Generic.ICollection<AckDetails>? AckDetails { get; set; }= default!;
    
        /// <summary>Payment reference details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PaymentReference { get; set; }= default!;
    
        /// <summary>The holds the record key of the message ID.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageId { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentSentMessageResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentSentMessageResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentSentMessageResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentSentMessageResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ackDetails")]
        public System.Collections.Generic.ICollection<AckDetails2>? AckDetails { get; set; }= default!;
    
        /// <summary>Payment reference details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PaymentReference { get; set; }= default!;
    
        /// <summary>The holds the record key of the message ID.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageId { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentCancelReasonCodeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentCancelReasonCodeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentCancelReasonCodeResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentCancelReasonCodeResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Indicates the direction of the Direct debit claim for which mandate is received. The claim can be 'Outward' i.e. Claim is sent to the other bank or 'Inward'  i.e. other bank submit their claim to debit our customer's account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Direction { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Indicates the currency of the transaction. For example GBP, USD etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? TransactionCurrency { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 10D)]
        public double? TransactionAmount { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? MessageType { get; set; }= default!;
    
        /// <summary>Indicates the sender reference that comes from the inward payment file</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fileSendersReference")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? FileSendersReference { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeBearer { get; set; }= default!;
    
        /// <summary>Status code, as defined by the institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? StatusCode { get; set; }= default!;
    
        /// <summary>Contains the description of purpose of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The date when payment instruction is processed in system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("processingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ProcessingDate { get; set; }= default!;
    
        /// <summary>Contains the channel that will be used to send the outward payment message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outputChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? OutputChannel { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Country of the beneficiary account number. For example: US, IN, EU</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryCountryId { get; set; }= default!;
    
        /// <summary>City of the beneficiary account. For example: London, Dallas etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressCity")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryAddressCity { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Contains the National Clearing Code (NCC) or account number of the ordering party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? OrderingAccount { get; set; }= default!;
    
        /// <summary>Contains the country of the ordering party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPartyCountry")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OrderingPartyCountry { get; set; }= default!;
    
        /// <summary>Contains the city/town of the ordering party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPartyCity")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OrderingPartyCity { get; set; }= default!;
    
        /// <summary>Debit account customer address details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? OrderingCustomerAddress { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OrderingBank { get; set; }= default!;
    
        /// <summary>Identifier of the Funds Transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransferId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FundsTransferId { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Contains the company of the credit party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountCompany")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CreditAccountCompany { get; set; }= default!;
    
        /// <summary>Contains the company of the debit party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountCompany")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? DebitAccountCompany { get; set; }= default!;
    
        /// <summary>Currency of the account which funds will be transferred to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CreditCurrency { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Debtor payment reference details of incoming</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partySendersReferenceIncoming")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? PartySendersReferenceIncoming { get; set; }= default!;
    
        /// <summary>Contains the payment creation time</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entryDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? EntryDateTime { get; set; }= default!;
    
        /// <summary>Contains the nature of the payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingNatureCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ClearingNatureCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Indicates the type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FeeType { get; set; }= default!;
    
        /// <summary>Indicates the description for type of fee which is applied for payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FeeName { get; set; }= default!;
    
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>Indicates the fee currency in which fee amount is applied for the payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? FeeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the fee amount which is applied for the payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("feeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FeeAmount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? ChargeBearer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Event identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? EventId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        public string? EventName { get; set; }= default!;
    
        /// <summary>Indicates the error code which is encountered during payment processing as returned by payment system </summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ErrorCode { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationDetails 
    {
        /// <summary>Indicates the reference to track the initiation of payment cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelRequestId { get; set; }= default!;
    
        /// <summary>Indicates the date and time when the recall was generated or received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequestDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? CancellationRequestDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Receivers 
    {
        /// <summary>Identifies the receiver of the message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiver")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Receiver { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationDetails2 
    {
        /// <summary>Indicates the reference to track the initiation of payment cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelRequestId { get; set; }= default!;
    
        /// <summary>Indicates the date and time when the recall was generated or received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequestDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? CancellationRequestDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RejectAdditionalInfos 
    {
        /// <summary>Indicates any additional information that user wishes to supply during rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectAdditionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RejectAdditionalInfo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Receivers2 
    {
        /// <summary>Identifies the receiver of the message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiver")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Receiver { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RejectAdditionalInfos2 
    {
        /// <summary>Indicates any additional information that user wishes to supply during rejection of an inward recall</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectAdditionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RejectAdditionalInfo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationDetails3 
    {
        /// <summary>Indicates the reference to track the initiation of payment cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelRequestId { get; set; }= default!;
    
        /// <summary>Indicates the date and time when the recall was generated or received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequestDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancellationRequestDateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AckDetails 
    {
        /// <summary>Contains the code for ack/nack - accepted or rejected by the clearing. For example: 0 - success acknowledegement , 1 - failure negative acknowledgement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledgementStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AcknowledgementStatus { get; set; }= default!;
    
        /// <summary>Contains the  ISO reason code received in technical ack/nack messages</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeAcknowledgementReason")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NegativeAcknowledgementReason { get; set; }= default!;
    
        /// <summary>Contains the reason description received in technical ack/nack message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeAcknowledgementReasonDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? NegativeAcknowledgementReasonDescription { get; set; }= default!;
    
        /// <summary>Contains the ack/nack message type name. For example: admi.007.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledgementType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AcknowledgementType { get; set; }= default!;
    
        /// <summary>The time on which the message was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sentAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SentAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AckDetails2 
    {
        /// <summary>Contains the code for ack/nack - accepted or rejected by the clearing. For example: 0 - success acknowledegement , 1 - failure negative acknowledgement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledgementStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AcknowledgementStatus { get; set; }= default!;
    
        /// <summary>Contains the  ISO reason code received in technical ack/nack messages</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeAcknowledgementReason")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NegativeAcknowledgementReason { get; set; }= default!;
    
        /// <summary>Contains the reason description received in technical ack/nack message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negativeAcknowledgementReasonDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? NegativeAcknowledgementReasonDescription { get; set; }= default!;
    
        /// <summary>Contains the ack/nack message type name. For example: admi.007.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledgementType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AcknowledgementType { get; set; }= default!;
    
        /// <summary>The time on which the message was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sentAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SentAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>ID of the LookupsResponse Code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("codeId")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? CodeId { get; set; }= default!;
    
        /// <summary>Contains the description of the status of settlement Instruction.  Sample values are 1. Matched 2. Acknowledged/Accepted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("matchCodeDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? MatchCodeDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016