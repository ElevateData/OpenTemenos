//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.AccountTransfers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAccountTransferService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of funds transfers</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountTransfersResponse> GetAccountTransfersAsync(string debitAccountId, string creditAccountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves bulk transfer details</summary>
        /// <param name="bulkTransferId">Identifier of the Bulk Transfer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>BulkTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkTransfersResponse> GetBulkTransfersAsync(string bulkTransferId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create inward funds transfer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>InwardTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InwardTransferResponse> CreateInwardTransferAsync(InwardTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update funds transfer details for a inward transfer</summary>
        /// <param name="fundsTransferId">Identifier of the Funds Transfer</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>InwardTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InwardTransferResponse> UpdateInwardTransferAsync(string fundsTransferId, InwardTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves inward funds transfer details</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InwardTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InwardTransfersResponse> GetInwardTransfersAsync(string debitAccountId, string creditAccountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create outward funds transfer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>OutwardTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardTransferResponse> CreateOutwardTransferAsync(OutwardTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update funds transfer details for a outward transfer</summary>
        /// <param name="fundsTransferId">Identifier of the Funds Transfer</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>OutwardTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardTransferResponse> UpdateOutwardTransferAsync(string fundsTransferId, OutwardTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outward funds transfer details</summary>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutwardTransfersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardTransfersResponse> GetOutwardTransfersAsync(string debitAccountId, string creditAccountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a funds transfer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountTransferResponse> CreateAccountTransferAsync(AccountTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update funds transfer details</summary>
        /// <param name="fundsTransferId">Identifier of the Funds Transfer</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountTransferResponse> UpdateAccountTransferAsync(string fundsTransferId, AccountTransfer payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel fund transfer request</summary>
        /// <param name="fundsTransferId">Identifier of the Funds Transfer</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountTransferResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountTransferResponse> DeleteAccountTransferAsync(string fundsTransferId, AccountTransferDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountTransfersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransfersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BulkTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BulkTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BulkTransfersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BulkTransfersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>InwardTransfer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransfer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InwardTransferBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransferBody 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string OrderingBank { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string OrderingCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>InwardTransferResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransferResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InwardTransferResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransferResponseBody 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? OrderingBank { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? OrderingCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>InwardTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InwardTransfersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardTransfersResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>OutwardTransfer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransfer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardTransferBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransferBody 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    /// <summary>OutwardTransferResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransferResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardTransferResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransferResponseBody 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    /// <summary>OutwardTransfersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransfersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardTransfersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardTransfersResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>AccountTransfer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransfer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountTransferBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransferBody 
    {
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerIds")]
        public System.Collections.Generic.ICollection<OrderingCustomerIds>? OrderingCustomerIds { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBanks")]
        public System.Collections.Generic.ICollection<OrderingBanks>? OrderingBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBanks")]
        public System.Collections.Generic.ICollection<BeneficiaryBanks>? BeneficiaryBanks { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryNames")]
        public System.Collections.Generic.ICollection<BeneficiaryNames>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses>? BeneficiaryAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressCities")]
        public System.Collections.Generic.ICollection<BeneficiaryAddressCities>? BeneficiaryAddressCities { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerIds")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerIds>? BeneficiaryCustomerIds { get; set; }= default!;
    
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDetails")]
        public System.Collections.Generic.ICollection<PaymentDetails>? PaymentDetails { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>Identifies the Commission Types which are applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CommissionType { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 22D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Reference for debit party of a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DebitReference { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? CreditReference { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Identifies the Negotiated Dealer Reference of the foreign exchange internal deal created to cover the exchange rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiatedDealerId")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? NegotiatedDealerId { get; set; }= default!;
    
        /// <summary>Cheque number associated with the transaction or accounting entry.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chequeNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChequeNumber { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerSpread { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Identifies the customer of profit and loss entries generated in relation to the current transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitCentreCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ProfitCentreCustomer { get; set; }= default!;
    
        /// <summary>Identifies the Account Officer or Department Code of Profit and Loss entries generated in relation to the current transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitCentreDepartment")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? ProfitCentreDepartment { get; set; }= default!;
    
        /// <summary>Contains the date from which the payment is expected and is used to indicate the exposure date for the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ClearingDate { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CashRoundType { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccountIBAN { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of receiver correspondent bank's account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiverCorrespondentAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ReceiverCorrespondentAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the intermediatory bank account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediatoryBankAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IntermediatoryBankAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the ordering customer account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of charge or commission account numbers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargeAccountIBAN { get; set; }= default!;
    
        /// <summary>Country of the beneficiary account number. For example: US, IN, EU</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? BeneficiaryCountryId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerRate { get; set; }= default!;
    
        /// <summary>The sort code or the national clearing code of the beneficiary bank. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankSortCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankSortCode { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountTransferResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransferResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountTransferResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransferResponseBody 
    {
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerIds")]
        public System.Collections.Generic.ICollection<OrderingCustomerIds2>? OrderingCustomerIds { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBanks")]
        public System.Collections.Generic.ICollection<OrderingBanks2>? OrderingBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks2>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBanks")]
        public System.Collections.Generic.ICollection<BeneficiaryBanks2>? BeneficiaryBanks { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryNames")]
        public System.Collections.Generic.ICollection<BeneficiaryNames2>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses2>? BeneficiaryAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressCities")]
        public System.Collections.Generic.ICollection<BeneficiaryAddressCities2>? BeneficiaryAddressCities { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerIds")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerIds2>? BeneficiaryCustomerIds { get; set; }= default!;
    
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDetails")]
        public System.Collections.Generic.ICollection<PaymentDetails2>? PaymentDetails { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>Identifies the Commission Types which are applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CommissionType { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 22D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Reference for debit party of a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DebitReference { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? CreditReference { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Identifies the Negotiated Dealer Reference of the foreign exchange internal deal created to cover the exchange rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiatedDealerId")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? NegotiatedDealerId { get; set; }= default!;
    
        /// <summary>Cheque number associated with the transaction or accounting entry.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chequeNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChequeNumber { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerSpread { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Identifies the customer of profit and loss entries generated in relation to the current transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitCentreCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ProfitCentreCustomer { get; set; }= default!;
    
        /// <summary>Identifies the Account Officer or Department Code of Profit and Loss entries generated in relation to the current transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitCentreDepartment")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? ProfitCentreDepartment { get; set; }= default!;
    
        /// <summary>Contains the date from which the payment is expected and is used to indicate the exposure date for the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ClearingDate { get; set; }= default!;
    
        /// <summary>Indicates the type of rounding to be applied for cash transactions of a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashRoundType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CashRoundType { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccountIBAN { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of receiver correspondent bank's account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiverCorrespondentAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ReceiverCorrespondentAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the intermediatory bank account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediatoryBankAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IntermediatoryBankAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the ordering customer account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of charge or commission account numbers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargeAccountIBAN { get; set; }= default!;
    
        /// <summary>Country of the beneficiary account number. For example: US, IN, EU</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? BeneficiaryCountryId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerRate { get; set; }= default!;
    
        /// <summary>The sort code or the national clearing code of the beneficiary bank. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankSortCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankSortCode { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountTransferDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransferDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>Identifies the Commission Types which are applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CommissionType { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 22D)]
        public double? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Identifier of the Bulk Transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkTransferId")]
        [System.ComponentModel.DataAnnotations.StringLength(55)]
        public string? BulkTransferId { get; set; }= default!;
    
        /// <summary>Identifier of the Funds Transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransferId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FundsTransferId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Identifier of the Funds Transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransferId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FundsTransferId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingBank { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Identifier of the Funds Transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundsTransferId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FundsTransferId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingCustomerIds 
    {
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingBanks 
    {
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryBanks 
    {
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryNames 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddressCities 
    {
        /// <summary>City of the beneficiary account. For example: London, Dallas etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressCity")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryAddressCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerIds 
    {
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentDetails 
    {
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingCustomerIds2 
    {
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingBanks2 
    {
        /// <summary>Bank which intiates the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks2 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryBanks2 
    {
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryNames2 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddressCities2 
    {
        /// <summary>City of the beneficiary account. For example: London, Dallas etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressCity")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? BeneficiaryAddressCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerIds2 
    {
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentDetails2 
    {
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016