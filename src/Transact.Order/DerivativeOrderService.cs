//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.DerivativeOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDerivativeOrderService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the over the counter derivative trades</summary>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="tradeType">The trade type</param>
        /// <param name="callOrPut">Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>OTCDerivativeOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OTCDerivativeOrdersResponse> GetOTCDerivativeOrdersAsync(string? instrumentId = null, string? tradeType = null, string? callOrPut = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the exchange traded derivative trades</summary>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="tradeType">The trade type</param>
        /// <param name="callOrPut">Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>ETDDerivativeOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETDDerivativeOrdersResponse> GetETDDerivativeOrdersAsync(string? instrumentId = null, string? tradeType = null, string? callOrPut = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the derivatives order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <returns>DerivativesOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DerivativesOrderResponse> CreateDerivativesOrderAsync(DerivativesOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the derivatives order</summary>
        /// <returns>DerivativesOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DerivativesOrderResponse> GetDerivativesOrderAsync(string deriviativeOrderId, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the derivatives order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <returns>DerivativesOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DerivativesOrderResponse> UpdateDerivativesOrderAsync(string deriviativeOrderId, DerivativesOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>OTCDerivativeOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OTCDerivativeOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OTCDerivativeOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OTCDerivativeOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ETDDerivativeOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ETDDerivativeOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ETDDerivativeOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ETDDerivativeOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>DerivativesOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DerivativesOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DerivativesOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DerivativesOrderBody 
    {
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        public System.Collections.Generic.ICollection<Customers>? Customers { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rates")]
        public System.Collections.Generic.ICollection<Rates>? Rates { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("closeout")]
        public System.Collections.Generic.ICollection<Closeout>? Closeout { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The stock exchange identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stockExchange")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StockExchange { get; set; }= default!;
    
        /// <summary>The order date of the instructions contained within the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OrderDate { get; set; }= default!;
    
        /// <summary>The time at which the order has been transacted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderedAt { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The price per unit of lot/lots traded. For option trades, it denotes the premium price in the trade currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceOrPremium")]
        public double? PriceOrPremium { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("strikePrice")]
        public double? StrikePrice { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; }= default!;
    
        /// <summary>Defines the limit type for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitType { get; set; }= default!;
    
        /// <summary>The Price at which the shares are to be bought or sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitPrice")]
        public double? LimitPrice { get; set; }= default!;
    
        /// <summary>The date the Limit order is valid until .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitDate { get; set; }= default!;
    
        /// <summary>Order type i.e.  single, if done, revolving and one cancels other.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        public double? BrokerId { get; set; }= default!;
    
        /// <summary>Determines whether the system will automatically process</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoOrManual")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoOrManual { get; set; }= default!;
    
        /// <summary>Defines whether the trade order is to be Closed or not. When set to CLOSE the order is considered as a square-off order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderToClose")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderToClose { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>DerivativesOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DerivativesOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DerivativesOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DerivativesOrderResponseBody 
    {
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        public System.Collections.Generic.ICollection<Customers2>? Customers { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rates")]
        public System.Collections.Generic.ICollection<Rates2>? Rates { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("closeout")]
        public System.Collections.Generic.ICollection<Closeout2>? Closeout { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The stock exchange identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stockExchange")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StockExchange { get; set; }= default!;
    
        /// <summary>The order date of the instructions contained within the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OrderDate { get; set; }= default!;
    
        /// <summary>The time at which the order has been transacted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderedAt { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The price per unit of lot/lots traded. For option trades, it denotes the premium price in the trade currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceOrPremium")]
        public double? PriceOrPremium { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("strikePrice")]
        public double? StrikePrice { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; }= default!;
    
        /// <summary>Defines the limit type for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitType { get; set; }= default!;
    
        /// <summary>The Price at which the shares are to be bought or sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitPrice")]
        public double? LimitPrice { get; set; }= default!;
    
        /// <summary>The date the Limit order is valid until .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitDate { get; set; }= default!;
    
        /// <summary>Order type i.e.  single, if done, revolving and one cancels other.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        public double? BrokerId { get; set; }= default!;
    
        /// <summary>Determines whether the system will automatically process</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoOrManual")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoOrManual { get; set; }= default!;
    
        /// <summary>Defines whether the trade order is to be Closed or not. When set to CLOSE the order is considered as a square-off order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderToClose")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderToClose { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        [System.Text.Json.Serialization.JsonPropertyName("inOrOutFlag")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InOrOutFlag { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("exoticType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExoticType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("underlying")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Underlying { get; set; }= default!;
    
        /// <summary>The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("strikePrice")]
        public string? StrikePrice { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("underlyingPrice")]
        public string? UnderlyingPrice { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("payoff")]
        public string? Payoff { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lots")]
        public string? Lots { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Buyer { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyerName { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("seller")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Seller { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public int? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public int? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("inOrOutFlag")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InOrOutFlag { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("exoticType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExoticType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("underlying")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Underlying { get; set; }= default!;
    
        /// <summary>The price at which the option holder has the right to buy (Call Options) or sell (Put Options) the underlying instrument, or to cash-settle the option if appropriate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("strikePrice")]
        public string? StrikePrice { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("underlyingPrice")]
        public string? UnderlyingPrice { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("payoff")]
        public string? Payoff { get; set; }= default!;
    
        /// <summary>Indicates whether the transaction is a call or put.  Allowed values: - CALL  - PUT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("callOrPut")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? CallOrPut { get; set; }= default!;
    
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lots")]
        public string? Lots { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Buyer { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyerName { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("seller")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Seller { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Customers 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lots")]
        public double? Lots { get; set; }= default!;
    
        /// <summary>Determines whether the system will automatically process</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoOrManual")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoOrManual { get; set; }= default!;
    
        /// <summary>The channel through which the transaction has been placed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionChannel { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions>? Commissions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Rates 
    {
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        public double? CommissionRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Closeout 
    {
        /// <summary>The identifier of the opposite Trade that closed out this trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeoutTrade")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CloseoutTrade { get; set; }= default!;
    
        /// <summary>The lots to be closed out for the trades provided.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeoutLots")]
        public double? CloseoutLots { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public int? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public int? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Customers2 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The number of lots/contracts traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lots")]
        public double? Lots { get; set; }= default!;
    
        /// <summary>Determines whether the system will automatically process</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoOrManual")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoOrManual { get; set; }= default!;
    
        /// <summary>The channel through which the transaction has been placed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionChannel { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions2>? Commissions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Rates2 
    {
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        public double? CommissionRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Closeout2 
    {
        /// <summary>The identifier of the opposite Trade that closed out this trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeoutTrade")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CloseoutTrade { get; set; }= default!;
    
        /// <summary>The lots to be closed out for the trades provided.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeoutLots")]
        public double? CloseoutLots { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The usable options for the override</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions 
    {
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        public double? CommissionRate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public double? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions2 
    {
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        public double? CommissionRate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public double? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016