//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.PositionTransferOrdersRequest
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPositionTransferOrdersRequestService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Position transfer order Initiation</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityPositionTransferOrdersInitiationResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityPositionTransferOrdersInitiationResponse> CreateSecurityPositionTransferOrdersInitiationAsync(SecurityPositionTransferOrdersInitiation payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Position transfer order Initiation</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityPositionTransferOrdersInitiationResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityPositionTransferOrdersInitiationResponse> UpdateSecurityPositionTransferOrdersInitiationAsync(string positionTransferOrderId, SecurityPositionTransferOrdersInitiation payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Position transfer order Initiation</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityPositionTransferOrdersInitiationResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityPositionTransferOrdersInitiationResponse> DeleteSecurityPositionTransferOrdersInitiationAsync(string positionTransferOrderId, SecurityPositionTransferOrdersInitiationDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve Position transfer order Initiation</summary>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PositionTransferRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityPositionTransferOrdersInitiationResponse> ApprovePositionTransferRequestAsync(string positionTransferOrderId, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityPositionTransferOrdersInitiation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositionTransferOrdersInitiation 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityPositionTransferOrdersInitiationBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositionTransferOrdersInitiationBody 
    {
        /// <summary>The instrument identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruments")]
        public System.Collections.Generic.ICollection<Instruments>? Instruments { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives>? Narratives { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("securityPositions")]
        public System.Collections.Generic.ICollection<SecurityPositions>? SecurityPositions { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Specifies the Security Account from which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromPortfolio")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string FromPortfolio { get; set; }= default!;
    
        /// <summary>Specifies the Depository from which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FromCustodian { get; set; }= default!;
    
        /// <summary>Nominee code from which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeFrom { get; set; }= default!;
    
        /// <summary>Sub account from which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromSubAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FromSubAccount { get; set; }= default!;
    
        /// <summary>Specifies the Security Account to which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toPortfolio")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string ToPortfolio { get; set; }= default!;
    
        /// <summary>Specifies the Depository to which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ToCustodian { get; set; }= default!;
    
        /// <summary>Nominee code to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeTo")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeTo { get; set; }= default!;
    
        /// <summary>Provides user the option of changing various details of the security position to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("selectMovements")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SelectMovements { get; set; }= default!;
    
        /// <summary>The maximum number of positions to be transferred using an online transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfPositions")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? NumberOfPositions { get; set; }= default!;
    
        /// <summary>Denotes that the transaction is being performed for transferring fund holdings</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundPosition")]
        public bool? FundPosition { get; set; }= default!;
    
        /// <summary>This field is used to determine whether the position transfer is for segregated account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("segregatedAccount")]
        public bool? SegregatedAccount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityPositionTransferOrdersInitiationResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositionTransferOrdersInitiationResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityPositionTransferOrdersInitiationResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositionTransferOrdersInitiationResponseBody 
    {
        /// <summary>The instrument identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruments")]
        public System.Collections.Generic.ICollection<Instruments2>? Instruments { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives2>? Narratives { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("securityPositions")]
        public System.Collections.Generic.ICollection<SecurityPositions2>? SecurityPositions { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Specifies the Security Account from which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string? FromPortfolio { get; set; }= default!;
    
        /// <summary>Specifies the Depository from which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FromCustodian { get; set; }= default!;
    
        /// <summary>Nominee code from which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeFrom { get; set; }= default!;
    
        /// <summary>Sub account from which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromSubAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FromSubAccount { get; set; }= default!;
    
        /// <summary>Specifies the Security Account to which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string? ToPortfolio { get; set; }= default!;
    
        /// <summary>Specifies the Depository to which the Transfer is to be made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ToCustodian { get; set; }= default!;
    
        /// <summary>Nominee code to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeTo")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeTo { get; set; }= default!;
    
        /// <summary>Provides user the option of changing various details of the security position to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("selectMovements")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SelectMovements { get; set; }= default!;
    
        /// <summary>The maximum number of positions to be transferred using an online transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfPositions")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? NumberOfPositions { get; set; }= default!;
    
        /// <summary>Denotes that the transaction is being performed for transferring fund holdings</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundPosition")]
        public bool? FundPosition { get; set; }= default!;
    
        /// <summary>This field is used to determine whether the position transfer is for segregated account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("segregatedAccount")]
        public bool? SegregatedAccount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityPositionTransferOrdersInitiationDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositionTransferOrdersInitiationDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instruments 
    {
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositions 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Nominee code to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeTo")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeTo { get; set; }= default!;
    
        /// <summary>Sub account to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toSubAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ToSubAccount { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>This is the Reference Currency of the Portfolio from where positions are being transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outReferenceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? OutReferenceCurrency { get; set; }= default!;
    
        /// <summary>This is the Reference Currency of the Portfolio to which the positions are being transferred to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inReferenceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InReferenceCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>Specifies the exchange rate applicable between the Local Currency and the Portfolio Reference Currency of the portfolio from where the position has been transferred out</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? OutExchangeRate { get; set; }= default!;
    
        /// <summary>Specifies the exchange rate applicable between the Local Currency and the Portfolio Reference Currency of the portfolio that the position has been transferred in to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? InExchangeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instruments2 
    {
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityPositions2 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Nominee code to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nomineeTo")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NomineeTo { get; set; }= default!;
    
        /// <summary>Sub account to which the positions are to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toSubAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ToSubAccount { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>This is the Reference Currency of the Portfolio from where positions are being transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outReferenceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? OutReferenceCurrency { get; set; }= default!;
    
        /// <summary>This is the Reference Currency of the Portfolio to which the positions are being transferred to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inReferenceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? InReferenceCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>Specifies the exchange rate applicable between the Local Currency and the Portfolio Reference Currency of the portfolio from where the position has been transferred out</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? OutExchangeRate { get; set; }= default!;
    
        /// <summary>Specifies the exchange rate applicable between the Local Currency and the Portfolio Reference Currency of the portfolio that the position has been transferred in to</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 20D)]
        public double? InExchangeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016