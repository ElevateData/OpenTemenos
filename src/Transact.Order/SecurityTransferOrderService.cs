//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.SecurityTransferOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISecurityTransferOrderService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the inbound security transfers</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>InboundSecurityTransferOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InboundSecurityTransferOrdersResponse> GetInboundSecurityTransferOrdersAsync(int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the outbound security transfers</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>OutboundSecurityTransferOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutboundSecurityTransferOrdersResponse> GetOutboundSecurityTransferOrdersAsync(int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a security transfer order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityTransferOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityTransferOrderResponse> CreateSecurityTransferOrderAsync(SecurityTransferOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the Security Transfer Order details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="depositoryId">Id of the securities depository.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityTransferOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityTransferOrdersResponse> GetSecurityTransferOrdersAsync(string securityTransferOrderId, string? customerId = null, string? instrumentId = null, string? depositoryId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the security transfer order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityTransferOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityTransferOrderResponse> UpdateSecurityTransferOrderAsync(string securityTransferOrderId, SecurityTransferOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a security transfer order draft</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityTransferDraftOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityTransferOrderResponse> CreateSecurityTransferDraftOrderAsync(SecurityTransferOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the security transfer request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityTransferRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityTransferRequestResponse> CreateSecurityTransferRequestAsync(SecurityTransferRequest payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>InboundSecurityTransferOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InboundSecurityTransferOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InboundSecurityTransferOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InboundSecurityTransferOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>OutboundSecurityTransferOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutboundSecurityTransferOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutboundSecurityTransferOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutboundSecurityTransferOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityTransferOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityTransferOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrderBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("taxes")]
        public System.Collections.Generic.ICollection<Taxes>? Taxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("capitalGainTaxes")]
        public System.Collections.Generic.ICollection<CapitalGainTaxes>? CapitalGainTaxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("taxesInTradeCurrency")]
        public System.Collections.Generic.ICollection<TaxesInTradeCurrency>? TaxesInTradeCurrency { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryInstruction { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total cost of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? GrossCost { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The charges or fees for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Charges { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("actualCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ActualCharges { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The accrued Interest due or accrued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? InterestAmount { get; set; }= default!;
    
        /// <summary>The net amount of the current valuation of the Securities being transferred, i.e.. the gross amount +/- Charges + accrued Interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates whether there is a beneficial owner change as a result of the transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("changeInBeneficialOwner")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChangeInBeneficialOwner { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StampTax { get; set; }= default!;
    
        /// <summary>The identifier of the counter party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CounterpartyId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BIC")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NostroId { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>Specifies the Depository(ies) that the Broker will be delivering the Securities from or to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyDepository")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CounterpartyDepository { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? BrokerAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityTransferOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityTransferOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrderResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("taxes")]
        public System.Collections.Generic.ICollection<Taxes2>? Taxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions2>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("capitalGainTaxes")]
        public System.Collections.Generic.ICollection<CapitalGainTaxes2>? CapitalGainTaxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("taxesInTradeCurrency")]
        public System.Collections.Generic.ICollection<TaxesInTradeCurrency2>? TaxesInTradeCurrency { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryInstruction { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total cost of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? GrossCost { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The charges or fees for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Charges { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("actualCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ActualCharges { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The accrued Interest due or accrued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? InterestAmount { get; set; }= default!;
    
        /// <summary>The net amount of the current valuation of the Securities being transferred, i.e.. the gross amount +/- Charges + accrued Interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates whether there is a beneficial owner change as a result of the transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("changeInBeneficialOwner")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChangeInBeneficialOwner { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StampTax { get; set; }= default!;
    
        /// <summary>The identifier of the counter party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CounterpartyId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BIC")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NostroId { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>Specifies the Depository(ies) that the Broker will be delivering the Securities from or to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyDepository")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CounterpartyDepository { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? BrokerAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityTransferRequest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferRequest 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityTransferRequestBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferRequestBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("taxes")]
        public System.Collections.Generic.ICollection<Taxes3>? Taxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions3>? Instructions { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryInstruction { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total cost of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? GrossCost { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The charges or fees for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("actualCharges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ActualCharges { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The accrued Interest due or accrued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? InterestAmount { get; set; }= default!;
    
        /// <summary>The net amount of the current valuation of the Securities being transferred, i.e.. the gross amount +/- Charges + accrued Interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates whether there is a beneficial owner change as a result of the transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("changeInBeneficialOwner")]
        public bool? ChangeInBeneficialOwner { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? StampTax { get; set; }= default!;
    
        /// <summary>The identifier of the counter party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CounterpartyId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BIC")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NostroId { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>Specifies the Depository(ies) that the Broker will be delivering the Securities from or to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyDepository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CounterpartyDepository { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityTransferRequestResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferRequestResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityTransferRequestResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferRequestResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("taxes")]
        public System.Collections.Generic.ICollection<Taxes4>? Taxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions4>? Instructions { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The transfer date of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransferDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryInstruction { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total cost of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? GrossCost { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The charges or fees for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("actualCharges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ActualCharges { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The accrued Interest due or accrued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? InterestAmount { get; set; }= default!;
    
        /// <summary>The net amount of the current valuation of the Securities being transferred, i.e.. the gross amount +/- Charges + accrued Interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInInstrumentCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>The name that is displayed for the commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommissionName { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates whether there is a beneficial owner change as a result of the transfer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("changeInBeneficialOwner")]
        public bool? ChangeInBeneficialOwner { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? StampTax { get; set; }= default!;
    
        /// <summary>The identifier of the counter party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CounterpartyId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BIC")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NostroId { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>Specifies the Depository(ies) that the Broker will be delivering the Securities from or to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyDepository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CounterpartyDepository { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityTransferOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityTransferOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityTransferOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; }= default!;
    
        /// <summary>The user identifier who input the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputter")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Inputter { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; }= default!;
    
        /// <summary>The user identifier who input the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputter")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Inputter { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Taxes 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CapitalGainTaxes 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxesInTradeCurrency 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The manually entered tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("manualTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ManualTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Taxes2 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions2 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CapitalGainTaxes2 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxesInTradeCurrency2 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The manually entered tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("manualTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ManualTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Taxes3 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions3 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Taxes4 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions4 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]
        public System.Collections.Generic.ICollection<DeliveryDetails>? DeliveryDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("matchCodeDetails")]
        public System.Collections.Generic.ICollection<MatchCodeDetails>? MatchCodeDetails { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; }= default!;
    
        /// <summary>The accrued Interest due or accrued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestAmount")]
        public string? InterestAmount { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        public string? Commission { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public string? TaxAmount { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        public string? NetAmount { get; set; }= default!;
    
        /// <summary>The charges or fees for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public string? Charges { get; set; }= default!;
    
        /// <summary>Contains the gross amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossAmount")]
        public string? GrossAmount { get; set; }= default!;
    
        /// <summary>Contains the sum of gross amount and interest accrued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossInterestAccrued")]
        public string? GrossInterestAccrued { get; set; }= default!;
    
        /// <summary>Contains the incoming MT544-547 Swift message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationKey")]
        public string? DepositoryConfirmationKey { get; set; }= default!;
    
        /// <summary>Contains the date and time of receipt of depository confirmation swift MT544-547</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationTime")]
        public string? DepositoryConfirmationTime { get; set; }= default!;
    
        /// <summary>Contains the swift message MT548 reference of the status of settlement Instruction sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementStatusKey")]
        public string? SettlementStatusKey { get; set; }= default!;
    
        /// <summary>Contains the date and time of receipt of swift message MT548 (Status of Settlement Instruction)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementStatusTime")]
        public string? SettlementStatusTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeliveryDetails 
    {
        /// <summary>Delivery instruction reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryKey { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        public string? MessageType { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DateTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MatchCodeDetails 
    {
        /// <summary>Defines the status of settlement instruction for the incoming MT548 swift message. Sample values are 1. MTCH/MACH 2. IPRC/PACK</summary>
        [System.Text.Json.Serialization.JsonPropertyName("matchCode")]
        public string? MatchCode { get; set; }= default!;
    
        /// <summary>Contains the description of the status of settlement Instruction.  Sample values are 1. Matched 2. Acknowledged/Accepted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("matchCodeDescription")]
        public string? MatchCodeDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016