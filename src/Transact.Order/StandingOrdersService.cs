//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.StandingOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IStandingOrdersService
    {
        /// <summary>Retrieves failed transactions of standing Instructions</summary>
        /// <param name="debitCustomerId">Debtor customer details</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FailedTransactionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FailedTransactionsResponse> GetFailedTransactionsAsync(string? debitCustomerId, string? debitAccountId, string? creditAccountId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves failed transactions of standing Instructions</summary>
        /// <param name="debitCustomerId">Debtor customer details</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FailedTransactionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FailedTransactionsResponse> GetFailedTransactionsAsync(string? debitCustomerId, string? debitAccountId, string? creditAccountId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves list of standing Instructions</summary>
        /// <param name="debitCustomerId">Debtor customer details</param>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>StandingOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrdersResponse> GetStandingOrdersAsync(string? debitCustomerId, string? standingOrderId, string? accountId, string? orderingCustomerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of standing Instructions</summary>
        /// <param name="debitCustomerId">Debtor customer details</param>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>StandingOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrdersResponse> GetStandingOrdersAsync(string? debitCustomerId, string? standingOrderId, string? accountId, string? orderingCustomerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> CreateStandingOrderAsync(string standingOrderId, StandingOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> CreateStandingOrderAsync(string standingOrderId, StandingOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> UpdateStandingOrderAsync(string standingOrderId, StandingOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> UpdateStandingOrderAsync(string standingOrderId, StandingOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Cancels a Standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> DeleteStandingOrderAsync(string standingOrderId, StandingOrderDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancels a Standing Instruction</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> DeleteStandingOrderAsync(string standingOrderId, StandingOrderDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Approves the standing Instruction request</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> ApproveStandingOrderAsync(string standingOrderId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approves the standing Instruction request</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> ApproveStandingOrderAsync(string standingOrderId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Rejects a standing Instruction request</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> RejectStandingOrderAsync(string standingOrderId, StandingOrderDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Rejects a standing Instruction request</summary>
        /// <param name="standingOrderId">The unique standing order identifier</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StandingOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StandingOrderResponse> RejectStandingOrderAsync(string standingOrderId, StandingOrderDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>FailedTransactionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FailedTransactionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FailedTransactionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FailedTransactionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>StandingOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public StandingOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>StandingOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public StandingOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrderBody 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryNames")]
        public System.Collections.Generic.ICollection<BeneficiaryNames>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames>? DisplayNames { get; set; }= default!;
    
        /// <summary>The name of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICNames")]
        public System.Collections.Generic.ICollection<BeneficiaryBICNames>? BeneficiaryBICNames { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides>? Overrides { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Indicates the current frequency of the standing order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? CurrentFrequency { get; set; }= default!;
    
        /// <summary>Identifies the current end date of the standing order for the currency, amount and frequency specified. When the bank has received from the customer clear instructions which stipulate that the standing order must  only be executed during a determined period of time.  This is the date of the last execution of the standing order or when the customer has requested the bank to pay a certain amount during a determined period of time and then another amount starting from that date. In this case, this field specifies the end date of the first standing order amount.  After that date the second amount will then be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentEndDate { get; set; }= default!;
    
        /// <summary>Flag to indicate that the standing order should execute until future notice, i.e. until an end date is provided.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("futureNotice")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? FutureNotice { get; set; }= default!;
    
        /// <summary>The identifier of the counter party's account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterPartyAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterPartyAccountId { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Specifies the frequency in which the payment application(periodic payments) execute the payment instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Frequency { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? BeneficiaryReference { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The sort code or the national clearing code of the beneficiary bank. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankSortCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankSortCode { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Beneficiary IBAN details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? BeneficiaryBICIBAN { get; set; }= default!;
    
        /// <summary>The city associated with beneficiary bank BIC (Bank Identifier Code)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICCity")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBICCity { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Indicates the date based on current frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequencyDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentFrequencyDate { get; set; }= default!;
    
        /// <summary>Indicates the name of payment order product </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductName")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? PaymentOrderProductName { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOurCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>The purpose code for the payment. Should be one of the pre-defined purpose codes in the application and information will be used for payment processing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCategory")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? PaymentCategory { get; set; }= default!;
    
        /// <summary>Payment processed by details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suppressFT")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? SuppressFT { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? CustomerSpread { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CustomerRate { get; set; }= default!;
    
        /// <summary>Specifies the payment order screen which will be used when executing standing instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderVersion")]
        [System.ComponentModel.DataAnnotations.StringLength(54)]
        public string? PaymentOrderVersion { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>StandingOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public StandingOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrderResponseBody 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryNames")]
        public System.Collections.Generic.ICollection<BeneficiaryNames2>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks2>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames2>? DisplayNames { get; set; }= default!;
    
        /// <summary>The name of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICNames")]
        public System.Collections.Generic.ICollection<BeneficiaryBICNames2>? BeneficiaryBICNames { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides2>? Overrides { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Indicates the current frequency of the standing order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? CurrentFrequency { get; set; }= default!;
    
        /// <summary>Identifies the current end date of the standing order for the currency, amount and frequency specified. When the bank has received from the customer clear instructions which stipulate that the standing order must  only be executed during a determined period of time.  This is the date of the last execution of the standing order or when the customer has requested the bank to pay a certain amount during a determined period of time and then another amount starting from that date. In this case, this field specifies the end date of the first standing order amount.  After that date the second amount will then be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentEndDate { get; set; }= default!;
    
        /// <summary>Flag to indicate that the standing order should execute until future notice, i.e. until an end date is provided.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("futureNotice")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? FutureNotice { get; set; }= default!;
    
        /// <summary>The identifier of the counter party's account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterPartyAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterPartyAccountId { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Specifies the frequency in which the payment application(periodic payments) execute the payment instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Frequency { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? BeneficiaryReference { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 18D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The sort code or the national clearing code of the beneficiary bank. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankSortCode")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankSortCode { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Beneficiary IBAN details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? BeneficiaryBICIBAN { get; set; }= default!;
    
        /// <summary>The city associated with beneficiary bank BIC (Bank Identifier Code)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICCity")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBICCity { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Indicates the date based on current frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequencyDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentFrequencyDate { get; set; }= default!;
    
        /// <summary>Indicates the name of payment order product </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductName")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? PaymentOrderProductName { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOurCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>The purpose code for the payment. Should be one of the pre-defined purpose codes in the application and information will be used for payment processing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCategory")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? PaymentCategory { get; set; }= default!;
    
        /// <summary>Payment processed by details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suppressFT")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? SuppressFT { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? CustomerSpread { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CustomerRate { get; set; }= default!;
    
        /// <summary>Specifies the payment order screen which will be used when executing standing instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderVersion")]
        [System.ComponentModel.DataAnnotations.StringLength(54)]
        public string? PaymentOrderVersion { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>StandingOrderDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class StandingOrderDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides3>? Overrides { get; set; }= default!;
    
        /// <summary>To identify the incoming SWIFT payment received direct from Delivery, payments generated by standing orders and local clearing payments.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inwardPaymentType")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? InwardPaymentType { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 36D)]
        public double? DebitAccountId { get; set; }= default!;
    
        /// <summary>Identifies title of the Debit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountName")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? DebitAccountName { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Account name details of the creditor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountName")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? CreditAccountName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames3>? DisplayNames { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks3>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>The unique standing order identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standingOrderId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StandingOrderId { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the frequency in which the payment application(periodic payments) execute the payment instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Frequency { get; set; }= default!;
    
        /// <summary>The identifier of the counter party's account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterPartyAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterPartyAccountId { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>This is used to specify a percentage value, which would be applied on the accounts excess amount(Accounts cleared balance - CURRENT.AMOUNT) to arrive at </summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageOverCurrentBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? PercentageOverCurrentBalance { get; set; }= default!;
    
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTo")]
        public string? PayTo { get; set; }= default!;
    
        /// <summary>Indicates the date based on current frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequencyDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentFrequencyDate { get; set; }= default!;
    
        /// <summary>Indicates the current frequency of the standing order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrentFrequency { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Identifies the current end date of the standing order for the currency, amount and frequency specified. When the bank has received from the customer clear instructions which stipulate that the standing order must  only be executed during a determined period of time.  This is the date of the last execution of the standing order or when the customer has requested the bank to pay a certain amount during a determined period of time and then another amount starting from that date. In this case, this field specifies the end date of the first standing order amount.  After that date the second amount will then be executed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentEndDate { get; set; }= default!;
    
        /// <summary>Flag to indicate that the standing order should execute until future notice, i.e. until an end date is provided.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("futureNotice")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? FutureNotice { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Account name details of the creditor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountName")]
        public string? CreditAccountName { get; set; }= default!;
    
        /// <summary>The sort code or the national clearing code of the beneficiary bank. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankSortCode")]
        public string? BankSortCode { get; set; }= default!;
    
        /// <summary>STO initiation start date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stoStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StoStartDate { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOurCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>Indicates the name of payment order product </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PaymentOrderProductName { get; set; }= default!;
    
        /// <summary>Country of the beneficiary account number. For example: US, IN, EU</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? BeneficiaryCountryId { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Display name or short name of the account specified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? AccountName { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryNames 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryBICNames 
    {
        /// <summary>The name of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBICName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryNames2 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks2 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames2 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryBICNames2 
    {
        /// <summary>The name of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBICName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBICName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides3 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames3 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks3 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016