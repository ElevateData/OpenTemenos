//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.PaymentOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPaymentOrdersService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve a list of Payment Orders</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="currentState">Contains the current state of the transaction</param>
        /// <param name="paymentStatus">Describes the current status of the payment order in the payment system</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="uniqueTransactionReference">Unique transaction reference details</param>
        /// <param name="executionDate">Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</param>
        /// <param name="bulkReference">Contains bulk master reference for the payment.</param>
        /// <param name="paymentSource">Indicates the source from where the payment is originated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersResponse> GetPaymentOrdersAsync(string? paymentOrderId = null, string? currentState = null, string? paymentStatus = null, string? paymentOrderProductId = null, string? debitAccountId = null, string? orderingCustomerId = null, string? uniqueTransactionReference = null, string? executionDate = null, string? bulkReference = null, string? paymentSource = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a new Payment Order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> CreatePaymentOrderAsync(PaymentOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a new instant Payment Order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>InstantPaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstantPaymentOrderResponse> CreateInstantPaymentOrderAsync(InstantPaymentOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reject an unauthorised Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalPaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalPaymentOrderResponse> CancelExternalPaymentOrderAsync(string paymentOrderId, ExternalPaymentOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Authorise a Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> ApprovePaymentOrderAsync(string paymentOrderId, PaymentOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Payment Order for a given ID</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="currentState">Contains the current state of the transaction</param>
        /// <param name="paymentStatus">Describes the current status of the payment order in the payment system</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="uniqueTransactionReference">Unique transaction reference details</param>
        /// <param name="executionDate">Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</param>
        /// <param name="bulkReference">Contains bulk master reference for the payment.</param>
        /// <param name="paymentSource">Indicates the source from where the payment is originated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersResponse> GetPaymentOrderAsync(string paymentOrderId, string? currentState = null, string? paymentStatus = null, string? paymentOrderProductId = null, string? debitAccountId = null, string? orderingCustomerId = null, string? uniqueTransactionReference = null, string? executionDate = null, string? bulkReference = null, string? paymentSource = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Amend an unathorised Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> UpdatePaymentOrderAsync(string paymentOrderId, PaymentOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> DeletePaymentOrderAsync(string paymentOrderId, PaymentOrderDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the status of an Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentSystemId">Payment system id details</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>TrackedPaymentOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrackedPaymentOrdersResponse> GetTrackedPaymentOrdersAsync(string? paymentOrderId = null, string? paymentSystemId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve GPI tracking information</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="paymentMethod">Method chosen to make the payment</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GpiPaymentTrackingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GpiPaymentTrackingResponse> GetGpiPaymentTrackingAsync(string? paymentId = null, string? paymentMethod = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the payments eligible for recall</summary>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrdersForRecallResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersForRecallResponse> GetPaymentOrdersForRecallAsync(string? orderingCustomerId = null, string? paymentOrderId = null, string? paymentOrderProductId = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the status of recall request</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrderRecallStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderRecallStatusResponse> GetPaymentOrderRecallStatusAsync(string? paymentOrderId = null, string? paymentOrderProductId = null, string? orderingCustomerId = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a reference and update GPI tracker status</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GPIPaymentStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GPIPaymentStatusResponse> CreateGPIPaymentStatusAsync(string paymentId, GPIPaymentStatus payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates GPI tracker status</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GPIPaymentStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GPIPaymentStatusResponse> UpdateGPIPaymentStatusAsync(string paymentId, GPIPaymentStatus payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives>? Narratives { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformations")]
        public System.Collections.Generic.ICollection<AdditionalInformations>? AdditionalInformations { get; set; }= default!;
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformations")]
        public System.Collections.Generic.ICollection<RemittanceInformations>? RemittanceInformations { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Indicates the authorised signatories for the payments. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("signatories")]
        public System.Collections.Generic.ICollection<Signatories>? Signatories { get; set; }= default!;
    
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReferences")]
        public System.Collections.Generic.ICollection<InvoiceReferences>? InvoiceReferences { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides>? Overrides { get; set; }= default!;
    
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reasons")]
        public System.Collections.Generic.ICollection<Reasons>? Reasons { get; set; }= default!;
    
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithInstitutionAddresses")]
        public System.Collections.Generic.ICollection<AccountWithInstitutionAddresses>? AccountWithInstitutionAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("orderingPostAddrLine")]
        public System.Collections.Generic.ICollection<OrderingPostAddrLine>? OrderingPostAddrLine { get; set; }= default!;
    
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextNames")]
        public System.Collections.Generic.ICollection<ContextNames>? ContextNames { get; set; }= default!;
    
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValues")]
        public System.Collections.Generic.ICollection<ContextValues>? ContextValues { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        public System.Collections.Generic.ICollection<MessageType>? MessageType { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>The currency of payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? PaymentCurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 19D)]
        public double Amount { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ForexSpread { get; set; }= default!;
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPaymentFxCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string? OrderingPaymentFxCustomerRate { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingPortfolio { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? CreditPortfolio { get; set; }= default!;
    
        /// <summary>The reference related to the ordering details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingReference { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargeBearer { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingChannel { get; set; }= default!;
    
        /// <summary>Contains description of the credit account reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCreditorReference")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredCreditorReference { get; set; }= default!;
    
        /// <summary>Creditor country code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? BeneficiaryCountryCode { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Purpose { get; set; }= default!;
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCommunicationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StructuredCommunicationCode { get; set; }= default!;
    
        /// <summary>Entity that assigns the identification</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredIssuer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredIssuer { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionIdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstructionIdReference { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("indicativeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? IndicativeRate { get; set; }= default!;
    
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? ChargeAccountId { get; set; }= default!;
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ChargeAccountCurrencyId { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PSDCompliant")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PSDCompliant { get; set; }= default!;
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TotalDebitAmount { get; set; }= default!;
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localInstrumentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LocalInstrumentCode { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkReference")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? BulkReference { get; set; }= default!;
    
        /// <summary>Identifier of the bulk update type record that holds default conditions required for Bulk Master creation. SINGLE and MULTI are two record references used by payment order application for processing payments induced through Bulk Master.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkTypeId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BulkTypeId { get; set; }= default!;
    
        /// <summary>Refers to view or cancel options.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? Action { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRemark")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CancelRemark { get; set; }= default!;
    
        /// <summary>Initiation of the payment time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initiationTime")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InitiationTime { get; set; }= default!;
    
        /// <summary>It indicates whether the payment was initiated by bank user, corporate or private client</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderInitiationType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? OrderInitiationType { get; set; }= default!;
    
        /// <summary>Contains phone number of the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryPhoneNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? BeneficiaryPhoneNumber { get; set; }= default!;
    
        /// <summary>Contains email id of the beneficary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryEmailId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? BeneficiaryEmailId { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? AccountWithBankCountryId { get; set; }= default!;
    
        /// <summary>It indicates the customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentRequestedForexCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? PaymentRequestedForexCustomerRate { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Requested amount for funds authorisation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? RequestedAmount { get; set; }= default!;
    
        /// <summary>The currency the amount is requested in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? RequestedCurrency { get; set; }= default!;
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preAuthorizationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PreAuthorizationReference { get; set; }= default!;
    
        /// <summary>Indicates source type to determine base amount. Possible values are BALANCE (base amount of a property), ACTIVITY ( transaction amount against an activity) or PROPERTY (this type is currently not supported)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceType")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? SourceType { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>Time when payment transaction was simulated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulatedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? SimulatedAt { get; set; }= default!;
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulationChecked")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? SimulationChecked { get; set; }= default!;
    
        /// <summary>Captures the AC.LOCKED.EVENTS id if in case the funds is available and reserved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedEventReference")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LockedEventReference { get; set; }= default!;
    
        /// <summary>Contains the payment order product which is referred during simulation from channels.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulationProduct")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? SimulationProduct { get; set; }= default!;
    
        /// <summary>Debtor agent details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorAgent")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DebtorAgent { get; set; }= default!;
    
        /// <summary>Contains the priority code of the payment message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messagePriority")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? MessagePriority { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Country { get; set; }= default!;
    
        /// <summary>BIC code of Intermediary Financial institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediaryFiBicCode")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? IntermediaryFiBicCode { get; set; }= default!;
    
        /// <summary>Routing number of Intermediary Financial institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediaryFiRoutingNo")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? IntermediaryFiRoutingNo { get; set; }= default!;
    
        /// <summary>Name or short title of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditorName")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CreditorName { get; set; }= default!;
    
        /// <summary>The  FX deal reference number. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexDealId")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ForexDealId { get; set; }= default!;
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InternalStatus { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("submitOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? SubmitOrder { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderResponseBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives2>? Narratives { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformations")]
        public System.Collections.Generic.ICollection<AdditionalInformations2>? AdditionalInformations { get; set; }= default!;
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformations")]
        public System.Collections.Generic.ICollection<RemittanceInformations2>? RemittanceInformations { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses2>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Indicates the authorised signatories for the payments. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("signatories")]
        public System.Collections.Generic.ICollection<Signatories2>? Signatories { get; set; }= default!;
    
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReferences")]
        public System.Collections.Generic.ICollection<InvoiceReferences2>? InvoiceReferences { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges2>? Charges { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides2>? Overrides { get; set; }= default!;
    
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reasons")]
        public System.Collections.Generic.ICollection<Reasons2>? Reasons { get; set; }= default!;
    
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithInstitutionAddresses")]
        public System.Collections.Generic.ICollection<AccountWithInstitutionAddresses2>? AccountWithInstitutionAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("orderingPostAddrLine")]
        public System.Collections.Generic.ICollection<OrderingPostAddrLine2>? OrderingPostAddrLine { get; set; }= default!;
    
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextNames")]
        public System.Collections.Generic.ICollection<ContextNames2>? ContextNames { get; set; }= default!;
    
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValues")]
        public System.Collections.Generic.ICollection<ContextValues2>? ContextValues { get; set; }= default!;
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        public System.Collections.Generic.ICollection<MessageType2>? MessageType { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccountIBAN { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>The currency of payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? PaymentCurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1D, 19D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ForexSpread { get; set; }= default!;
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPaymentFxCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string? OrderingPaymentFxCustomerRate { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingPortfolio { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? CreditPortfolio { get; set; }= default!;
    
        /// <summary>The reference related to the ordering details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingReference { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargeBearer { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingChannel { get; set; }= default!;
    
        /// <summary>Contains description of the credit account reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCreditorReference")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredCreditorReference { get; set; }= default!;
    
        /// <summary>Creditor country code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? BeneficiaryCountryCode { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Purpose { get; set; }= default!;
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCommunicationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StructuredCommunicationCode { get; set; }= default!;
    
        /// <summary>Entity that assigns the identification</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredIssuer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredIssuer { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionIdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstructionIdReference { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("indicativeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? IndicativeRate { get; set; }= default!;
    
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? ChargeAccountId { get; set; }= default!;
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ChargeAccountCurrencyId { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PSDCompliant")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PSDCompliant { get; set; }= default!;
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TotalDebitAmount { get; set; }= default!;
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localInstrumentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LocalInstrumentCode { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkReference")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? BulkReference { get; set; }= default!;
    
        /// <summary>Identifier of the bulk update type record that holds default conditions required for Bulk Master creation. SINGLE and MULTI are two record references used by payment order application for processing payments induced through Bulk Master.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkTypeId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BulkTypeId { get; set; }= default!;
    
        /// <summary>Refers to view or cancel options.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? Action { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRemark")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CancelRemark { get; set; }= default!;
    
        /// <summary>Initiation of the payment time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initiationTime")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InitiationTime { get; set; }= default!;
    
        /// <summary>It indicates whether the payment was initiated by bank user, corporate or private client</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderInitiationType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? OrderInitiationType { get; set; }= default!;
    
        /// <summary>Contains phone number of the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryPhoneNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? BeneficiaryPhoneNumber { get; set; }= default!;
    
        /// <summary>Contains email id of the beneficary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryEmailId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? BeneficiaryEmailId { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? AccountWithBankCountryId { get; set; }= default!;
    
        /// <summary>It indicates the customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentRequestedForexCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? PaymentRequestedForexCustomerRate { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Requested amount for funds authorisation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? RequestedAmount { get; set; }= default!;
    
        /// <summary>The currency the amount is requested in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? RequestedCurrency { get; set; }= default!;
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preAuthorizationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PreAuthorizationReference { get; set; }= default!;
    
        /// <summary>Indicates source type to determine base amount. Possible values are BALANCE (base amount of a property), ACTIVITY ( transaction amount against an activity) or PROPERTY (this type is currently not supported)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceType")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? SourceType { get; set; }= default!;
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cutOffTime")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CutOffTime { get; set; }= default!;
    
        /// <summary>Time when payment transaction was simulated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulatedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? SimulatedAt { get; set; }= default!;
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulationChecked")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? SimulationChecked { get; set; }= default!;
    
        /// <summary>Captures the AC.LOCKED.EVENTS id if in case the funds is available and reserved.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedEventReference")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LockedEventReference { get; set; }= default!;
    
        /// <summary>Contains the payment order product which is referred during simulation from channels.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulationProduct")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? SimulationProduct { get; set; }= default!;
    
        /// <summary>Debtor agent details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorAgent")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DebtorAgent { get; set; }= default!;
    
        /// <summary>Contains the priority code of the payment message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messagePriority")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? MessagePriority { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Country { get; set; }= default!;
    
        /// <summary>BIC code of Intermediary Financial institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediaryFiBicCode")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? IntermediaryFiBicCode { get; set; }= default!;
    
        /// <summary>Routing number of Intermediary Financial institution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("intermediaryFiRoutingNo")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? IntermediaryFiRoutingNo { get; set; }= default!;
    
        /// <summary>Name or short title of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditorName")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CreditorName { get; set; }= default!;
    
        /// <summary>The  FX deal reference number. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexDealId")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ForexDealId { get; set; }= default!;
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InternalStatus { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("submitOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? SubmitOrder { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>InstantPaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstantPaymentOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InstantPaymentOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstantPaymentOrderBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("benPostSwiftAddr")]
        public System.Collections.Generic.ICollection<BenPostSwiftAddr>? BenPostSwiftAddr { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benPostAddressLine")]
        public System.Collections.Generic.ICollection<BenPostAddressLine>? BenPostAddressLine { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInfo")]
        public System.Collections.Generic.ICollection<RemittanceInfo>? RemittanceInfo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("contextField")]
        public System.Collections.Generic.ICollection<ContextField>? ContextField { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("contextFieldValue")]
        public System.Collections.Generic.ICollection<ContextFieldValue>? ContextFieldValue { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeDetails")]
        public System.Collections.Generic.ICollection<ChargeDetails>? ChargeDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeInfo")]
        public System.Collections.Generic.ICollection<ChargeInfo>? ChargeInfo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmt")]
        public System.Collections.Generic.ICollection<ChargeAmt>? ChargeAmt { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurr")]
        public System.Collections.Generic.ICollection<ChargeCurr>? ChargeCurr { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountAmt")]
        public System.Collections.Generic.ICollection<ChargeAccountAmt>? ChargeAccountAmt { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAcc")]
        public System.Collections.Generic.ICollection<ChargeAcc>? ChargeAcc { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccCurr")]
        public System.Collections.Generic.ICollection<ChargeAccCurr>? ChargeAccCurr { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyDebitAccountId? DebitAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyDebitAccountIBAN? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyDebitCurrency? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyDebitAmount? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyDebitValueDate? DebitValueDate { get; set; }= default!;
    
        /// <summary>The currency the amount is requested in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyRequestedCurrency? RequestedCurrency { get; set; }= default!;
    
        /// <summary>Requested amount for funds authorisation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyRequestedAmount? RequestedAmount { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAccountType? AccountType { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerName? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerId? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Debit account customer address details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerAddress? OrderingCustomerAddress { get; set; }= default!;
    
        /// <summary>Contains the country of the ordering party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPartyCountry")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOrderingPartyCountry? OrderingPartyCountry { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryId? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryName? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryAccountId? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryIBAN? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryBIC? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Identifies the nature of the postal address, like primary, secondary or office address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("addressLocation")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAddressLocation? AddressLocation { get; set; }= default!;
    
        /// <summary>Contains the fax number of the beneficiary of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryFaxNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryFaxNumber? BeneficiaryFaxNumber { get; set; }= default!;
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryDetail? BeneficiaryDetail { get; set; }= default!;
    
        /// <summary>Creditor country code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryCountryCode? BeneficiaryCountryCode { get; set; }= default!;
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOtherIdType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryOtherIdType? BeneficiaryOtherIdType { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOtherId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryOtherId? BeneficiaryOtherId { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankBIC? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankIBAN? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankClearingCode? AccountWithBankClearingCode { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankCountryId? AccountWithBankCountryId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyTransactionAmount? TransactionAmount { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyPaymentCurrency? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyExecutionDate? ExecutionDate { get; set; }= default!;
    
        /// <summary>Contains the balance reservation reference received from channel or an external system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balanceReservationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyBalanceReservationReference? BalanceReservationReference { get; set; }= default!;
    
        /// <summary>Contains the original requested execution date of the payment as received from the initiating channel, indicating when the payment has to be processed by the payment system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalRequestedExecutionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOriginalRequestedExecutionDate? OriginalRequestedExecutionDate { get; set; }= default!;
    
        /// <summary>Contains the transaction date and time returned by the payer's payment system on submission of the payment transaction by the payer after the response to request to pay has triggerred a payment in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptanceDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyAcceptanceDateTime? AcceptanceDateTime { get; set; }= default!;
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("submitOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodySubmitOrder? SubmitOrder { get; set; }= default!;
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionIdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyInstructionIdReference? InstructionIdReference { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyEndToEndReference? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyPaymentOrderProductId? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PSDCompliant")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyPSDCompliant? PSDCompliant { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyCreditValueDate? CreditValueDate { get; set; }= default!;
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPaymentFxCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyOrderingPaymentFxCustomerRate? OrderingPaymentFxCustomerRate { get; set; }= default!;
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("indicativeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyIndicativeRate? IndicativeRate { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyChargeBearer? ChargeBearer { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyWaiveCharge? WaiveCharge { get; set; }= default!;
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyTotalDebitAmount? TotalDebitAmount { get; set; }= default!;
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyInstructedAmount? InstructedAmount { get; set; }= default!;
    
        /// <summary>Contains the actual debitor account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ultimateDebtor")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyUltimateDebtor? UltimateDebtor { get; set; }= default!;
    
        /// <summary>Contains the actual creditor account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ultimateCreditor")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? UltimateCreditor { get; set; }= default!;
    
        /// <summary>Address of the creditor or beneficiary account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditorAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyCreditorAddress? CreditorAddress { get; set; }= default!;
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyPurpose? Purpose { get; set; }= default!;
    
        /// <summary>Contains the proprietary underlying reason for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionPurpose")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyTransactionPurpose? TransactionPurpose { get; set; }= default!;
    
        /// <summary>Contains description of the credit account reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCreditorReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyStructuredCreditorReference? StructuredCreditorReference { get; set; }= default!;
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCommunicationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyStructuredCommunicationCode? StructuredCommunicationCode { get; set; }= default!;
    
        /// <summary>Entity that assigns the identification</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredIssuer")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyStructuredIssuer? StructuredIssuer { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyNarrative? Narrative { get; set; }= default!;
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preAuthorizationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderBodyPreAuthorizationReference? PreAuthorizationReference { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? BaseCurrency { get; set; }= default!;
    
    
    }
    
    /// <summary>InstantPaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstantPaymentOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InstantPaymentOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstantPaymentOrderResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("benPostSwiftAddr")]
        public System.Collections.Generic.ICollection<BenPostSwiftAddr2>? BenPostSwiftAddr { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("benPostAddressLine")]
        public System.Collections.Generic.ICollection<BenPostAddressLine2>? BenPostAddressLine { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInfo")]
        public System.Collections.Generic.ICollection<RemittanceInfo2>? RemittanceInfo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("contextField")]
        public System.Collections.Generic.ICollection<ContextField2>? ContextField { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("contextFieldValue")]
        public System.Collections.Generic.ICollection<ContextFieldValue2>? ContextFieldValue { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeDetails")]
        public System.Collections.Generic.ICollection<ChargeDetails2>? ChargeDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeInfo")]
        public System.Collections.Generic.ICollection<ChargeInfo2>? ChargeInfo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmt")]
        public System.Collections.Generic.ICollection<ChargeAmt2>? ChargeAmt { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurr")]
        public System.Collections.Generic.ICollection<ChargeCurr2>? ChargeCurr { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountAmt")]
        public System.Collections.Generic.ICollection<ChargeAccountAmt2>? ChargeAccountAmt { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAcc")]
        public System.Collections.Generic.ICollection<ChargeAcc2>? ChargeAcc { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccCurr")]
        public System.Collections.Generic.ICollection<ChargeAccCurr2>? ChargeAccCurr { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAccountId? DebitAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAccountIBAN? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitCurrency? DebitCurrency { get; set; }= default!;
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAmount? DebitAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitValueDate? DebitValueDate { get; set; }= default!;
    
        /// <summary>The currency the amount is requested in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyRequestedCurrency? RequestedCurrency { get; set; }= default!;
    
        /// <summary>Requested amount for funds authorisation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyRequestedAmount? RequestedAmount { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountType? AccountType { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerName? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerId? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Debit account customer address details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerAddress? OrderingCustomerAddress { get; set; }= default!;
    
        /// <summary>Contains the country of the ordering party</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPartyCountry")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingPartyCountry? OrderingPartyCountry { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryId? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryName? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryAccountId? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryIBAN? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryBIC? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Identifies the nature of the postal address, like primary, secondary or office address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("addressLocation")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAddressLocation? AddressLocation { get; set; }= default!;
    
        /// <summary>Contains the fax number of the beneficiary of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryFaxNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryFaxNumber? BeneficiaryFaxNumber { get; set; }= default!;
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryDetail? BeneficiaryDetail { get; set; }= default!;
    
        /// <summary>Creditor country code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryCountryCode? BeneficiaryCountryCode { get; set; }= default!;
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOtherIdType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryOtherIdType? BeneficiaryOtherIdType { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryOtherId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryOtherId? BeneficiaryOtherId { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankBIC? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankIBAN? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankClearingCode? AccountWithBankClearingCode { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankCountryId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankCountryId? AccountWithBankCountryId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyTransactionAmount? TransactionAmount { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyPaymentCurrency? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyExecutionDate? ExecutionDate { get; set; }= default!;
    
        /// <summary>Contains the balance reservation reference received from channel or an external system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balanceReservationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyBalanceReservationReference? BalanceReservationReference { get; set; }= default!;
    
        /// <summary>Contains the original requested execution date of the payment as received from the initiating channel, indicating when the payment has to be processed by the payment system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalRequestedExecutionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOriginalRequestedExecutionDate? OriginalRequestedExecutionDate { get; set; }= default!;
    
        /// <summary>Contains the transaction date and time returned by the payer's payment system on submission of the payment transaction by the payer after the response to request to pay has triggerred a payment in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acceptanceDateTime")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyAcceptanceDateTime? AcceptanceDateTime { get; set; }= default!;
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("submitOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodySubmitOrder? SubmitOrder { get; set; }= default!;
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionIdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyInstructionIdReference? InstructionIdReference { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyEndToEndReference? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyPaymentOrderProductId? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PSDCompliant")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyPSDCompliant? PSDCompliant { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyCreditValueDate? CreditValueDate { get; set; }= default!;
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPaymentFxCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingPaymentFxCustomerRate? OrderingPaymentFxCustomerRate { get; set; }= default!;
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("indicativeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyIndicativeRate? IndicativeRate { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyChargeBearer? ChargeBearer { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyWaiveCharge? WaiveCharge { get; set; }= default!;
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyTotalDebitAmount? TotalDebitAmount { get; set; }= default!;
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyInstructedAmount? InstructedAmount { get; set; }= default!;
    
        /// <summary>Contains the actual debitor account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ultimateDebtor")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyUltimateDebtor? UltimateDebtor { get; set; }= default!;
    
        /// <summary>Contains the actual creditor account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ultimateCreditor")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? UltimateCreditor { get; set; }= default!;
    
        /// <summary>Address of the creditor or beneficiary account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditorAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyCreditorAddress? CreditorAddress { get; set; }= default!;
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyPurpose? Purpose { get; set; }= default!;
    
        /// <summary>Contains the proprietary underlying reason for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionPurpose")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyTransactionPurpose? TransactionPurpose { get; set; }= default!;
    
        /// <summary>Contains description of the credit account reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCreditorReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredCreditorReference? StructuredCreditorReference { get; set; }= default!;
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCommunicationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredCommunicationCode? StructuredCommunicationCode { get; set; }= default!;
    
        /// <summary>Entity that assigns the identification</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredIssuer")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredIssuer? StructuredIssuer { get; set; }= default!;
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localInstrumentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyLocalInstrumentCode? LocalInstrumentCode { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyNarrative? Narrative { get; set; }= default!;
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simulationChecked")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodySimulationChecked? SimulationChecked { get; set; }= default!;
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preAuthorizationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InstantPaymentOrderResponseBodyPreAuthorizationReference? PreAuthorizationReference { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? BaseCurrency { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalPaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalPaymentOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalPaymentOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalPaymentOrderBody 
    {
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InternalStatus { get; set; }= default!;
    
        /// <summary>The reason for the cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancellationReason { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Remarks { get; set; }= default!;
    
        /// <summary>Initiator details of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initiator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Initiator { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalPaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalPaymentOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalPaymentOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalPaymentOrderResponseBody 
    {
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? InternalStatus { get; set; }= default!;
    
        /// <summary>The reason for the cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancellationReason { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Remarks { get; set; }= default!;
    
        /// <summary>Initiator details of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initiator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Initiator { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>TrackedPaymentOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TrackedPaymentOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public TrackedPaymentOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TrackedPaymentOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>GpiPaymentTrackingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GpiPaymentTrackingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GpiPaymentTrackingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GpiPaymentTrackingResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>PaymentOrdersForRecallResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrdersForRecallResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentOrdersForRecallResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrdersForRecallResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>PaymentOrderRecallStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderRecallStatusResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PaymentOrderRecallStatusResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentOrderRecallStatusResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>GPIPaymentStatus</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GPIPaymentStatus 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GPIPaymentStatusBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GPIPaymentStatusBody 
    {
        /// <summary>Unique transaction reference details for payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UETRId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? UETRId { get; set; }= default!;
    
        /// <summary>Payment reference details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PaymentReference { get; set; }= default!;
    
        /// <summary>User requested message details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? RequestMessage { get; set; }= default!;
    
        /// <summary>Message  from bank details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ResponseMessage { get; set; }= default!;
    
    
    }
    
    /// <summary>GPIPaymentStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GPIPaymentStatusResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GPIPaymentStatusResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GPIPaymentStatusResponseBody 
    {
        /// <summary>Unique transaction reference details for payments</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UETRId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? UETRId { get; set; }= default!;
    
        /// <summary>Payment reference details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PaymentReference { get; set; }= default!;
    
        /// <summary>User requested message details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? RequestMessage { get; set; }= default!;
    
        /// <summary>Message  from bank details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ResponseMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalInformations 
    {
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? AdditionalInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceInformations 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Signatories 
    {
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("signatory")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Signatory { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvoiceReferences 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InvoiceReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeName")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ChargeName { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 19D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? ChargeAccountCurrencyAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Reasons 
    {
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? Reason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithInstitutionAddresses 
    {
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithInstitutionAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? AccountWithInstitutionAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingPostAddrLine 
    {
        /// <summary>Debtor address details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? DebtorAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextNames 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextName")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ContextName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextValues 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValue")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ContextValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageType 
    {
        /// <summary>Indicates the supported message type to be received from the clearing house or the direct participant.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomingMessageType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? IncomingMessageType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalInformations2 
    {
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? AdditionalInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceInformations2 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Signatories2 
    {
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("signatory")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Signatory { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvoiceReferences2 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InvoiceReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges2 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeName")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ChargeName { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 19D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? ChargeAccountCurrencyAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Reasons2 
    {
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? Reason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithInstitutionAddresses2 
    {
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithInstitutionAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? AccountWithInstitutionAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OrderingPostAddrLine2 
    {
        /// <summary>Debtor address details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? DebtorAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextNames2 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextName")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ContextName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextValues2 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValue")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ContextValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageType2 
    {
        /// <summary>Indicates the supported message type to be received from the clearing house or the direct participant.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomingMessageType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? IncomingMessageType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Sum of all the debit transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debits")]
        public System.Collections.Generic.ICollection<Debits>? Debits { get; set; }= default!;
    
        /// <summary>Sum of all the credit transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("credits")]
        public System.Collections.Generic.ICollection<Credits>? Credits { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives3>? Narratives { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformations")]
        public System.Collections.Generic.ICollection<AdditionalInformations3>? AdditionalInformations { get; set; }= default!;
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformations")]
        public System.Collections.Generic.ICollection<RemittanceInformations3>? RemittanceInformations { get; set; }= default!;
    
        /// <summary>Beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries>? Beneficiaries { get; set; }= default!;
    
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReferences")]
        public System.Collections.Generic.ICollection<InvoiceReferences3>? InvoiceReferences { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges3>? Charges { get; set; }= default!;
    
        /// <summary>The unique reference number of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderId { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>The currency of payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? PaymentCurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexSpread")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ForexSpread { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion between ordering currency and payment currency in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ForexCustomerRate { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingPortfolio { get; set; }= default!;
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditPortfolio")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? CreditPortfolio { get; set; }= default!;
    
        /// <summary>The reference related to the ordering details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OrderingReference { get; set; }= default!;
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBearer")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargeBearer { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClearingChannel { get; set; }= default!;
    
        /// <summary>Contains description of the credit account reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCreditorReference")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredCreditorReference { get; set; }= default!;
    
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("signatory")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Signatory { get; set; }= default!;
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Purpose { get; set; }= default!;
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredCommunicationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StructuredCommunicationCode { get; set; }= default!;
    
        /// <summary>Entity that assigns the identification</summary>
        [System.Text.Json.Serialization.JsonPropertyName("structuredIssuer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? StructuredIssuer { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionIdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstructionIdReference { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentStatus { get; set; }= default!;
    
        /// <summary>This indicates the current status of payment order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? CurrentStatus { get; set; }= default!;
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InternalStatus { get; set; }= default!;
    
        /// <summary>The system application identifier that could be used as entry reference or used as prefix in unique transaction identifiers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SystemId { get; set; }= default!;
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("indicativeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? IndicativeRate { get; set; }= default!;
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PSDCompliant")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PSDCompliant { get; set; }= default!;
    
        /// <summary>This field to store the GPI status as received in gpi confirmation tracker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("GPIStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? GPIStatus { get; set; }= default!;
    
        /// <summary>Field store the date and time when the credit confirmation received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("GPICreditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? GPICreditValueDate { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectReasonCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RejectReasonCode { get; set; }= default!;
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulkReference")]
        [System.ComponentModel.DataAnnotations.StringLength(125)]
        public string? BulkReference { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelReason")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? CancelReason { get; set; }= default!;
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelRemark")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? CancelRemark { get; set; }= default!;
    
        /// <summary>Indicates the source from where the payment is originated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentSource")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PaymentSource { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenPostSwiftAddr 
    {
        /// <summary>Address of the beneficiary which will be included as part of outgoing payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiarySWIFTAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BenPostSwiftAddrBeneficiarySWIFTAddress? BeneficiarySWIFTAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenPostAddressLine 
    {
        /// <summary>Line 1 of address of beneficiary to whom the payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressLine1")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BenPostAddressLineBeneficiaryAddressLine1? BeneficiaryAddressLine1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceInfo 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RemittanceInformation? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextField 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContextFieldContextName? ContextName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextFieldValue 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValue")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContextFieldValueContextValue? ContextValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeDetails 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeDetailsChargeType? ChargeType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeInfo 
    {
        /// <summary>The description of the charge to be taken for payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeInfoChargeName? ChargeName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAmt 
    {
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAmtChargeAmount? ChargeAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeCurr 
    {
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeCurrency? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccountAmt 
    {
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAccountAmtChargeAccountCurrencyAmount? ChargeAccountCurrencyAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAcc 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAccountId? ChargeAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccCurr 
    {
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAccCurrChargeAccountCurrencyId? ChargeAccountCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account")]
        Debit_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAccountIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account IBAN")]
        Debit_Account_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Currency")]
        Debit_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Amount")]
        Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Value Date")]
        Debit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyRequestedCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Currency")]
        Requested_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyRequestedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Amount")]
        Requested_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Account Type")]
        Account_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Name")]
        Ordering_Customer_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Id")]
        Ordering_Customer_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Address")]
        Ordering_Customer_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingPartyCountry
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Party Country")]
        Ordering_Party_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Id")]
        Beneficiary_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Name")]
        Beneficiary_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Account Id")]
        Beneficiary_Account_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary IBAN")]
        Beneficiary_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary BIC")]
        Beneficiary_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAddressLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Address Type")]
        Beneficiary_Address_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryFaxNumber
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Fax Detail")]
        Beneficiary_Country_Fax_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryDetail
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Other Detail")]
        Beneficiary_Country_Other_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryCountryCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Code")]
        Beneficiary_Country_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryOtherIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID Type")]
        Beneficiary_Other_ID_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryOtherId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID")]
        Beneficiary_Other_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent BIC")]
        Creditor_Agent_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Identifier")]
        Creditor_Agent_Identifier = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankClearingCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent National Code")]
        Creditor_Agent_National_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankCountryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Country")]
        Creditor_Agent_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyTransactionAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Amount")]
        Payment_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyPaymentCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Currency")]
        Payment_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Execution Date")]
        Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyBalanceReservationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Locked Event ID")]
        Locked_Event_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOriginalRequestedExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Original Req Execution Date")]
        Original_Req_Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyAcceptanceDateTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Acceptance Date Time")]
        Acceptance_Date_Time = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodySubmitOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submit Order")]
        Submit_Order = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyInstructionIdReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instruction Identification")]
        Instruction_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyEndToEndReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"End to End Identification")]
        End_to_End_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyPaymentOrderProductId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Order Product Id")]
        Payment_Order_Product_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyPSDCompliant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PSD Compliant")]
        PSD_Compliant = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyCreditValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Value Date")]
        Credit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingPaymentFxCustomerRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Payment Fx Cust Rate")]
        Ordering_Payment_Fx_Cust_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyIndicativeRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Indicative Rate")]
        Indicative_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyChargeBearer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Bearer")]
        Charge_Bearer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyWaiveCharge
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waive Charge")]
        Waive_Charge = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyTotalDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Total Debit Amount")]
        Total_Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyInstructedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instructed Amount")]
        Instructed_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyUltimateDebtor
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultimateDebtor")]
        UltimateDebtor = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyCreditorAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Address")]
        Creditor_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purpose")]
        Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyTransactionPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Transaction Purpose")]
        Transaction_Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredCreditorReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"structured Creditor Reference")]
        Structured_Creditor_Reference = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredCommunicationCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Communication Code")]
        Structured_Communication_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredIssuer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Issuer")]
        Structured_Issuer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Narrative")]
        Narrative = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderBodyPreAuthorizationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Authorization Number")]
        PreAuthorization_Number = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenPostSwiftAddr2 
    {
        /// <summary>Address of the beneficiary which will be included as part of outgoing payment instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiarySWIFTAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BenPostSwiftAddr2BeneficiarySWIFTAddress? BeneficiarySWIFTAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BenPostAddressLine2 
    {
        /// <summary>Line 1 of address of beneficiary to whom the payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddressLine1")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BenPostAddressLine2BeneficiaryAddressLine1? BeneficiaryAddressLine1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceInfo2 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RemittanceInfo2RemittanceInformation? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextField2 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContextField2ContextName? ContextName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContextFieldValue2 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contextValue")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContextFieldValue2ContextValue? ContextValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeDetails2 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeDetails2ChargeType? ChargeType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeInfo2 
    {
        /// <summary>The description of the charge to be taken for payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeName")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeInfo2ChargeName? ChargeName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAmt2 
    {
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAmt2ChargeAmount? ChargeAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeCurr2 
    {
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeCurr2ChargeCurrency? ChargeCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccountAmt2 
    {
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAccountAmt2ChargeAccountCurrencyAmount? ChargeAccountCurrencyAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAcc2 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAcc2ChargeAccountId? ChargeAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccCurr2 
    {
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ChargeAccCurr2ChargeAccountCurrencyId? ChargeAccountCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account")]
        Debit_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAccountIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account IBAN")]
        Debit_Account_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Currency")]
        Debit_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Amount")]
        Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Value Date")]
        Debit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyRequestedCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Currency")]
        Requested_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyRequestedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Amount")]
        Requested_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Account Type")]
        Account_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Name")]
        Ordering_Customer_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Id")]
        Ordering_Customer_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Address")]
        Ordering_Customer_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingPartyCountry
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Party Country")]
        Ordering_Party_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Id")]
        Beneficiary_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Name")]
        Beneficiary_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Account Id")]
        Beneficiary_Account_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary IBAN")]
        Beneficiary_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary BIC")]
        Beneficiary_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAddressLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Address Type")]
        Beneficiary_Address_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryFaxNumber
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Fax Detail")]
        Beneficiary_Country_Fax_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryDetail
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Other Detail")]
        Beneficiary_Country_Other_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryCountryCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Code")]
        Beneficiary_Country_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryOtherIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID Type")]
        Beneficiary_Other_ID_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryOtherId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID")]
        Beneficiary_Other_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent BIC")]
        Creditor_Agent_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Identifier")]
        Creditor_Agent_Identifier = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankClearingCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent National Code")]
        Creditor_Agent_National_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankCountryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Country")]
        Creditor_Agent_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTransactionAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Amount")]
        Payment_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPaymentCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Currency")]
        Payment_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Execution Date")]
        Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBalanceReservationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Locked Event ID")]
        Locked_Event_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOriginalRequestedExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Original Req Execution Date")]
        Original_Req_Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAcceptanceDateTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Acceptance Date Time")]
        Acceptance_Date_Time = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodySubmitOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submit Order")]
        Submit_Order = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyInstructionIdReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instruction Identification")]
        Instruction_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyEndToEndReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"End to End Identification")]
        End_to_End_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPaymentOrderProductId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Order Product Id")]
        Payment_Order_Product_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPSDCompliant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PSD Compliant")]
        PSD_Compliant = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyCreditValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Value Date")]
        Credit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingPaymentFxCustomerRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Payment Fx Cust Rate")]
        Ordering_Payment_Fx_Cust_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyIndicativeRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Indicative Rate")]
        Indicative_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyChargeBearer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Bearer")]
        Charge_Bearer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyWaiveCharge
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waive Charge")]
        Waive_Charge = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTotalDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Total Debit Amount")]
        Total_Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyInstructedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instructed Amount")]
        Instructed_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyUltimateDebtor
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultimateDebtor")]
        UltimateDebtor = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyCreditorAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Address")]
        Creditor_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purpose")]
        Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTransactionPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Transaction Purpose")]
        Transaction_Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredCreditorReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"structured Creditor Reference")]
        Structured_Creditor_Reference = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredCommunicationCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Communication Code")]
        Structured_Communication_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredIssuer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Issuer")]
        Structured_Issuer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyLocalInstrumentCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"local Instrument Code")]
        Local_Instrument_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Narrative")]
        Narrative = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodySimulationChecked
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Simulation Checked")]
        Simulation_Checked = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPreAuthorizationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Authorization Number")]
        PreAuthorization_Number = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The unique reference number of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderId { get; set; }= default!;
    
        /// <summary>Payment system id details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentSystemId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentSystemId { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExecutionDate { get; set; }= default!;
    
        /// <summary> Identifier of the debitAccounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccount { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Indicates the payment amount for the defined term, amount and payment frequency. It will include principal, charge and interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentAmount { get; set; }= default!;
    
        /// <summary>Bank for the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBank { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Contains the current state of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentState")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrentState { get; set; }= default!;
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentStatus { get; set; }= default!;
    
        /// <summary>Indicates the recall status of the payment for which the recall has been initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recallStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecallStatus { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("transactionDetails")]
        public System.Collections.Generic.ICollection<TransactionDetails>? TransactionDetails { get; set; }= default!;
    
        /// <summary>Unique transaction reference details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueTransactionReference")]
        public string? UniqueTransactionReference { get; set; }= default!;
    
        /// <summary>Payment system id details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentSystemId")]
        public string? PaymentSystemId { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Indicates the direction of payment i.e. incoming, outgoing, book or redirect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentDirection")]
        public string? PaymentDirection { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructedAmount")]
        public string? InstructedAmount { get; set; }= default!;
    
        /// <summary>Instructed currency code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructedCurrencyCode")]
        public string? InstructedCurrencyCode { get; set; }= default!;
    
        /// <summary>Payment completion time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("completionTime")]
        public string? CompletionTime { get; set; }= default!;
    
        /// <summary>Initiation of the payment time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initiationTime")]
        public string? InitiationTime { get; set; }= default!;
    
        /// <summary>Confirmed amount details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmedAmount")]
        public string? ConfirmedAmount { get; set; }= default!;
    
        /// <summary>Confirmed amount currency details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmedAmountCurrency")]
        public string? ConfirmedAmountCurrency { get; set; }= default!;
    
        /// <summary>Total amount details of payment inclusive of charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalChargeAmount")]
        public string? FinalChargeAmount { get; set; }= default!;
    
        /// <summary>Transaction event type details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionEventType")]
        public string? TransactionEventType { get; set; }= default!;
    
        /// <summary>Debtor agent details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorAgent")]
        public string? DebtorAgent { get; set; }= default!;
    
        /// <summary>Payment total duration details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDuration")]
        public string? TotalDuration { get; set; }= default!;
    
        /// <summary>Overall status code details of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overallStatusCode")]
        public string? OverallStatusCode { get; set; }= default!;
    
        /// <summary>Debtor company name details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCompanyName")]
        public string? PartyCompanyName { get; set; }= default!;
    
        /// <summary>Debtor company BIC details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCompanyBIC")]
        public string? PartyCompanyBIC { get; set; }= default!;
    
        /// <summary>Debtor company flag details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCompanyFlag")]
        public string? PartyCompanyFlag { get; set; }= default!;
    
        /// <summary>Debtor country name details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCountryName")]
        public string? PartyCountryName { get; set; }= default!;
    
        /// <summary>Debtor creation time details of the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCreationTime")]
        public string? PartyCreationTime { get; set; }= default!;
    
        /// <summary>Debtor payment reference details of outgoing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partySendersReferenceOutgoing")]
        public string? PartySendersReferenceOutgoing { get; set; }= default!;
    
        /// <summary>Debtor payment reference details of incoming</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partySendersReferenceIncoming")]
        public string? PartySendersReferenceIncoming { get; set; }= default!;
    
        /// <summary>Creditor company name details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCompanyName")]
        public string? BeneficiaryCompanyName { get; set; }= default!;
    
        /// <summary>Creditor company BIC details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCompanyBIC")]
        public string? BeneficiaryCompanyBIC { get; set; }= default!;
    
        /// <summary>Creditor company flag details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCompanyFlag")]
        public string? BeneficiaryCompanyFlag { get; set; }= default!;
    
        /// <summary>Creditor country name details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryName")]
        public string? BeneficiaryCountryName { get; set; }= default!;
    
        /// <summary>Creditor payment received date time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryReceivedDateTime")]
        public string? BeneficiaryReceivedDateTime { get; set; }= default!;
    
        /// <summary>Creditor payment completion time details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCompletionTime")]
        public string? BeneficiaryCompletionTime { get; set; }= default!;
    
        /// <summary>Payment deduction details for creditor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryDeducts")]
        public string? BeneficiaryDeducts { get; set; }= default!;
    
        /// <summary>Payment total duration details for receiver</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryTotalDuration")]
        public string? BeneficiaryTotalDuration { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>The unique reference number of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderId { get; set; }= default!;
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderProductId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderProductId { get; set; }= default!;
    
        /// <summary>An external reference id for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RelatedReference { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Bank Identifier Code (BIC) of the Beneficiary bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bicId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BicId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(71)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Indicates the payment amount for the defined term, amount and payment frequency. It will include principal, charge and interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? PaymentAmount { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? CreditValueDate { get; set; }= default!;
    
        /// <summary>Clearing channel specific details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearingId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ClearingId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>The unique reference number of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentOrderId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderId { get; set; }= default!;
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OrderingCustomerId { get; set; }= default!;
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderingCustomerName")]
        public string? OrderingCustomerName { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("executionDate")]
        public string? ExecutionDate { get; set; }= default!;
    
        /// <summary>The system application identifier that could be used as entry reference or used as prefix in unique transaction identifiers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        public string? SystemId { get; set; }= default!;
    
        /// <summary>Indicates the recall status of the payment for which the recall has been initiated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recallStatus")]
        public string? RecallStatus { get; set; }= default!;
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rejectReasonCode")]
        public string? RejectReasonCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Debits 
    {
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitAccountIBAN { get; set; }= default!;
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DebitCurrency { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? TotalDebitAmount { get; set; }= default!;
    
        /// <summary>Display name or short name of the account specified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string? AccountName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Credits 
    {
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditAccountIBAN { get; set; }= default!;
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requiredCreditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }= default!;
    
        /// <summary>Account name details of the creditor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountName")]
        public string? CreditAccountName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives3 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalInformations3 
    {
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? AdditionalInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceInformations3 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(71)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>Creditor country code details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCountryCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? BeneficiaryCountryCode { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvoiceReferences3 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [System.Text.Json.Serialization.JsonPropertyName("invoiceReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InvoiceReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges3 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? ChargeAccountId { get; set; }= default!;
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ChargeAccountCurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeName")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ChargeName { get; set; }= default!;
    
        /// <summary>Specifies the currency of the charge amount. Allowed only when a charge amount is specified </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ChargeCurrencyId { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountCurrencyAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ChargeAccountCurrencyAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum BenPostSwiftAddrBeneficiarySWIFTAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Swift Address")]
        Beneficiary_Swift_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum BenPostAddressLineBeneficiaryAddressLine1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary ISO Address Line")]
        Beneficiary_ISO_Address_Line = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RemittanceInformation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Details")]
        Payment_Details = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ContextFieldContextName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Name")]
        Context_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ContextFieldValueContextValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Value")]
        Context_Value = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeDetailsChargeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Type")]
        Charge_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeInfoChargeName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Description")]
        Charge_Description = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAmtChargeAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Amount")]
        Charge_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Currency")]
        Charge_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAccountAmtChargeAccountCurrencyAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge AC Currency Amount")]
        Charge_AC_Currency_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account")]
        Charge_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAccCurrChargeAccountCurrencyId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account Currency")]
        Charge_Account_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum BenPostSwiftAddr2BeneficiarySWIFTAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Swift Address")]
        Beneficiary_Swift_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum BenPostAddressLine2BeneficiaryAddressLine1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary ISO Address Line")]
        Beneficiary_ISO_Address_Line = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum RemittanceInfo2RemittanceInformation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Details")]
        Payment_Details = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ContextField2ContextName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Name")]
        Context_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ContextFieldValue2ContextValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Value")]
        Context_Value = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeDetails2ChargeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Type")]
        Charge_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeInfo2ChargeName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Description")]
        Charge_Description = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAmt2ChargeAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Amount")]
        Charge_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeCurr2ChargeCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Currency")]
        Charge_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAccountAmt2ChargeAccountCurrencyAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge AC Currency Amount")]
        Charge_AC_Currency_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAcc2ChargeAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account")]
        Charge_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ChargeAccCurr2ChargeAccountCurrencyId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account Currency")]
        Charge_Account_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TransactionDetails 
    {
        /// <summary>Message name identification details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageNameIdentification")]
        public string? MessageNameIdentification { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016