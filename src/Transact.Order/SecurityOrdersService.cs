//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.SecurityOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISecurityOrdersService
    {
        /// <summary>Creates a security order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateSecurityOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a security order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateSecurityOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the security order</summary>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> GetSecurityOrderAsync(string securityOrderId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the security order</summary>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> GetSecurityOrderAsync(string securityOrderId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates the security order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> UpdateSecurityOrderAsync(string securityOrderId, SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the security order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SecurityOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> UpdateSecurityOrderAsync(string securityOrderId, SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Estimated Periodic Fees and charges for the deal</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="depositoryId">Id of the securities depository.</param>
        /// <param name="tradeCurrency">The trade currency is the settlement currency for the trade</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="price">The Price at which the nominal amount of the Security is to be valued for the transaction.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicFeeEstimatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicFeeEstimatesResponse> GetPeriodicFeeEstimatesAsync(string customerId, string portfolioId, string instrumentId, string? depositoryId, string tradeCurrency, string quantity, string amount, string? price, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Estimated Periodic Fees and charges for the deal</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="depositoryId">Id of the securities depository.</param>
        /// <param name="tradeCurrency">The trade currency is the settlement currency for the trade</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="price">The Price at which the nominal amount of the Security is to be valued for the transaction.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PeriodicFeeEstimatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PeriodicFeeEstimatesResponse> GetPeriodicFeeEstimatesAsync(string customerId, string portfolioId, string instrumentId, string? depositoryId, string tradeCurrency, string quantity, string amount, string? price, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a stop price order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StopPriceOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateStopPriceOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a stop price order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StopPriceOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateStopPriceOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a stop price limit order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StopPriceLimitOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateStopPriceLimitOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a stop price limit order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>StopPriceLimitOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityOrderResponse> CreateStopPriceLimitOrderAsync(SecurityOrder payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityOrderBody 
    {
        /// <summary>Broker involved in the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokers")]
        public System.Collections.Generic.ICollection<Brokers>? Brokers { get; set; }= default!;
    
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        public System.Collections.Generic.ICollection<Customers>? Customers { get; set; }= default!;
    
        /// <summary>The channel through which the transaction has been placed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionChannel { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The stock exchange identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stockExchange")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StockExchange { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The order date of the instructions contained within the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OrderDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The time at which the order has been transacted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderedAt { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The trade type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeType { get; set; }= default!;
    
        /// <summary>If the switch is within same fund house(intra) or between fund houses</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchMethod { get; set; }= default!;
    
        /// <summary>Mode of the switch order (Unit / Percentage / Amount)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchSpecification")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchSpecification { get; set; }= default!;
    
        /// <summary>Indicates if this is the Master Order for Switch orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("masterOrderOfSwitch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MasterOrderOfSwitch { get; set; }= default!;
    
        /// <summary>The field will hold a common reference to link a set of switch orders.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commonSwitchRef")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommonSwitchRef { get; set; }= default!;
    
        /// <summary>Number of Orders in a Switch Order combination</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noOfSwitchOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NoOfSwitchOrder { get; set; }= default!;
    
        /// <summary>The thread key for an order created by a service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("threadKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ThreadKey { get; set; }= default!;
    
        /// <summary>Current Market Price of the Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? MarketPrice { get; set; }= default!;
    
        /// <summary>The Price at which the shares are to be bought or sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? LimitPrice { get; set; }= default!;
    
        /// <summary>Defines the limit type for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitType { get; set; }= default!;
    
        /// <summary>This field specifies the validity of the Limit, i.e. how long is it to remain in force</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitExpiryDate { get; set; }= default!;
    
        /// <summary>Indicate If this is an odd lot order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fractionalOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FractionalOrder { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Optional free text field to capture any narrative for the account officer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frontOfficeInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FrontOfficeInstructions { get; set; }= default!;
    
        /// <summary>The order value (Nominal x Price ) for each customer in the security currency. If a limit price is input and transaction code is debit, lower price among market and limit price is used for sell and higher price is used for buy. If transaction code is credit, then lowest is used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("approximateSettlementAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ApproximateSettlementAmount { get; set; }= default!;
    
        /// <summary>This Field is to determine whether the order is a parent order, Allowed value is YES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Parent { get; set; }= default!;
    
        /// <summary>The parent reference that is common for both parent and child orders and will serve as a link.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ParentReference { get; set; }= default!;
    
        /// <summary>The status of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DealStatus { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityOrderResponseBody 
    {
        /// <summary>Broker involved in the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokers")]
        public System.Collections.Generic.ICollection<Brokers2>? Brokers { get; set; }= default!;
    
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        public System.Collections.Generic.ICollection<Customers2>? Customers { get; set; }= default!;
    
        /// <summary>The channel through which the transaction has been placed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionChannel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionChannel { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The stock exchange identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stockExchange")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StockExchange { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The order date of the instructions contained within the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OrderDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The time at which the order has been transacted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderedAt")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderedAt { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The trade type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeType { get; set; }= default!;
    
        /// <summary>If the switch is within same fund house(intra) or between fund houses</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchMethod { get; set; }= default!;
    
        /// <summary>Mode of the switch order (Unit / Percentage / Amount)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchSpecification")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchSpecification { get; set; }= default!;
    
        /// <summary>Indicates if this is the Master Order for Switch orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("masterOrderOfSwitch")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MasterOrderOfSwitch { get; set; }= default!;
    
        /// <summary>The field will hold a common reference to link a set of switch orders.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commonSwitchRef")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CommonSwitchRef { get; set; }= default!;
    
        /// <summary>Number of Orders in a Switch Order combination</summary>
        [System.Text.Json.Serialization.JsonPropertyName("noOfSwitchOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? NoOfSwitchOrder { get; set; }= default!;
    
        /// <summary>The thread key for an order created by a service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("threadKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ThreadKey { get; set; }= default!;
    
        /// <summary>Current Market Price of the Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? MarketPrice { get; set; }= default!;
    
        /// <summary>The Price at which the shares are to be bought or sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? LimitPrice { get; set; }= default!;
    
        /// <summary>Defines the limit type for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitType { get; set; }= default!;
    
        /// <summary>This field specifies the validity of the Limit, i.e. how long is it to remain in force</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitExpiryDate { get; set; }= default!;
    
        /// <summary>Indicate If this is an odd lot order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fractionalOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FractionalOrder { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryId { get; set; }= default!;
    
        /// <summary>Optional free text field to capture any narrative for the account officer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frontOfficeInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? FrontOfficeInstructions { get; set; }= default!;
    
        /// <summary>The order value (Nominal x Price ) for each customer in the security currency. If a limit price is input and transaction code is debit, lower price among market and limit price is used for sell and higher price is used for buy. If transaction code is credit, then lowest is used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("approximateSettlementAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ApproximateSettlementAmount { get; set; }= default!;
    
        /// <summary>This Field is to determine whether the order is a parent order, Allowed value is YES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Parent { get; set; }= default!;
    
        /// <summary>The parent reference that is common for both parent and child orders and will serve as a link.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ParentReference { get; set; }= default!;
    
        /// <summary>The status of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DealStatus { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? OrderStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PeriodicFeeEstimatesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicFeeEstimatesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PeriodicFeeEstimatesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PeriodicFeeEstimatesResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Brokers 
    {
        /// <summary>Broker involved in the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("broker")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Broker { get; set; }= default!;
    
        /// <summary>Specifies the date a particular Order has been placed with the Broker/Counterparty</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateToBroker")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateToBroker { get; set; }= default!;
    
        /// <summary>Specifies the particular amount of an order which has been placed with the previously defined Broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToBroker")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToBroker { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Customers 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Person designated as depository by the company in or pursuant to this Indenture, and, unless otherwise provided with respect to any security, any successor to such person</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The percentage of holdings redeemed/subscribed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentage")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Percentage { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Price { get; set; }= default!;
    
        /// <summary>Indicates whether charges will be calculated.  Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("calculateCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CalculateCharges { get; set; }= default!;
    
        /// <summary>Indicates whether the cash amount is to include charges (NET) or have charges applied in addition to the trade consideration (GROSS). Allowed values: - NET - GROSS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesGrossOrNet")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargesGrossOrNet { get; set; }= default!;
    
        /// <summary>Defines the rounding type for the amount calculated or input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rounding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Rounding { get; set; }= default!;
    
        /// <summary>Determine whether to reduce the commission in order to make the total trade match the cash amount exactly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adjustCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdjustCommission { get; set; }= default!;
    
        /// <summary>The currency of the trade settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SettlementCurrency { get; set; }= default!;
    
        /// <summary>Amount of broker commission charged to the customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerCommission { get; set; }= default!;
    
        /// <summary>This field Records the Foreign Fee amount charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ForeignFee { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StampTax { get; set; }= default!;
    
        /// <summary>This field Records the amount of EBV Fees charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("EBVFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EBVFee { get; set; }= default!;
    
        /// <summary>The amount of miscellaneous fees charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("miscellaneousFees")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MiscellaneousFees { get; set; }= default!;
    
        /// <summary>The customer account to which income or expenses are debited/credited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IncomeAccount { get; set; }= default!;
    
        /// <summary>The currency of the customer's income account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomeAccountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IncomeAccountCurrency { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? OrderAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerWitholdingTaxes")]
        public System.Collections.Generic.ICollection<CustomerWitholdingTaxes>? CustomerWitholdingTaxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyingPowers")]
        public System.Collections.Generic.ICollection<BuyingPowers>? BuyingPowers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxTypes")]
        public System.Collections.Generic.ICollection<CustomerChargeTaxTypes>? CustomerChargeTaxTypes { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Brokers2 
    {
        /// <summary>Broker involved in the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("broker")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Broker { get; set; }= default!;
    
        /// <summary>Specifies the date a particular Order has been placed with the Broker/Counterparty</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateToBroker")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateToBroker { get; set; }= default!;
    
        /// <summary>Specifies the particular amount of an order which has been placed with the previously defined Broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToBroker")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToBroker { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Customers2 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Person designated as depository by the company in or pursuant to this Indenture, and, unless otherwise provided with respect to any security, any successor to such person</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The percentage of holdings redeemed/subscribed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentage")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Percentage { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Price { get; set; }= default!;
    
        /// <summary>Indicates whether charges will be calculated.  Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("calculateCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CalculateCharges { get; set; }= default!;
    
        /// <summary>Indicates whether the cash amount is to include charges (NET) or have charges applied in addition to the trade consideration (GROSS). Allowed values: - NET - GROSS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesGrossOrNet")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargesGrossOrNet { get; set; }= default!;
    
        /// <summary>Defines the rounding type for the amount calculated or input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rounding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Rounding { get; set; }= default!;
    
        /// <summary>Determine whether to reduce the commission in order to make the total trade match the cash amount exactly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adjustCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdjustCommission { get; set; }= default!;
    
        /// <summary>The currency of the trade settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SettlementCurrency { get; set; }= default!;
    
        /// <summary>Amount of broker commission charged to the customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerCommission { get; set; }= default!;
    
        /// <summary>This field Records the Foreign Fee amount charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ForeignFee { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>The Stamp Tax amount charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stampTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? StampTax { get; set; }= default!;
    
        /// <summary>This field Records the amount of EBV Fees charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("EBVFee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EBVFee { get; set; }= default!;
    
        /// <summary>The amount of miscellaneous fees charged to the Customer for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("miscellaneousFees")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MiscellaneousFees { get; set; }= default!;
    
        /// <summary>The customer account to which income or expenses are debited/credited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IncomeAccount { get; set; }= default!;
    
        /// <summary>The currency of the customer's income account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomeAccountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IncomeAccountCurrency { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? OrderAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions2>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerWitholdingTaxes")]
        public System.Collections.Generic.ICollection<CustomerWitholdingTaxes2>? CustomerWitholdingTaxes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("buyingPowers")]
        public System.Collections.Generic.ICollection<BuyingPowers2>? BuyingPowers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxTypes")]
        public System.Collections.Generic.ICollection<CustomerChargeTaxTypes2>? CustomerChargeTaxTypes { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The ISO code (3 letters) for the institution's local currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? LocalCurrencyId { get; set; }= default!;
    
        /// <summary>Contains the gross amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? GrossAmount { get; set; }= default!;
    
        /// <summary>This indicates the Advisory Fees amount in trade currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisoryFeesInTradeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? AdvisoryFeesInTradeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the Advisory Fees amount in Charge currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisoryFeesInChargeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? AdvisoryFeesInChargeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the Advisory Fees frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisoryFeesFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisoryFeesFrequency { get; set; }= default!;
    
        /// <summary>This indicates the SafeCustody Charge amount in trade currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("safekeepChargeInTradeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? SafekeepChargeInTradeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the SafeCustody Charge amount in Charge currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("safekeepChargeInChargeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? SafekeepChargeInChargeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the SafeCustody Charge frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("safekeepChargeFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SafekeepChargeFrequency { get; set; }= default!;
    
        /// <summary>This indicates the Inducement Fees amount in trade currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("InducementFeesInTradeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 30D)]
        public double? InducementFeesInTradeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the Inducement Fees amount in Charge currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("InducementFeesInChargeCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 30D)]
        public double? InducementFeesInChargeCurrency { get; set; }= default!;
    
        /// <summary>This indicates the Inducement Fees Frequency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("InducementFeesFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InducementFeesFrequency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerWitholdingTaxes 
    {
        /// <summary>Specifies the amount of Tax on the Securities up to the Value Date of the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerWitholdingTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerWitholdingTax { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BuyingPowers 
    {
        /// <summary>Indicates the buying power of the portfolio on placement of order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyingPower")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BuyingPower { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerChargeTaxTypes 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions2 
    {
        /// <summary>Instructions given by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerInstructions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerWitholdingTaxes2 
    {
        /// <summary>Specifies the amount of Tax on the Securities up to the Value Date of the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerWitholdingTax")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerWitholdingTax { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BuyingPowers2 
    {
        /// <summary>Indicates the buying power of the portfolio on placement of order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyingPower")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BuyingPower { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerChargeTaxTypes2 
    {
        /// <summary>The type of charge or tax to be paid by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxType { get; set; }= default!;
    
        /// <summary>The amount of charges or taxes to be paid by customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerChargeTaxAmount { get; set; }= default!;
    
        /// <summary>The Charge or tax identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerChargeTaxCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerChargeTaxCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016