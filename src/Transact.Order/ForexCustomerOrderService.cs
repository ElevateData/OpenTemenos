//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.ForexCustomerOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IForexCustomerOrderService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves forex orders created for customers to buy/sell currencies at desired rates</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CustomerForexLimitOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerForexLimitOrdersResponse> GetCustomerForexLimitOrdersAsync(string limitOrderId, string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancels an existing forex limit order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ForexLimitOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexLimitOrderResponse> UpdateForexLimitOrderAsync(string limitOrderId, ForexLimitOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates forex limit order for a customer</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ForexLimitOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexLimitOrderResponse1> CreateForexLimitOrderAsync(ForexLimitOrder1 payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the forex deals created out of the forex limit order of the given customer</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CustomerForexDealsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerForexDealsResponse> GetCustomerForexDealsAsync(string customerId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the open position</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="dealerDeskId">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ForexOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexOrdersResponse> GetForexOrdersAsync(string? currencyId = null, string? dealerDeskId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates foreign exchange deal</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ForexOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexOrderResponse> CreateForexOrderAsync(ForexOrder payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all the foreign exchange active deals as on today</summary>
        /// <param name="dealType">Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</param>
        /// <param name="counterparty">The counterparty ID  for the  deal.</param>
        /// <param name="transactionId">Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</param>
        /// <param name="swapId">Swap contract identifier</param>
        /// <param name="settlementDateSell">Settlement date for sell side.</param>
        /// <param name="settlementDateBuy">Settlement date for buy side.</param>
        /// <param name="buyCurrency">ISO Currency code for the bought currency.</param>
        /// <param name="buyAmount">Amount bought in the FX deal.</param>
        /// <param name="sellCurrency">ISO Currency code for the sold currency.</param>
        /// <param name="sellAmount">Amount sold in the FX deal.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="accountSell">Contains the account from which the payment is made.</param>
        /// <param name="accountBuy">Contains the account from which the payment is received.</param>
        /// <param name="dealerDeskId">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="unevenSwap">Identifier for a FX uneven swap  (the swap base currency amount in near and far leg are not the same).</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>OutstandingForexOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingForexOrdersResponse> GetOutstandingForexOrdersAsync(string? dealType = null, string? counterparty = null, string? transactionId = null, string? swapId = null, string? settlementDateSell = null, string? settlementDateBuy = null, string? buyCurrency = null, string? buyAmount = null, string? sellCurrency = null, string? sellAmount = null, string? dealDate = null, string? accountSell = null, string? accountBuy = null, string? dealerDeskId = null, string? unevenSwap = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>CustomerForexLimitOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerForexLimitOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerForexLimitOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerForexLimitOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ForexLimitOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexLimitOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrderBody 
    {
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>Option to cancel an order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancelOrder { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Remarks { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ForexLimitOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexLimitOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrderResponseBody 
    {
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>Option to cancel an order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelOrder")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancelOrder { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Remarks { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ForexLimitOrder1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrder1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexLimitOrder1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrder1Body 
    {
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSells")]
        public System.Collections.Generic.ICollection<BuyOrSells>? BuyOrSells { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealerDesk { get; set; }= default!;
    
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>The time when the order expires.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryTime")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryTime { get; set; }= default!;
    
        /// <summary>The  order does not expire until it is cancelled. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("goodTillCancel")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GoodTillCancel { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The account used for payment received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiveAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ReceiveAccount { get; set; }= default!;
    
        /// <summary>The account used for payment made.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PayAccount { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Remarks { get; set; }= default!;
    
    
    }
    
    /// <summary>ForexLimitOrderResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrderResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexLimitOrderResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexLimitOrderResponse1Body 
    {
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSells")]
        public System.Collections.Generic.ICollection<BuyOrSells2>? BuyOrSells { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealerDesk { get; set; }= default!;
    
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>The time when the order expires.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryTime")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryTime { get; set; }= default!;
    
        /// <summary>The  order does not expire until it is cancelled. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("goodTillCancel")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GoodTillCancel { get; set; }= default!;
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>The account used for payment received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receiveAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ReceiveAccount { get; set; }= default!;
    
        /// <summary>The account used for payment made.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PayAccount { get; set; }= default!;
    
        /// <summary>General comments / notes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Remarks { get; set; }= default!;
    
    
    }
    
    /// <summary>CustomerForexDealsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerForexDealsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomerForexDealsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerForexDealsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>ForexOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexOrderBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrderBody 
    {
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>Value date of the buy currency. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Currency against which exchange rate is quoted.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealerDesk { get; set; }= default!;
    
        /// <summary>Identifies if the counterparty is a treasury customer or not in order to allocate the exchange earnings between treasury and marketing units</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryCustomer { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>The spread applied on the treasury rate to derive the customer rate.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPips")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? MarginPips { get; set; }= default!;
    
    
    }
    
    /// <summary>ForexOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexOrderResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrderResponseBody 
    {
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>Value date of the buy currency. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Currency against which exchange rate is quoted.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerDesk")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealerDesk { get; set; }= default!;
    
        /// <summary>Identifies if the counterparty is a treasury customer or not in order to allocate the exchange earnings between treasury and marketing units</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryCustomer { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>The spread applied on the treasury rate to derive the customer rate.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPips")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? MarginPips { get; set; }= default!;
    
    
    }
    
    /// <summary>OutstandingForexOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingForexOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutstandingForexOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingForexOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>ForexOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrdersResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ForexOrdersResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForexOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Reference number of the originating transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Currency to be bought or sold through the limit  order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? OrderCurrency { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? OrderAmount { get; set; }= default!;
    
        /// <summary>Opposite to order currency. Currency of the amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ContraCurrency { get; set; }= default!;
    
        /// <summary>Opposite to order amount. Amount paid or received against order amount bought/sold.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contraAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ContraAmount { get; set; }= default!;
    
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSell")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? BuyOrSell { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? OrderStatus { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 11D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>The  FX deal reference number. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forexDealId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ForexDealId { get; set; }= default!;
    
        /// <summary>The low rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateLow")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 11D)]
        public double? OrderRateLow { get; set; }= default!;
    
        /// <summary>The high rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateHI")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 11D)]
        public double? OrderRateHI { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BuyOrSells 
    {
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSell")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyOrSell { get; set; }= default!;
    
        /// <summary>Purpose of the order i.e. stop loss , take profit or one cancels the other.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderItemType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderItemType { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>The low rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateLow")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderRateLow { get; set; }= default!;
    
        /// <summary>The high rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateHI")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderRateHI { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BuyOrSells2 
    {
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyOrSell")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyOrSell { get; set; }= default!;
    
        /// <summary>Purpose of the order i.e. stop loss , take profit or one cancels the other.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderItemType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderItemType { get; set; }= default!;
    
        /// <summary>The amount of the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>The low rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateLow")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderRateLow { get; set; }= default!;
    
        /// <summary>The high rate stipulated for order execution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderRateHI")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OrderRateHI { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Identifies the unique identifier of the transaction or contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ContractId { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRate")]
        public double? CustomerRate { get; set; }= default!;
    
        /// <summary>Transaction reference ID of the limit order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limOrderReference")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LimOrderReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? DealType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Reference number of the originating transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>The counterparty ID  for the  deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterparty")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Counterparty { get; set; }= default!;
    
        /// <summary>The counterparty name for the forex deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterpartyName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterpartyName { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        public string? ExchangeRate { get; set; }= default!;
    
        /// <summary>Identifies the account through which the amount sold is settled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("seller")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? Seller { get; set; }= default!;
    
        /// <summary>Identifies the account through which the amount bought is settled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyer")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? Buyer { get; set; }= default!;
    
        /// <summary>Identifier for a FX uneven swap  (the swap base currency amount in near and far leg are not the same).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unevenSwap")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? UnevenSwap { get; set; }= default!;
    
        /// <summary>Swap contract identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swapId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? SwapId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AL")]
        public System.Collections.Generic.ICollection<AL>? AL { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("SP")]
        public System.Collections.Generic.ICollection<SP>? SP { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FWD")]
        public System.Collections.Generic.ICollection<FWD>? FWD { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Net of buy and sell positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPosition")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 30D)]
        public double? NetPosition { get; set; }= default!;
    
        /// <summary>Position amount for unauthorised transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unapprovedPosition")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 30D)]
        public double? UnapprovedPosition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AL 
    {
        /// <summary>Foreign currency position corresponding to the assets and liabilities.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assetLiabilityPosition")]
        public System.Collections.Generic.ICollection<double>? AssetLiabilityPosition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SP 
    {
        /// <summary>Currency position corresponding to spot period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spotPosition")]
        public System.Collections.Generic.ICollection<double>? SpotPosition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FWD 
    {
        /// <summary>Currency position with value date greater than spot.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardPosition")]
        public System.Collections.Generic.ICollection<double>? ForwardPosition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016