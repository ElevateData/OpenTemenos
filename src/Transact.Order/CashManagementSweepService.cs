//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Order.CashManagementSweep
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICashManagementSweepService
    {
        /// <summary>Create balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>MaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>MaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>MaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>MaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create cross currency balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXCurrencyMaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXCurrencyMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create cross currency balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXCurrencyMaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXCurrencyMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update cross currency balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXCurrencyMaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXCurrencyMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update cross currency balance maintenance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXCurrencyMaintainBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXCurrencyMaintainBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create cross currency surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXSurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create cross currency surplus balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXSurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update cross currency surplus balance sweep</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXSurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update cross currency surplus balance sweep</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXSurplusBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXSurplusBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create cross currency two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create cross currency two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> CreateFXZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update cross currency two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update cross currency two-way balance sweep</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FXZeroBalanceSweepsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MaintainBalanceSweepsResponse> UpdateFXZeroBalanceSweepsAsync(string accountId, MaintainBalanceSweeps payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>MaintainBalanceSweeps</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MaintainBalanceSweeps 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public MaintainBalanceSweepsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MaintainBalanceSweepsBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("sweepRelationshipDetails")]
        public System.Collections.Generic.ICollection<SweepRelationshipDetails>? SweepRelationshipDetails { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives>? Narratives { get; set; }= default!;
    
        /// <summary>Unique ID of the group</summary>
        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GroupId { get; set; }= default!;
    
        /// <summary>The Account that is defined as the Main Master on AC.CP.GROUP.PARAM. This will be defaulted by the system on entering the GROUP.ID and is not user accessible.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mainAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MainAccount { get; set; }= default!;
    
        /// <summary> The sequence in which this cash pool record will be processed within the group. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SequenceNumber { get; set; }= default!;
    
        /// <summary>Holds the end date for the sweep record. The record will become inactive after this date, which means that no sweep will be executed after this date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sweepCancelDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SweepCancelDate { get; set; }= default!;
    
        /// <summary>Holds the start date for suspending the sweep. No sweep will be done between this date and the date defined in SUSP.END.DATE.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspensionStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SuspensionStartDate { get; set; }= default!;
    
        /// <summary>Holds the start date for suspending the sweep. No sweep will be done between this date and the date defined in SUSP.END.DATE.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspensionEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SuspensionEndDate { get; set; }= default!;
    
        /// <summary>To suspending the cashpool for indefinite period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspendIndefinite")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SuspendIndefinite { get; set; }= default!;
    
        /// <summary>Counter Booking Account for the ID Account.This Account is used by the system to raise an equal and opposite entry posted against ID Account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterBookingSweepAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterBookingSweepAccount { get; set; }= default!;
    
        /// <summary>Counter Booking Account for the Link Account. This Account is used by the system to raise an equal and opposite entry posted against Link Account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterBookingLinkAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterBookingLinkAccount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>MaintainBalanceSweepsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MaintainBalanceSweepsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public MaintainBalanceSweepsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MaintainBalanceSweepsResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("sweepRelationshipDetails")]
        public System.Collections.Generic.ICollection<SweepRelationshipDetails2>? SweepRelationshipDetails { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives2>? Narratives { get; set; }= default!;
    
        /// <summary>Unique ID of the group</summary>
        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GroupId { get; set; }= default!;
    
        /// <summary>The Account that is defined as the Main Master on AC.CP.GROUP.PARAM. This will be defaulted by the system on entering the GROUP.ID and is not user accessible.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mainAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MainAccount { get; set; }= default!;
    
        /// <summary> The sequence in which this cash pool record will be processed within the group. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SequenceNumber { get; set; }= default!;
    
        /// <summary>Holds the end date for the sweep record. The record will become inactive after this date, which means that no sweep will be executed after this date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sweepCancelDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SweepCancelDate { get; set; }= default!;
    
        /// <summary>Holds the start date for suspending the sweep. No sweep will be done between this date and the date defined in SUSP.END.DATE.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspensionStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SuspensionStartDate { get; set; }= default!;
    
        /// <summary>Holds the start date for suspending the sweep. No sweep will be done between this date and the date defined in SUSP.END.DATE.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspensionEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SuspensionEndDate { get; set; }= default!;
    
        /// <summary>To suspending the cashpool for indefinite period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("suspendIndefinite")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SuspendIndefinite { get; set; }= default!;
    
        /// <summary>Counter Booking Account for the ID Account.This Account is used by the system to raise an equal and opposite entry posted against ID Account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterBookingSweepAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterBookingSweepAccount { get; set; }= default!;
    
        /// <summary>Counter Booking Account for the Link Account. This Account is used by the system to raise an equal and opposite entry posted against Link Account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterBookingLinkAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterBookingLinkAccount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SweepRelationshipDetails 
    {
        /// <summary>The account which with the source account (the cash pool key) has the sweep relationship.Depending on the rule entered , the link  will either debit or credit the source account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("linkAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LinkAccount { get; set; }= default!;
    
        /// <summary>A rule is assigned to a product and the rule determines whether a customer can buy that product or hold it after changes in circumstance.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Rule { get; set; }= default!;
    
        /// <summary>Specifies the frequency in which the payment application(periodic payments) execute the payment instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Frequency { get; set; }= default!;
    
        /// <summary>The minimum account balance required</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumBalance { get; set; }= default!;
    
        /// <summary>The maximum account balance allowed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MaximumBalance { get; set; }= default!;
    
        /// <summary>Used to restrict the creation of sweep amount for a small amount. The amount entered here will get validated against the sweep amount and only when the sweep amount is greater than this, sweep takes place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumDebitsToTransfer")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumDebitsToTransfer { get; set; }= default!;
    
        /// <summary>Used to restrict the creation of sweep amount for a small amount.The amount entered here will get validated against the sweep amount and only when the sweep amount is greater than this, sweep takes place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumCreditsToTransfer")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumCreditsToTransfer { get; set; }= default!;
    
        /// <summary>Indicates where this pool may be run either online or End of the day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Schedule { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SweepRelationshipDetails2 
    {
        /// <summary>The account which with the source account (the cash pool key) has the sweep relationship.Depending on the rule entered , the link  will either debit or credit the source account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("linkAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LinkAccount { get; set; }= default!;
    
        /// <summary>A rule is assigned to a product and the rule determines whether a customer can buy that product or hold it after changes in circumstance.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Rule { get; set; }= default!;
    
        /// <summary>Specifies the frequency in which the payment application(periodic payments) execute the payment instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Frequency { get; set; }= default!;
    
        /// <summary>The minimum account balance required</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumBalance { get; set; }= default!;
    
        /// <summary>The maximum account balance allowed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MaximumBalance { get; set; }= default!;
    
        /// <summary>Used to restrict the creation of sweep amount for a small amount. The amount entered here will get validated against the sweep amount and only when the sweep amount is greater than this, sweep takes place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumDebitsToTransfer")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumDebitsToTransfer { get; set; }= default!;
    
        /// <summary>Used to restrict the creation of sweep amount for a small amount.The amount entered here will get validated against the sweep amount and only when the sweep amount is greater than this, sweep takes place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumCreditsToTransfer")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? MinimumCreditsToTransfer { get; set; }= default!;
    
        /// <summary>Indicates where this pool may be run either online or End of the day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Schedule { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016