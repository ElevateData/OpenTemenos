//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.Guarantees
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IGuaranteesService
    {
        /// <summary>Details of guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> GetClauseAsync(string clauseId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Details of guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> GetClauseAsync(string clauseId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> CreateClauseAsync(string clauseId, Clause payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> CreateClauseAsync(string clauseId, Clause payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> UpdateClauseAsync(string clauseId, Clause payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> UpdateClauseAsync(string clauseId, Clause payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> DeleteClauseAsync(string clauseId, ClauseDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove guarantee clause</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClauseResponse> DeleteClauseAsync(string clauseId, ClauseDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the guarantee initiation requests</summary>
        /// <param name="mdIbRequestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="ibEventStatus">Specifies the status of the guarantee issuance request.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeIssuanceRequestsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeIssuanceRequestsResponse> GetGuaranteeIssuanceRequestsAsync(string? mdIbRequestId, string? customerId, string? ibEventStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the guarantee initiation requests</summary>
        /// <param name="mdIbRequestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="ibEventStatus">Specifies the status of the guarantee issuance request.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeIssuanceRequestsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeIssuanceRequestsResponse> GetGuaranteeIssuanceRequestsAsync(string? mdIbRequestId, string? customerId, string? ibEventStatus, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create guarantee initiation request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> CreateIbRequestAsync(IbRequest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create guarantee initiation request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> CreateIbRequestAsync(IbRequest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Details of guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> GetIbRequestAsync(string requestId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Details of guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> GetIbRequestAsync(string requestId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update guarantee initiation record</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> UpdateIbRequestAsync(string requestId, IbRequest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update guarantee initiation record</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> UpdateIbRequestAsync(string requestId, IbRequest payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove guarantee initiation record</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> DeleteIbRequestAsync(string requestId, IbRequestDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove guarantee initiation record</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IbRequestResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> DeleteIbRequestAsync(string requestId, IbRequestDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Approve guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> ApproveGuaranteeAsync(string requestId, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> ApproveGuaranteeAsync(string requestId, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Reject guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> RejectGuaranteeAsync(string requestId, GuaranteeDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reject guarantee initiation request</summary>
        /// <param name="requestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IbRequestResponse> RejectGuaranteeAsync(string requestId, GuaranteeDelete? payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves received guarantee records</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteeHistoryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteeHistoryResponse> GetReceivedGuaranteeHistoryAsync(string guaranteeId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves received guarantee records</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteeHistoryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteeHistoryResponse> GetReceivedGuaranteeHistoryAsync(string guaranteeId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the guarantee clause records</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeClausesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeClausesResponse> GetGuaranteeClausesAsync(string? clauseId, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the guarantee clause records</summary>
        /// <param name="clauseId">Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeClausesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeClausesResponse> GetGuaranteeClausesAsync(string? clauseId, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the amended guarantee records</summary>
        /// <param name="alternateId">An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment.</param>
        /// <param name="contractType">Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteesAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteesAmendmentsResponse> GetReceivedGuaranteesAmendmentsAsync(string? alternateId, string? contractType, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the amended guarantee records</summary>
        /// <param name="alternateId">An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment.</param>
        /// <param name="contractType">Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteesAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteesAmendmentsResponse> GetReceivedGuaranteesAmendmentsAsync(string? alternateId, string? contractType, string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the guarantee claim invocation details</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimInvocationHistoryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimInvocationHistoryResponse> GetClaimInvocationHistoryAsync(string guaranteeId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the guarantee claim invocation details</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimInvocationHistoryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimInvocationHistoryResponse> GetClaimInvocationHistoryAsync(string guaranteeId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the received guarantee claims</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteeClaimsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteeClaimsResponse> GetReceivedGuaranteeClaimsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the received guarantee claims</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReceivedGuaranteeClaimsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivedGuaranteeClaimsResponse> GetReceivedGuaranteeClaimsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves guarantee amendment records</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeAmendmentsResponse> GetGuaranteeAmendmentsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves guarantee amendment records</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeAmendmentsResponse> GetGuaranteeAmendmentsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the issued guarantee details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>IssuedGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuedGuaranteesResponse> GetIssuedGuaranteesAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the issued guarantee details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>IssuedGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuedGuaranteesResponse> GetIssuedGuaranteesAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the guarantee limits</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeLimitsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeLimitsResponse> GetGuaranteeLimitsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the guarantee limits</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeLimitsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeLimitsResponse> GetGuaranteeLimitsAsync(string? customerId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the received guarantee claims</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>IssuedGuaranteeClaimsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuedGuaranteeClaimsResponse> GetIssuedGuaranteeClaimsAsync(int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the received guarantee claims</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>IssuedGuaranteeClaimsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuedGuaranteeClaimsResponse> GetIssuedGuaranteeClaimsAsync(int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the guarantee details</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="beneficiaryCustomerId">Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</param>
        /// <param name="contractType">Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</param>
        /// <param name="ibRequestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesResponse> GetGuaranteesAsync(string? guaranteeId, string? beneficiaryCustomerId, string? contractType, string? ibRequestId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the guarantee details</summary>
        /// <param name="guaranteeId">Identifier of the guarantee</param>
        /// <param name="beneficiaryCustomerId">Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</param>
        /// <param name="contractType">Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</param>
        /// <param name="ibRequestId">The guarantees issuance id initiated by internet banking</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesResponse> GetGuaranteesAsync(string? guaranteeId, string? beneficiaryCustomerId, string? contractType, string? ibRequestId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a generic Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeGenericResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeGenericResponse> CreateGuaranteeGenericAsync(GuaranteeGeneric payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a generic Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteeGenericResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeGenericResponse> CreateGuaranteeGenericAsync(GuaranteeGeneric payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves outstanding guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesOutstandingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesOutstandingsResponse> GetGuaranteesOutstandingsAsync(string customerId, string? transactionReference, string? guaranteeType, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outstanding guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesOutstandingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesOutstandingsResponse> GetGuaranteesOutstandingsAsync(string customerId, string? transactionReference, string? guaranteeType, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves expiring guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="gteeReturnDate">Date on which the original Guarantee will be returned by the customer to the Bank that issued it</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeExpiringWithDateResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeExpiringWithDateResponse> GetGuaranteeExpiringWithDateAsync(string customerId, string? transactionReference, string? currency, string? amount, string? maturityDate, string? gteeReturnDate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves expiring guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="gteeReturnDate">Date on which the original Guarantee will be returned by the customer to the Bank that issued it</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteeExpiringWithDateResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteeExpiringWithDateResponse> GetGuaranteeExpiringWithDateAsync(string customerId, string? transactionReference, string? currency, string? amount, string? maturityDate, string? gteeReturnDate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves outstanding guarantee claims</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimOutstandingUnderGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimOutstandingUnderGuaranteesResponse> GetClaimOutstandingUnderGuaranteesAsync(string customerId, string? transactionReference, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outstanding guarantee claims</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimOutstandingUnderGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimOutstandingUnderGuaranteesResponse> GetClaimOutstandingUnderGuaranteesAsync(string customerId, string? transactionReference, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves list of cancelled guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesReversedResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesReversedResponse> GetGuaranteesReversedAsync(string customerId, string? transactionReference, string? guaranteeType, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of cancelled guarantees</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GuaranteesReversedResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesReversedResponse> GetGuaranteesReversedAsync(string customerId, string? transactionReference, string? guaranteeType, string? currency, string? amount, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves paid/cancelled details of issued guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimsPaidUnderGuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimsPaidUnderGuaranteeResponse> GetClaimsPaidUnderGuaranteeAsync(string guaranteeId, string? transactionReference, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves paid/cancelled details of issued guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ClaimsPaidUnderGuaranteeResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClaimsPaidUnderGuaranteeResponse> GetClaimsPaidUnderGuaranteeAsync(string guaranteeId, string? transactionReference, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves list of outstanding shipping guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="lCReference">Indicates the LC reference under which the guarantee is to be opened</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutstandingShippingGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingShippingGuaranteesResponse> GetOutstandingShippingGuaranteesAsync(string guaranteeId, string? transactionReference, string? lCReference, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of outstanding shipping guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="lCReference">Indicates the LC reference under which the guarantee is to be opened</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutstandingShippingGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingShippingGuaranteesResponse> GetOutstandingShippingGuaranteesAsync(string guaranteeId, string? transactionReference, string? lCReference, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves outstanding received guarantees details</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="customer">Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutstandingReceivedGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingReceivedGuaranteesResponse> GetOutstandingReceivedGuaranteesAsync(string customerId, string? transactionReference, string? customer, string? guaranteeType, string? currency, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outstanding received guarantees details</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="customer">Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</param>
        /// <param name="guaranteeType">Refers to the type of the contract that is being issued.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutstandingReceivedGuaranteesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingReceivedGuaranteesResponse> GetOutstandingReceivedGuaranteesAsync(string customerId, string? transactionReference, string? customer, string? guaranteeType, string? currency, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates Performance Bond Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesPerformanceBondResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesPerformanceBondResponse> CreateGuaranteesPerformanceBondAsync(GuaranteesPerformanceBond payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Performance Bond Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesPerformanceBondResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesPerformanceBondResponse> CreateGuaranteesPerformanceBondAsync(GuaranteesPerformanceBond payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates Standby Letter of Credit Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesStandbyLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesStandbyLCResponse> CreateGuaranteesStandbyLCAsync(GuaranteesStandbyLC payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Standby Letter of Credit Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesStandbyLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesStandbyLCResponse> CreateGuaranteesStandbyLCAsync(GuaranteesStandbyLC payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates  Shipping Guarantes under Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ShippingGuaranteeUnderLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingGuaranteeUnderLCResponse> CreateShippingGuaranteeUnderLCAsync(ShippingGuaranteeUnderLC payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates  Shipping Guarantes under Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ShippingGuaranteeUnderLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingGuaranteeUnderLCResponse> CreateShippingGuaranteeUnderLCAsync(ShippingGuaranteeUnderLC payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates Shipping Guarantee under Collection Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ShippingGuaranteeUnderCollectionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingGuaranteeUnderCollectionResponse> CreateShippingGuaranteeUnderCollectionAsync(ShippingGuaranteeUnderCollection payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Shipping Guarantee under Collection Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ShippingGuaranteeUnderCollectionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingGuaranteeUnderCollectionResponse> CreateShippingGuaranteeUnderCollectionAsync(ShippingGuaranteeUnderCollection payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates guarantee details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesAmendmentResponse> UpdateGuaranteesAmendmentAsync(string guaranteeId, GuaranteesAmendment payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates guarantee details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesAmendmentResponse> UpdateGuaranteesAmendmentAsync(string guaranteeId, GuaranteesAmendment payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates the rejection of claim for a guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesRejectionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesRejectionResponse> UpdateGuaranteesRejectionAsync(string guaranteeId, GuaranteesRejection payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the rejection of claim for a guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuaranteesRejectionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuaranteesRejectionResponse> UpdateGuaranteesRejectionAsync(string guaranteeId, GuaranteesRejection payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves paid/cancelled details of received guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="beneficiary">Identifies the Beneficiary name and address of the Standing Order</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="debitValueDate">Date on which the amount will be debited for settlement</param>
        /// <param name="creditValueDate">Reference quoted by the credit account for a payment</param>
        /// <param name="correspondentBank">Correspondent bank, where our nostro account is held.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InvocationPaidOrCancelledResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InvocationPaidOrCancelledResponse> GetInvocationPaidOrCancelledAsync(string guaranteeId, string? transactionReference, string? beneficiary, string? debitAccountId, string? creditAccountId, string? amount, string? debitValueDate, string? creditValueDate, string? correspondentBank, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves paid/cancelled details of received guarantees</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="beneficiary">Identifies the Beneficiary name and address of the Standing Order</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="creditAccountId">Credit account identifier of the payment or transaction</param>
        /// <param name="amount">This is the payment amount</param>
        /// <param name="debitValueDate">Date on which the amount will be debited for settlement</param>
        /// <param name="creditValueDate">Reference quoted by the credit account for a payment</param>
        /// <param name="correspondentBank">Correspondent bank, where our nostro account is held.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InvocationPaidOrCancelledResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InvocationPaidOrCancelledResponse> GetInvocationPaidOrCancelledAsync(string guaranteeId, string? transactionReference, string? beneficiary, string? debitAccountId, string? creditAccountId, string? amount, string? debitValueDate, string? creditValueDate, string? correspondentBank, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates Bid Bond Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuarnteeBidBondResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuarnteeBidBondResponse> CreateGuarnteeBidBondAsync(GuarnteeBidBond payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Bid Bond Guarantee</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GuarnteeBidBondResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GuarnteeBidBondResponse> CreateGuarnteeBidBondAsync(GuarnteeBidBond payload, bool? validate_only, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>Clause</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Clause 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ClauseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClauseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDescriptions")]
        public System.Collections.Generic.ICollection<MdClausesDescriptions>? MdClausesDescriptions { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the MD.CLAUSES narrative for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDisplayName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? MdClausesDisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ClauseResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClauseResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ClauseResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClauseResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDescriptions")]
        public System.Collections.Generic.ICollection<MdClausesDescriptions2>? MdClausesDescriptions { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the MD.CLAUSES narrative for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDisplayName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? MdClausesDisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ClauseDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClauseDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>IbRequest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbRequest 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IbRequestBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbRequestBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees>? Guarantees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limits")]
        public System.Collections.Generic.ICollection<Limits>? Limits { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Contains informational errors if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("information")]
        public System.Collections.Generic.ICollection<Information>? Information { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDetails")]
        public System.Collections.Generic.ICollection<AmendmentDetails>? AmendmentDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides>? Overrides { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 16D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Name that is displayed for the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CategoryName { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>Specifies the account from which charges is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChargeDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the cash margin/provision is to be taken.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ProvisionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? CommissionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? InvocationDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies whether the request is for issuance of shipping guarantee under Letter of Credit or Documentary collections.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuedShippingGuaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? IssuedShippingGuaranteeType { get; set; }= default!;
    
        /// <summary>Identifier of the Letter Of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("letterOfCreditId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LetterOfCreditId { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Hold number of amendment request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? AmendmentRequestId { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AmendmentStatus { get; set; }= default!;
    
        /// <summary>Specifies the amount for which the guarantee request is placed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalMovement")]
        [System.ComponentModel.DataAnnotations.Range(0D, 17D)]
        public double? PrincipalMovement { get; set; }= default!;
    
        /// <summary>To specify the date from which the increase/decrease of the guarantee amount is effective.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("movementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MovementDate { get; set; }= default!;
    
        /// <summary>To specify the new end date of the guarantee during amendment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpireDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewExpireDate { get; set; }= default!;
    
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 17D)]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Specifies the beneficiary(Corporate customer) under a Received guarantee will choose a settlement account into which the invocation amount will be credited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationSettleAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationSettleAccountId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>IbRequestResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbRequestResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IbRequestResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbRequestResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds2>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees2>? Guarantees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails2>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limits")]
        public System.Collections.Generic.ICollection<Limits2>? Limits { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks2>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers2>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Contains informational errors if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("information")]
        public System.Collections.Generic.ICollection<Information2>? Information { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDetails")]
        public System.Collections.Generic.ICollection<AmendmentDetails2>? AmendmentDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides2>? Overrides { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 16D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Name that is displayed for the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CategoryName { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>Specifies the account from which charges is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ChargeDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the cash margin/provision is to be taken.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ProvisionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? CommissionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? InvocationDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies whether the request is for issuance of shipping guarantee under Letter of Credit or Documentary collections.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuedShippingGuaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? IssuedShippingGuaranteeType { get; set; }= default!;
    
        /// <summary>Identifier of the Letter Of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("letterOfCreditId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LetterOfCreditId { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? AdditionalInformation { get; set; }= default!;
    
        /// <summary>Hold number of amendment request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? AmendmentRequestId { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AmendmentStatus { get; set; }= default!;
    
        /// <summary>Specifies the amount for which the guarantee request is placed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalMovement")]
        [System.ComponentModel.DataAnnotations.Range(0D, 17D)]
        public double? PrincipalMovement { get; set; }= default!;
    
        /// <summary>To specify the date from which the increase/decrease of the guarantee amount is effective.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("movementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MovementDate { get; set; }= default!;
    
        /// <summary>To specify the new end date of the guarantee during amendment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpireDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewExpireDate { get; set; }= default!;
    
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 17D)]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Specifies the beneficiary(Corporate customer) under a Received guarantee will choose a settlement account into which the invocation amount will be credited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationSettleAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationSettleAccountId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>IbRequestDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbRequestDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteeDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>ReceivedGuaranteeHistoryResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteeHistoryResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ReceivedGuaranteeHistoryResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteeHistoryResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteeClausesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeClausesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeClausesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeClausesResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>ReceivedGuaranteesAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteesAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ReceivedGuaranteesAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteesAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>GuaranteeIssuanceRequestsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIssuanceRequestsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeIssuanceRequestsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIssuanceRequestsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>ClaimInvocationHistoryResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimInvocationHistoryResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ClaimInvocationHistoryResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimInvocationHistoryResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>ReceivedGuaranteeClaimsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteeClaimsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ReceivedGuaranteeClaimsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReceivedGuaranteeClaimsResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    /// <summary>GuaranteeAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>IssuedGuaranteesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuedGuaranteesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuedGuaranteesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuedGuaranteesResponseBody : System.Collections.ObjectModel.Collection<Anonymous8>
    {
    
    }
    
    /// <summary>GuaranteeLimitsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeLimitsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeLimitsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeLimitsResponseBody : System.Collections.ObjectModel.Collection<Anonymous9>
    {
    
    }
    
    /// <summary>IssuedGuaranteeClaimsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuedGuaranteeClaimsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuedGuaranteeClaimsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuedGuaranteeClaimsResponseBody : System.Collections.ObjectModel.Collection<Anonymous10>
    {
    
    }
    
    /// <summary>GuaranteesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesResponseBody : System.Collections.ObjectModel.Collection<Anonymous11>
    {
    
    }
    
    /// <summary>GuaranteesOutstandingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesOutstandingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesOutstandingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesOutstandingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous12>
    {
    
    }
    
    /// <summary>GuaranteeExpiringWithDateResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeExpiringWithDateResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeExpiringWithDateResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeExpiringWithDateResponseBody : System.Collections.ObjectModel.Collection<Anonymous13>
    {
    
    }
    
    /// <summary>ClaimOutstandingUnderGuaranteesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimOutstandingUnderGuaranteesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ClaimOutstandingUnderGuaranteesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimOutstandingUnderGuaranteesResponseBody : System.Collections.ObjectModel.Collection<Anonymous14>
    {
    
    }
    
    /// <summary>GuaranteesReversedResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesReversedResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesReversedResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesReversedResponseBody : System.Collections.ObjectModel.Collection<Anonymous15>
    {
    
    }
    
    /// <summary>ClaimsPaidUnderGuaranteeResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimsPaidUnderGuaranteeResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ClaimsPaidUnderGuaranteeResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimsPaidUnderGuaranteeResponseBody : System.Collections.ObjectModel.Collection<Anonymous16>
    {
    
    }
    
    /// <summary>OutstandingShippingGuaranteesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingShippingGuaranteesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutstandingShippingGuaranteesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingShippingGuaranteesResponseBody : System.Collections.ObjectModel.Collection<Anonymous17>
    {
    
    }
    
    /// <summary>OutstandingReceivedGuaranteesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingReceivedGuaranteesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutstandingReceivedGuaranteesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutstandingReceivedGuaranteesResponseBody : System.Collections.ObjectModel.Collection<Anonymous18>
    {
    
    }
    
    /// <summary>GuaranteeGeneric</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeGeneric 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeGenericBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeGenericBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds3>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteeGenericResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeGenericResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteeGenericResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeGenericResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds4>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses2>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges2>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses2>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee2>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The identifier of the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productCategoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ProductCategoryId { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesPerformanceBond</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesPerformanceBond 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesPerformanceBondBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesPerformanceBondBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds5>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryaddresses")]
        public System.Collections.Generic.ICollection<Beneficiaryaddresses>? Beneficiaryaddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges3>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses3>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee3>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("performanceBondReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PerformanceBondReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesPerformanceBondResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesPerformanceBondResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesPerformanceBondResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesPerformanceBondResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds6>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryaddresses")]
        public System.Collections.Generic.ICollection<Beneficiaryaddresses2>? Beneficiaryaddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges4>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses4>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee4>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("performanceBondReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PerformanceBondReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the account or contract product name. For example for an account this maybe current, savings etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Category { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesStandbyLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesStandbyLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesStandbyLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesStandbyLCBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds7>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses3>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges5>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses5>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee5>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByImportLC")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StandByImportLC { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesStandbyLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesStandbyLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesStandbyLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesStandbyLCResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds8>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses4>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges6>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses6>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee6>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByImportLC")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StandByImportLC { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the account or contract product name. For example for an account this maybe current, savings etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Category { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>ShippingGuaranteeUnderLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ShippingGuaranteeUnderLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderLCBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds9>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses5>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges7>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses7>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee7>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the LC reference under which the guarantee is to be opened</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCReference { get; set; }= default!;
    
        /// <summary>Amount collected as margin under the LC for which the guarantee is issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginToBeUsed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginToBeUsed { get; set; }= default!;
    
        /// <summary>Account in which the margin collected under the LC is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginCreditAccount { get; set; }= default!;
    
        /// <summary>The field stating the Drawing reference under the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingReference { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>ShippingGuaranteeUnderLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ShippingGuaranteeUnderLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderLCResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds10>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses6>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges8>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses8>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee8>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the account or contract product name. For example for an account this maybe current, savings etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Category { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the LC reference under which the guarantee is to be opened</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCReference { get; set; }= default!;
    
        /// <summary>Amount collected as margin under the LC for which the guarantee is issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginToBeUsed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginToBeUsed { get; set; }= default!;
    
        /// <summary>Account in which the margin collected under the LC is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginCreditAccount { get; set; }= default!;
    
        /// <summary>The field stating the Drawing reference under the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingReference { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>ShippingGuaranteeUnderCollection</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderCollection 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ShippingGuaranteeUnderCollectionBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderCollectionBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public System.Collections.Generic.ICollection<BeneficiaryId>? BeneficiaryId { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses7>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges9>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses9>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee9>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shippingGuaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ShippingGuaranteeReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ShippingGuaranteeUnderCollectionBodyLiquidationMode? LiquidationMode { get; set; }= default!;
    
        /// <summary>The ID of the Letter of Credit, to be linked to this Guarantee for the purpose of apportioning the Margin</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CollectionReference { get; set; }= default!;
    
        /// <summary>Account in which the margin collected under the LC is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginCreditAccount { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>ShippingGuaranteeUnderCollectionResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderCollectionResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ShippingGuaranteeUnderCollectionResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShippingGuaranteeUnderCollectionResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public System.Collections.Generic.ICollection<BeneficiaryId2>? BeneficiaryId { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses8>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges10>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses10>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee10>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shippingGuaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ShippingGuaranteeReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the account or contract product name. For example for an account this maybe current, savings etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Category { get; set; }= default!;
    
        /// <summary>This field determines whether the shipping guarantee is issued under LC Documents or Import Collection documents. Allowed values: - LC - COLLECTION</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shippingGuaranteeIssuedFor")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ShippingGuaranteeIssuedFor { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ShippingGuaranteeUnderCollectionResponseBodyLiquidationMode? LiquidationMode { get; set; }= default!;
    
        /// <summary>The ID of the Letter of Credit, to be linked to this Guarantee for the purpose of apportioning the Margin</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CollectionReference { get; set; }= default!;
    
        /// <summary>Account in which the margin collected under the LC is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCMarginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LCMarginCreditAccount { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesAmendment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesAmendment 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesAmendmentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesAmendmentBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds11>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses9>? BeneficiaryAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("pincipalMovements")]
        public System.Collections.Generic.ICollection<PincipalMovements>? PincipalMovements { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("texts")]
        public System.Collections.Generic.ICollection<Texts>? Texts { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees3>? Guarantees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibClaimNarratives")]
        public System.Collections.Generic.ICollection<IbClaimNarratives>? IbClaimNarratives { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges11>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses11>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee11>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(17, MinimumLength = 1)]
        public string CustomerReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The identifier of the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productCategoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ProductCategoryId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 27D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Cash Margin to be taken under leaders portion for guarantee issued under syndicated transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginToBeTaken")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginToBeTaken { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>Contains the amount to be released under the particular reservation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? ReleaseAmount { get; set; }= default!;
    
        /// <summary>Indicates the current provision outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingProvisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? OutstandingProvisionAmount { get; set; }= default!;
    
        /// <summary>Indicates whether the Liquidated contracts  to be reinstated or not, Valid option is YES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reinstateContract")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReinstateContract { get; set; }= default!;
    
        /// <summary>The date from which the commission is to be recalculated when the contract is reinstated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRecalculationStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CommissionRecalculationStartDate { get; set; }= default!;
    
        /// <summary>Indicates if the advice will be generated for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AdviceRequired { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationAmount { get; set; }= default!;
    
        /// <summary>The payment methods for invocation claim details.The valid entries are EXTERNAL, INTERNAL or NOSTRO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationPaymentMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? InvocationPaymentMethod { get; set; }= default!;
    
        /// <summary>The Draw down account from where the invocation amount will be debited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDrawdownAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationDrawdownAccount { get; set; }= default!;
    
        /// <summary>The Invocation settle account from where the invocation amount will be debited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationSettleAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationSettleAccount { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesAmendmentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesAmendmentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesAmendmentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesAmendmentResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds12>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses10>? BeneficiaryAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("pincipalMovements")]
        public System.Collections.Generic.ICollection<PincipalMovements2>? PincipalMovements { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("texts")]
        public System.Collections.Generic.ICollection<Texts2>? Texts { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees4>? Guarantees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibClaimNarratives")]
        public System.Collections.Generic.ICollection<IbClaimNarratives2>? IbClaimNarratives { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges12>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses12>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee12>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        [System.ComponentModel.DataAnnotations.StringLength(17, MinimumLength = 1)]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The identifier of the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productCategoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ProductCategoryId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 27D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Cash Margin to be taken under leaders portion for guarantee issued under syndicated transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginToBeTaken")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginToBeTaken { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>Contains the amount to be released under the particular reservation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? ReleaseAmount { get; set; }= default!;
    
        /// <summary>Indicates the current provision outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingProvisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? OutstandingProvisionAmount { get; set; }= default!;
    
        /// <summary>Indicates whether the Liquidated contracts  to be reinstated or not, Valid option is YES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reinstateContract")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReinstateContract { get; set; }= default!;
    
        /// <summary>The date from which the commission is to be recalculated when the contract is reinstated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRecalculationStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CommissionRecalculationStartDate { get; set; }= default!;
    
        /// <summary>Indicates if the advice will be generated for this transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AdviceRequired { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationAmount { get; set; }= default!;
    
        /// <summary>The payment methods for invocation claim details.The valid entries are EXTERNAL, INTERNAL or NOSTRO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationPaymentMethod")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? InvocationPaymentMethod { get; set; }= default!;
    
        /// <summary>The Draw down account from where the invocation amount will be debited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDrawdownAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationDrawdownAccount { get; set; }= default!;
    
        /// <summary>The Invocation settle account from where the invocation amount will be debited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationSettleAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? InvocationSettleAccount { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesRejection</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesRejection 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesRejectionBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesRejectionBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds13>? BeneficiaryIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficairyAddresses")]
        public System.Collections.Generic.ICollection<BeneficairyAddresses>? BeneficairyAddresses { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Amount { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Field for maturing a guarantee contract online YES or NULL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineMaturity")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OnlineMaturity { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Date on which the Invocation received under a guarantee is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimRegisterDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClaimRegisterDate { get; set; }= default!;
    
        /// <summary>An external reference id for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RelatedReference { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationAmount { get; set; }= default!;
    
        /// <summary>The account from which the invocation amount will be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClaimDebitAccount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitValueDate { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExchangeRate { get; set; }= default!;
    
        /// <summary>System maintained field holding The number of invocation done under the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastClaimNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LastClaimNumber { get; set; }= default!;
    
    
    }
    
    /// <summary>GuaranteesRejectionResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesRejectionResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuaranteesRejectionResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteesRejectionResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds14>? BeneficiaryIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficairyAddresses")]
        public System.Collections.Generic.ICollection<BeneficairyAddresses2>? BeneficairyAddresses { get; set; }= default!;
    
        /// <summary>Instruction provided to CIB customer when an invocation is received under guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internetBankingClaimNarratives")]
        public System.Collections.Generic.ICollection<InternetBankingClaimNarratives>? InternetBankingClaimNarratives { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeReference { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Amount { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Field for maturing a guarantee contract online YES or NULL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineMaturity")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OnlineMaturity { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Date on which the Invocation received under a guarantee is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimRegisterDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClaimRegisterDate { get; set; }= default!;
    
        /// <summary>An external reference id for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RelatedReference { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InvocationAmount { get; set; }= default!;
    
        /// <summary>The account from which the invocation amount will be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClaimDebitAccount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitValueDate { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExchangeRate { get; set; }= default!;
    
        /// <summary>System maintained field holding The number of invocation done under the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastClaimNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LastClaimNumber { get; set; }= default!;
    
    
    }
    
    /// <summary>InvocationPaidOrCancelledResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvocationPaidOrCancelledResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InvocationPaidOrCancelledResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvocationPaidOrCancelledResponseBody : System.Collections.ObjectModel.Collection<Anonymous19>
    {
    
    }
    
    /// <summary>GuarnteeBidBond</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuarnteeBidBond 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuarnteeBidBondBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuarnteeBidBondBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds15>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses11>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges13>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses13>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee13>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bidBondReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BidBondReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    /// <summary>GuarnteeBidBondResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuarnteeBidBondResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public GuarnteeBidBondResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuarnteeBidBondResponseBody 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds16>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses12>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges14>? Charges { get; set; }= default!;
    
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddresses")]
        public System.Collections.Generic.ICollection<BankAddresses14>? BankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("detailsOfGuarantee")]
        public System.Collections.Generic.ICollection<DetailsOfGuarantee14>? DetailsOfGuarantee { get; set; }= default!;
    
        /// <summary>Another ID for the transaction for retrieval purposes or it can be used for the bank to use a unique guarantee number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bidBondReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BidBondReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the account or contract product name. For example for an account this maybe current, savings etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Category { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsAndConditions")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TermsAndConditions { get; set; }= default!;
    
        /// <summary>Determines whether the principal movements and raising entries will occur Online or at End of Day Allowed values: - ONLINE (default) - END.OF.DAY</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventsProcessing")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventsProcessing { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the manner in which the overdue payments are handled There are three options available: AUTOMATIC - will liquidate across the charge/commission account on the contract SEMI AUTOMATIC - will liquidate the charge/commission to the account only if sufficient balance is available. Else, PD will be written MANUAL - will create a PD contract irrespective of availability of funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liquidationMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiquidationMode { get; set; }= default!;
    
        /// <summary>Field to check whether provision is to be taken for the transaction or not. YES or NO</summary>
        [System.Text.Json.Serialization.JsonPropertyName("takeMargin")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TakeMargin { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginAmount { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Identifies the counter party Bank to whom the Guarantee message is to be sent when it is an issue of undertaking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ReceivingBank { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>This field identifies the purpose of the guarantee message (ISSUE or REQUEST). Ie to identify if the message conveys the issuance of guarantee from the guarantor or requesting the receiver bank to issue the another guarantee undertaking based on the undertaking received from guarantor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("furtherIdentification")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? FurtherIdentification { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MdClausesDescriptions 
    {
        /// <summary>Contains the full clause text which is used in the construction of MD Advices/Documents generated as a result of MD transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? MdClausesDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MdClausesDescriptions2 
    {
        /// <summary>Contains the full clause text which is used in the construction of MD Advices/Documents generated as a result of MD transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdClausesDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? MdClausesDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Limits 
    {
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReasons")]
        public System.Collections.Generic.ICollection<LimitExceedReasons>? LimitExceedReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Information 
    {
        [System.Text.Json.Serialization.JsonPropertyName("otherInformations")]
        public System.Collections.Generic.ICollection<OtherInformations>? OtherInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentDetails 
    {
        /// <summary>Field to corporate user to input the amendment details of the guarantee in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds2 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails2>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails2 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Limits2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReasons")]
        public System.Collections.Generic.ICollection<LimitExceedReasons2>? LimitExceedReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks2 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers2 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Information2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("otherInformations")]
        public System.Collections.Generic.ICollection<OtherInformations2>? OtherInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentDetails2 
    {
        /// <summary>Field to corporate user to input the amendment details of the guarantee in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        [System.Text.Json.Serialization.JsonPropertyName("principalBalances")]
        public System.Collections.Generic.ICollection<PrincipalBalances>? PrincipalBalances { get; set; }= default!;
    
        /// <summary>The deal identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("miscellaneousDealId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? MiscellaneousDealId { get; set; }= default!;
    
        /// <summary>Specifies the previous guarantee amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("previousAmendmentsDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? PreviousAmendmentsDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clauseNames")]
        public System.Collections.Generic.ICollection<ClauseNames>? ClauseNames { get; set; }= default!;
    
        /// <summary>Represents id of MD.CLAUSES. Id can be used in MD application and description is automatically populated in the deal.Records created for customer specific clauses, to have ID beginning with the customer ID followed by the alpha numeric text.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clauseId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ClauseId { get; set; }= default!;
    
        /// <summary>Contains the full clause text which is used in the construction of MD Advices/Documents generated as a result of MD transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clauseDisplayName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClauseDisplayName { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>An Alternate reference for the Deal. This can be used to retrieve the Deal for amendment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateTransactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlternateTransactionReference { get; set; }= default!;
    
        /// <summary>Any non T24 references which identify the deal for the customer.Free format field to allow input of any customer reference of the deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference1")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalReference1 { get; set; }= default!;
    
        /// <summary>Identifies the issuing customer name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingParty")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IssuingParty { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 30D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdReference")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? MdReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryIds")]
        public System.Collections.Generic.ICollection<BeneficiaryIds17>? BeneficiaryIds { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees5>? Guarantees { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments>? SupportDocuments { get; set; }= default!;
    
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitDetails")]
        public System.Collections.Generic.ICollection<LimitDetails>? LimitDetails { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks3>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers3>? MessageFromCustomers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("informationDetail")]
        public System.Collections.Generic.ICollection<InformationDetail>? InformationDetail { get; set; }= default!;
    
        /// <summary>The guarantees issuance id initiated by internet banking</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbRequestId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? MdIbRequestId { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>Specifies the account from which charges is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ChargeDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the cash margin/provision is to be taken.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ProvisionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CommissionDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDebitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? InvocationDebitAccountId { get; set; }= default!;
    
        /// <summary>Specifies whether the request is for issuance of shipping guarantee under Letter of Credit or Documentary collections.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuedShippingGuaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuedShippingGuaranteeType { get; set; }= default!;
    
        /// <summary>Identifier of the Letter Of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("letterOfCreditId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? LetterOfCreditId { get; set; }= default!;
    
        /// <summary>Specifies the status of the guarantee issuance request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibEventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbEventStatus { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        [System.Text.Json.Serialization.JsonPropertyName("invocationDetails")]
        public System.Collections.Generic.ICollection<InvocationDetails>? InvocationDetails { get; set; }= default!;
    
        /// <summary>Specifies the invocation claim history details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationHistory")]
        public string? InvocationHistory { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactionId")]
        public string? RecentTransactionId { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbReference")]
        public string? MdIbReference { get; set; }= default!;
    
        /// <summary>The transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdTransactionReference")]
        public string? MdTransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactionId")]
        public string? RecentTransactionId { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdReference")]
        public string? MdReference { get; set; }= default!;
    
        /// <summary>This field indicated that whether an unauthorized deal exist or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unauthorisedMdExist")]
        public string? UnauthorisedMdExist { get; set; }= default!;
    
        /// <summary>The transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdTransactionReference")]
        public string? MdTransactionReference { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbReference")]
        public string? MdIbReference { get; set; }= default!;
    
        /// <summary>Indicates that the deal contains new amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newAmendment")]
        public string? NewAmendment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous8 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactionId")]
        public string? RecentTransactionId { get; set; }= default!;
    
        /// <summary>The transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdTransactionReference")]
        public string? MdTransactionReference { get; set; }= default!;
    
        /// <summary>This field indicated that whether an unauthorized deal exist or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unauthorisedMdExist")]
        public string? UnauthorisedMdExist { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbReference")]
        public string? MdIbReference { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        public string? AmendmentStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous9 
    {
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The credit limit available to the customer for use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableAmount")]
        public double? AvailableAmount { get; set; }= default!;
    
        /// <summary>The Amount utilized for the guarantees for the specific customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisedAmount")]
        public double? UtilisedAmount { get; set; }= default!;
    
        /// <summary>Specifies the pending amount for the guarantees for the specific customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingAmount")]
        public double? PendingAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous10 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Identifies the issuing customer name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingParty")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IssuingParty { get; set; }= default!;
    
        /// <summary>Specifies the date initiated the guarantee claim</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClaimDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactionId")]
        public string? RecentTransactionId { get; set; }= default!;
    
        /// <summary>The reference id of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbReference")]
        public string? MdIbReference { get; set; }= default!;
    
        /// <summary>The transaction reference for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdTransactionReference")]
        public string? MdTransactionReference { get; set; }= default!;
    
        /// <summary>Specifies the account which the settlement will be credited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settleAccountId")]
        public string? SettleAccountId { get; set; }= default!;
    
        /// <summary>Field to input any information that needs to be provided with regard to the issuance of guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInformation")]
        public string? OtherInformation { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        public string? MessageFromCustomer { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous11 
    {
        /// <summary>Indicates additional details of Beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryDetails")]
        public System.Collections.Generic.ICollection<BeneficiaryDetails>? BeneficiaryDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerAddresses>? BeneficiaryCustomerAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("invocationBeneficiaryIds")]
        public System.Collections.Generic.ICollection<InvocationBeneficiaryIds>? InvocationBeneficiaryIds { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks4>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers4>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guarantees")]
        public System.Collections.Generic.ICollection<Guarantees6>? Guarantees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccounts")]
        public System.Collections.Generic.ICollection<ChargeAccounts>? ChargeAccounts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountDetails")]
        public System.Collections.Generic.ICollection<CommissionAccountDetails>? CommissionAccountDetails { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments2>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("otherInformations")]
        public System.Collections.Generic.ICollection<OtherInformations3>? OtherInformations { get; set; }= default!;
    
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReasons")]
        public System.Collections.Generic.ICollection<LimitExceedReasons3>? LimitExceedReasons { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("principalMovementDetails")]
        public System.Collections.Generic.ICollection<PrincipalMovementDetails>? PrincipalMovementDetails { get; set; }= default!;
    
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>Indicates the product type for the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productType")]
        public string? ProductType { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Indicates the Principal Amount of the loan or a deposit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalAmount")]
        public double? PrincipalAmount { get; set; }= default!;
    
        /// <summary>An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateId")]
        public string? AlternateId { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DealDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Any non T24 references which identify the deal for the customer.Free format field to allow input of any customer reference of the deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference1")]
        public string? ExternalReference1 { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Indicates the guarantee customer name.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeCustomerName")]
        public string? GuaranteeCustomerName { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        public string? InvocationStatus { get; set; }= default!;
    
        /// <summary>Specifies the account from which the invocation amount is to be debited at the time of settlement of the claim.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationDebitAccount")]
        public string? InvocationDebitAccount { get; set; }= default!;
    
        /// <summary>Specifies the account from which the cash margin/provision is to be taken.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionDebitAccount")]
        public string? ProvisionDebitAccount { get; set; }= default!;
    
        /// <summary>Specifies the request id initiated from internet banking</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internetBankingRequestId")]
        public string? InternetBankingRequestId { get; set; }= default!;
    
        /// <summary>Date on which an invocation claim is registered in the system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationRegisterDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InvocationRegisterDate { get; set; }= default!;
    
        /// <summary>Hold number of amendment request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentRequestId")]
        public string? AmendmentRequestId { get; set; }= default!;
    
        /// <summary>Specifies the account from which charges is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccountId")]
        public string? ChargeDebitAccountId { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Any non T24 references which identify the deal for the customer.Free format field to allow input of any customer reference of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference2")]
        public string? ExternalReference2 { get; set; }= default!;
    
        /// <summary>Specifies whether the request is for issuance of shipping guarantee under Letter of Credit or Documentary collections.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuedShippingGuaranteeType")]
        public string? IssuedShippingGuaranteeType { get; set; }= default!;
    
        /// <summary>Specifies the LC reference under which the shipping guarantee has been requested.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcId")]
        public string? LcId { get; set; }= default!;
    
        /// <summary>The principal amount of the guarantee request initiated from internet banking</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mdIbPrincipalAmountMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? MdIbPrincipalAmountMovement { get; set; }= default!;
    
        /// <summary>To specify the date from which the increase/decrease of the guarantee amount is effective.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("movementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MovementDate { get; set; }= default!;
    
        /// <summary>Contains the new expiry date of data rights request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewExpiryDate { get; set; }= default!;
    
        /// <summary>Name that is displayed for the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        public string? CategoryName { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Specifies the amendment expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmendmentExpiryDate { get; set; }= default!;
    
        /// <summary>An Alternate reference for the Deal. This can be used to retrieve the Deal for amendment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateTransactionReference")]
        public string? AlternateTransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the pending invocation claims for specific customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingInvocationClaim")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? PendingInvocationClaim { get; set; }= default!;
    
        /// <summary>Indicates if the position is related to Loan, Deposit ,FX-Forward/FX-Swap</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ContractType { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous12 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Specifies an alternative easy means of referencing the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerMnemonic")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerMnemonic { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous13 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 20D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AutoExpiry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous14 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries2>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? InvocationAmount { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? InvocationStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous15 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? Status { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous16 
    {
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amounts")]
        public System.Collections.Generic.ICollection<Amounts>? Amounts { get; set; }= default!;
    
        /// <summary>The account from which the invocation amount will be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimDebitAccounts")]
        public System.Collections.Generic.ICollection<ClaimDebitAccounts>? ClaimDebitAccounts { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDates")]
        public System.Collections.Generic.ICollection<DebitValueDates>? DebitValueDates { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIds")]
        public System.Collections.Generic.ICollection<CreditAccountIds>? CreditAccountIds { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRates")]
        public System.Collections.Generic.ICollection<ExchangeRates>? ExchangeRates { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries3>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatuses")]
        public System.Collections.Generic.ICollection<InvocationStatuses>? InvocationStatuses { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous17 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries4>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>This field determines whether the shipping guarantee is issued under LC Documents or Import Collection documents. Allowed values: - LC - COLLECTION</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shippingGuaranteeIssuedFor")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ShippingGuaranteeIssuedFor { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Indicates the LC reference under which the guarantee is to be opened</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LCReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous18 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries5>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Refers to the type of the contract that is being issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds3 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds4 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges2 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses2 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee2 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds5 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaryaddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryaddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiaryaddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges3 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses3 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee3 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds6 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaryaddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryaddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiaryaddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges4 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses4 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee4 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds7 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses3 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges5 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses5 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee5 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds8 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses4 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges6 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses6 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee6 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds9 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses5 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges7 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses7 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee7 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds10 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses6 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges8 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses8 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee8 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryId 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses7 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges9 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses9 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee9 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ShippingGuaranteeUnderCollectionBodyLiquidationMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Liquidation Mode")]
        Liquidation_Mode = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryId2 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses8 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges10 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses10 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee10 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ShippingGuaranteeUnderCollectionResponseBodyLiquidationMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Liquidation Mode")]
        Liquidation_Mode = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds11 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses9 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PincipalMovements 
    {
        /// <summary>The field to change the principal movement over the lifetime of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncreaseDecreaseAmount { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The amount to be released under syndication when there is negative principal movement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginToBeReleased")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? MarginToBeReleased { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Texts 
    {
        /// <summary>Free format field to allow input of any extra information about the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails3>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbClaimNarratives 
    {
        /// <summary>Field to input queries or instructions to the CIB customer while processing an invocation claim under a guarantee issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibClaimNarrative")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IbClaimNarrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges11 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses11 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee11 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds12 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses10 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("BeneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PincipalMovements2 
    {
        /// <summary>The field to change the principal movement over the lifetime of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncreaseDecreaseAmount { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>The amount to be released under syndication when there is negative principal movement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginToBeReleased")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? MarginToBeReleased { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Texts2 
    {
        /// <summary>Free format field to allow input of any extra information about the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails4>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbClaimNarratives2 
    {
        /// <summary>Field to input queries or instructions to the CIB customer while processing an invocation claim under a guarantee issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibClaimNarrative")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IbClaimNarrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges12 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses12 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee12 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds13 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficairyAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficairyAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficairyAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds14 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficairyAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficairyAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficairyAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternetBankingClaimNarratives 
    {
        /// <summary>Instruction provided to CIB customer when an invocation is received under guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internetBankingClaimNarrative")]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string? InternetBankingClaimNarrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous19 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries6>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDates")]
        public System.Collections.Generic.ICollection<DebitValueDates2>? DebitValueDates { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountIds")]
        public System.Collections.Generic.ICollection<DebitAccountIds>? DebitAccountIds { get; set; }= default!;
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDates")]
        public System.Collections.Generic.ICollection<CreditValueDates>? CreditValueDates { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountIds")]
        public System.Collections.Generic.ICollection<CreditAccountIds2>? CreditAccountIds { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amounts")]
        public System.Collections.Generic.ICollection<Amounts2>? Amounts { get; set; }= default!;
    
        /// <summary>Correspondent bank, where our nostro account is held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correspondentBanks")]
        public System.Collections.Generic.ICollection<CorrespondentBanks>? CorrespondentBanks { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? InvocationStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds15 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses11 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges13 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses13 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee13 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds16 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses12 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges14 
    {
        /// <summary>The date on which the charge will be debited to the charge account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ChargeDate { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>The account from which the Charges will be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitChargeAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitChargeAccount { get; set; }= default!;
    
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ChargeCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankAddresses14 
    {
        /// <summary>Hold the name and address of the RECEIVING.BANK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DetailsOfGuarantee14 
    {
        /// <summary>This field contains all terms, conditions and details of the guarantee undertaking. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("detailOfGuarantee")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? DetailOfGuarantee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitExceedReasons 
    {
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReason")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? LimitExceedReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OtherInformations 
    {
        /// <summary>Field to input any information that needs to be provided with regard to the issuance of guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? OtherInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails2 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitExceedReasons2 
    {
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReason")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? LimitExceedReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OtherInformations2 
    {
        /// <summary>Field to input any information that needs to be provided with regard to the issuance of guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? OtherInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PrincipalBalances 
    {
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Records the principal balance on the deal at each stage throughout the life of the deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalBalance")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? PrincipalBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClauseNames 
    {
        /// <summary>Contains a short meaningful description of the MD.CLAUSES narrative for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clauseName")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ClauseName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryIds17 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees5 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails5>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReasons")]
        public System.Collections.Generic.ICollection<LimitExceedReasons4>? LimitExceedReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks3 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers3 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InformationDetail 
    {
        [System.Text.Json.Serialization.JsonPropertyName("otherInformations")]
        public System.Collections.Generic.ICollection<OtherInformations4>? OtherInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvocationDetails 
    {
        /// <summary>Amount of invocation received under a guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationAmount")]
        public System.Collections.Generic.ICollection<double>? InvocationAmount { get; set; }= default!;
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        public System.Collections.Generic.ICollection<string>? DebitValueDate { get; set; }= default!;
    
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        public System.Collections.Generic.ICollection<string>? InvocationStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryDetails 
    {
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Specifies the street name of the beneficiary customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerStreet")]
        public string? CustomerStreet { get; set; }= default!;
    
        /// <summary>Specifies the town country of the beneficiary customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerTownCountry")]
        public string? CustomerTownCountry { get; set; }= default!;
    
        /// <summary>Specifies the country name of the beneficiary customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCountry")]
        public string? CustomerCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerAddresses 
    {
        /// <summary>Specifies the address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvocationBeneficiaryIds 
    {
        /// <summary>Specifies the name of the beneficiary customer for the guarantee invocation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationBeneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InvocationBeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks4 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers4 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Guarantees6 
    {
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetails")]
        public System.Collections.Generic.ICollection<GuaranteeDetails6>? GuaranteeDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccounts 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        public string? ChargeAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CommissionAccountDetails 
    {
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        public string? CommissionAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments2 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        public string? SupportDocument { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OtherInformations3 
    {
        /// <summary>Field to input any information that needs to be provided with regard to the issuance of guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInformation")]
        public string? OtherInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitExceedReasons3 
    {
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReason")]
        public string? LimitExceedReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PrincipalMovementDetails 
    {
        /// <summary>Specifies the amount for which the guarantee request is placed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("principalMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? PrincipalMovement { get; set; }= default!;
    
        /// <summary>To specify the date from which the increase/decrease of the guarantee amount is effective.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("movementEffectiveDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MovementEffectiveDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries2 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Amounts 
    {
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? Amount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClaimDebitAccounts 
    {
        /// <summary>The account from which the invocation amount will be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("claimDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ClaimDebitAccount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DebitValueDates 
    {
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CreditAccountIds 
    {
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CreditAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExchangeRates 
    {
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ExchangeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries3 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InvocationStatuses 
    {
        /// <summary>Indicates the status of Invocation received under a guarantee.  Allowed values: - PROCESS - EXECUTE - CANCEL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("invocationStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? InvocationStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries4 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries5 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails3 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails4 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries6 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DebitValueDates2 
    {
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? DebitValueDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DebitAccountIds 
    {
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public string? DebitAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CreditValueDates 
    {
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? CreditValueDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CreditAccountIds2 
    {
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public string? CreditAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Amounts2 
    {
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CorrespondentBanks 
    {
        /// <summary>Correspondent bank, where our nostro account is held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correspondentBank")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CorrespondentBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails5 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitExceedReasons4 
    {
        /// <summary>Specifies the reason for request of the guarantee when the system prompts that the limit is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExceedReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LimitExceedReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OtherInformations4 
    {
        /// <summary>Field to input any information that needs to be provided with regard to the issuance of guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? OtherInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeDetails6 
    {
        /// <summary>Specifies the terms and conditions of the guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? GuaranteeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016