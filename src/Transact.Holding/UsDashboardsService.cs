//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.UsDashboards
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUsDashboardsService
    {
        /// <summary>Get Customer account holdings</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="holdingsType">Contains the types of customer holdings</param>
        /// <param name="holdingsId">Contains the identifier specific to the holding details of the customer</param>
        /// <param name="getPreferredHoldings">Flag to fetch the preferred holding details (JWT required)</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsCustomerHoldingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsCustomerHoldingsResponse> GetUsCustomerHoldingsAsync(string customerId, string? holdingsType, string? holdingsId, string? getPreferredHoldings, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Customer account holdings</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="holdingsType">Contains the types of customer holdings</param>
        /// <param name="holdingsId">Contains the identifier specific to the holding details of the customer</param>
        /// <param name="getPreferredHoldings">Flag to fetch the preferred holding details (JWT required)</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsCustomerHoldingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsCustomerHoldingsResponse> GetUsCustomerHoldingsAsync(string customerId, string? holdingsType, string? holdingsId, string? getPreferredHoldings, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Deposit information for publishing in dashboard</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="balanceTypes">Type of balance (e.g. current balance, credit interest accrued, deferred commission, etc.) as defined in the institution's accounting schemas.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsDepositsDashboardResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsDepositsDashboardResponse> GetUsDepositsDashboardAsync(string accountId, string? balanceTypes, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Deposit information for publishing in dashboard</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="balanceTypes">Type of balance (e.g. current balance, credit interest accrued, deferred commission, etc.) as defined in the institution's accounting schemas.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsDepositsDashboardResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsDepositsDashboardResponse> GetUsDepositsDashboardAsync(string accountId, string? balanceTypes, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list of accounts, the product and account details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="limitReference">Identifies the credit limit reference for the underlying account.</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsAccountsHoldingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsAccountsHoldingsResponse> GetUsAccountsHoldingsAsync(string customerId, string? accountId, string? productId, string? currencyId, string? limitReference, string? arrangementId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of accounts, the product and account details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="limitReference">Identifies the credit limit reference for the underlying account.</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsAccountsHoldingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsAccountsHoldingsResponse> GetUsAccountsHoldingsAsync(string customerId, string? accountId, string? productId, string? currencyId, string? limitReference, string? arrangementId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get account information for dashboard</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsAccountsDashboardResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsAccountsDashboardResponse> GetUsAccountsDashboardAsync(string accountId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get account information for dashboard</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UsAccountsDashboardResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsAccountsDashboardResponse> GetUsAccountsDashboardAsync(string accountId, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>UsCustomerHoldingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsCustomerHoldingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UsCustomerHoldingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsCustomerHoldingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>UsDepositsDashboardResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsDepositsDashboardResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UsDepositsDashboardResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsDepositsDashboardResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>UsAccountsHoldingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsAccountsHoldingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UsAccountsHoldingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsAccountsHoldingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>UsAccountsDashboardResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsAccountsDashboardResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UsAccountsDashboardResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UsAccountsDashboardResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Contains the templates used for payment transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("products")]
        public System.Collections.Generic.ICollection<Products>? Products { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("jointholders")]
        public System.Collections.Generic.ICollection<Jointholders>? Jointholders { get; set; }= default!;
    
        /// <summary>The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineId")]
        public string? ProductLineId { get; set; }= default!;
    
        /// <summary>Debits that are yet to be processed and placed as holds on accounts, but will not be available for use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingDebits")]
        public double? PendingDebits { get; set; }= default!;
    
        /// <summary>Credit transactions that are yet to cleared and made available in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingCredits")]
        public double? PendingCredits { get; set; }= default!;
    
        /// <summary>When tiered interest is applied, holds the blended APY considering the tiered interest rates. Blended APY is calculated based on principal amount in the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blendedAPY")]
        public double? BlendedAPY { get; set; }= default!;
    
        /// <summary>Indicates the period to which the BID and OFFER rates apply</summary>
        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string? Term { get; set; }= default!;
    
        /// <summary>Unique and unambiguous identification of a branch of a financial institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchId")]
        public string? BranchId { get; set; }= default!;
    
        /// <summary>Contains the description for the Organization Code defined at Branch Level.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchName")]
        public string? BranchName { get; set; }= default!;
    
        /// <summary>Routing number of the bank where the account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public double? RoutingNumber { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Nickname of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nickName")]
        public string? NickName { get; set; }= default!;
    
        /// <summary>Contains the final balances of all accounts after all transactions have taken place</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalAccountBalances")]
        public double? TotalAccountBalances { get; set; }= default!;
    
        /// <summary>Contains the final balances of all deposit accounts after all transactions have taken place</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDepositBalances")]
        public double? TotalDepositBalances { get; set; }= default!;
    
        /// <summary>Contains the final balances of all loans after all payments have taken place</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalLoanBalances")]
        public double? TotalLoanBalances { get; set; }= default!;
    
        /// <summary>Contains the final balances of all the external accounts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalExtAccountBalances")]
        public string? TotalExtAccountBalances { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeTypes")]
        public System.Collections.Generic.ICollection<ChargeTypes>? ChargeTypes { get; set; }= default!;
    
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRates")]
        public System.Collections.Generic.ICollection<TaxRates>? TaxRates { get; set; }= default!;
    
        /// <summary>Specifies the charges which has incurred with processing of the cheque</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; }= default!;
    
        /// <summary>Indicates settlement conditions associated with the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlements")]
        public System.Collections.Generic.ICollection<Settlements>? Settlements { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("jointholders")]
        public System.Collections.Generic.ICollection<Jointholders2>? Jointholders { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Indicates a date or period within which an account gets matured</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturesIn")]
        public string? MaturesIn { get; set; }= default!;
    
        /// <summary>Indicates cooling off period for an account until which pre-closure can be triggered without incurring any fees or charges.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("coolingOffDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CoolingOffDate { get; set; }= default!;
    
        /// <summary>Indicates the period to which the BID and OFFER rates apply</summary>
        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string? Term { get; set; }= default!;
    
        /// <summary>The monetary amount applied to the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termAmount")]
        public double? TermAmount { get; set; }= default!;
    
        /// <summary>Indicates the Period beyond which a contract is cancelled if it not fully funded in case of deposit or fully disbursed in case of the loan</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationPeriod")]
        public string? CancellationPeriod { get; set; }= default!;
    
        /// <summary>Indicates the early redemption fee that is associated during closure before account maturity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("earlyRedemptionFee")]
        public double? EarlyRedemptionFee { get; set; }= default!;
    
        /// <summary>Indicates fee charged for the withdrawals</summary>
        [System.Text.Json.Serialization.JsonPropertyName("withdrawalFee")]
        public string? WithdrawalFee { get; set; }= default!;
    
        /// <summary>Identifies the bid rate of the related currency for the defined time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        public string? InterestRate { get; set; }= default!;
    
        /// <summary>Indicates interest accumulated for an account for the defined time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualAmount")]
        public double? AccrualAmount { get; set; }= default!;
    
        /// <summary>The amount of interest that has been accrued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accruedInterest")]
        public double? AccruedInterest { get; set; }= default!;
    
        /// <summary>Indicates if the payment is Customer (C) type or Bank (B) type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentType")]
        public string? PaymentType { get; set; }= default!;
    
        /// <summary>Indicates the number of days within which an contract gets matured</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityInDays")]
        public string? MaturityInDays { get; set; }= default!;
    
        /// <summary>Indicates number of days remaining for maturity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remainingMaturityInDays")]
        public string? RemainingMaturityInDays { get; set; }= default!;
    
        /// <summary>Indicates the total amount which will be lent or deposited for the term</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commitmentAmount")]
        public double? CommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount expected to be deposited by the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expectedBalance")]
        public double? ExpectedBalance { get; set; }= default!;
    
        /// <summary>Flag to indicate whether withdrawals are applicable for the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowWithdrawal")]
        public string? AllowWithdrawal { get; set; }= default!;
    
        /// <summary>Indicates an unallocated credit amount to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unspecifiedCredit")]
        public double? UnspecifiedCredit { get; set; }= default!;
    
        /// <summary>Flag to indicate whether deposit is allowed to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowDeposit")]
        public string? AllowDeposit { get; set; }= default!;
    
        /// <summary>Flag to indicate whether withdrawals are allowed to an unallocated fund available in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allowWithdrawalUnclearedCredit")]
        public string? AllowWithdrawalUnclearedCredit { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>When tiered interest is applied, holds the blended APY considering the tiered interest rates. Blended APY is calculated based on principal amount in the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blendedAPY")]
        public double? BlendedAPY { get; set; }= default!;
    
        /// <summary>Credit transactions that are yet to cleared and made available in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingCredits")]
        public double? PendingCredits { get; set; }= default!;
    
        /// <summary>Unique and unambiguous identification of a branch of a financial institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchId")]
        public string? BranchId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Contains the description for the Organization Code defined at Branch Level.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchName")]
        public string? BranchName { get; set; }= default!;
    
        /// <summary>Contains the total number of credits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCredits")]
        public string? TotalCredits { get; set; }= default!;
    
        /// <summary>Routing number of the bank where the account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public double? RoutingNumber { get; set; }= default!;
    
        /// <summary>Contains the total number of debits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebits")]
        public string? TotalDebits { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public string? JointCustomerName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Nickname of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nickName")]
        public string? NickName { get; set; }= default!;
    
        /// <summary>The principal to be deposited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositAmount")]
        public double? DepositAmount { get; set; }= default!;
    
        /// <summary>last transaction amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaymentAmount")]
        public double? LastPaymentAmount { get; set; }= default!;
    
        /// <summary>Date last payment was made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPaymentDate { get; set; }= default!;
    
        /// <summary>This amount represents the total due amount for that period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDue")]
        public double? TotalDue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("jointholders")]
        public System.Collections.Generic.ICollection<Jointholders3>? Jointholders { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Nickname of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nickName")]
        public string? NickName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Holds the Customer's TAX/SSN Id.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxId")]
        public string? TaxId { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Routing number of the bank where the account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public double? RoutingNumber { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Shows reserved amount for the underlying account for a given balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]
        public double? LockedAmount { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workingBalance")]
        public double? WorkingBalance { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineActualBalance")]
        public double? OnlineActualBalance { get; set; }= default!;
    
        /// <summary>Available balance of the account which is the projected balance which includes the net movements of both debits and credits against the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBalance")]
        public double? AvailableBalance { get; set; }= default!;
    
        /// <summary>Identifies the message switch through which this message passed to or from its carrier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BankDate { get; set; }= default!;
    
        /// <summary>Date of the last business day processed for this Company. This field will be set with the date from Today table by the batch (overnight) processing system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastWorkingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastWorkingDate { get; set; }= default!;
    
        /// <summary>The identifier of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Unique and unambiguous identification of a branch of a financial institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchId")]
        public string? BranchId { get; set; }= default!;
    
        /// <summary>Contains the description for the Organization Code defined at Branch Level.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchName")]
        public string? BranchName { get; set; }= default!;
    
        /// <summary>The portion of an allocated credit limit that is available for the nominated customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableLimit")]
        public double? AvailableLimit { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The date the account is opened.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OpeningDate { get; set; }= default!;
    
        /// <summary>The date when the Security Account is to be closed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosureDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Balance taking into consideration all cleared funds booked against the account, including credit and reversed debit entries with a future exposure date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearedBalance")]
        public double? ClearedBalance { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The group, as defined by the institution, that the product belongs to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupId")]
        public string? ProductGroupId { get; set; }= default!;
    
        /// <summary>Debits that are yet to be processed and placed as holds on accounts, but will not be available for use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingDebits")]
        public double? PendingDebits { get; set; }= default!;
    
        /// <summary>Credit transactions that are yet to cleared and made available in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingCredits")]
        public double? PendingCredits { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccounts")]
        public System.Collections.Generic.ICollection<SharedLimitAccounts>? SharedLimitAccounts { get; set; }= default!;
    
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRates")]
        public System.Collections.Generic.ICollection<TaxRates2>? TaxRates { get; set; }= default!;
    
        /// <summary>Contains the sum of the cash interest expense (including that attributable to Capitalized Leases), net of cash interest income, of the Borrower and the Restricted Subsidiaries, determined on a consolidated basis.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interests")]
        public System.Collections.Generic.ICollection<Interests>? Interests { get; set; }= default!;
    
        /// <summary>Contains the account details which shares the interest among the eligible or joint customers.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccounts")]
        public System.Collections.Generic.ICollection<SharedInterestAccounts>? SharedInterestAccounts { get; set; }= default!;
    
        /// <summary>Specifies the charges which has incurred with processing of the cheque</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges2>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("jointholders")]
        public System.Collections.Generic.ICollection<Jointholders4>? Jointholders { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the opening actual balance of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openActualBalance")]
        public double? OpenActualBalance { get; set; }= default!;
    
        /// <summary>Contains the overdraft limit still available to be utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableOverdraftLimit")]
        public double? AvailableOverdraftLimit { get; set; }= default!;
    
        /// <summary>The date the account is opened.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OpeningDate { get; set; }= default!;
    
        /// <summary>Contains the approved overdraft limit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("approvedOverdraftLimit")]
        public double? ApprovedOverdraftLimit { get; set; }= default!;
    
        /// <summary>This field specifies the validity of the Limit, i.e. how long is it to remain in force</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitExpiryDate { get; set; }= default!;
    
        /// <summary>Total funds available in the account after all the ongoing transactions have been completed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableFunds")]
        public double? AvailableFunds { get; set; }= default!;
    
        /// <summary>Indicates the outstanding overdraft limit of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingOverdraftLimit")]
        public double? OutstandingOverdraftLimit { get; set; }= default!;
    
        /// <summary>Indicates the available balance allowed to use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineClearedBalance")]
        public double? OnlineClearedBalance { get; set; }= default!;
    
        /// <summary>Indicates the opening balance after clearing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openClearedBalance")]
        public double? OpenClearedBalance { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>Credit transactions that are yet to cleared and made available in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingCredits")]
        public double? PendingCredits { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Contains the total number of credits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCredits")]
        public string? TotalCredits { get; set; }= default!;
    
        /// <summary>Contains the total number of debits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebits")]
        public string? TotalDebits { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public string? JointCustomerName { get; set; }= default!;
    
        /// <summary>The principal to be deposited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositAmount")]
        public double? DepositAmount { get; set; }= default!;
    
        /// <summary>last transaction amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaymentAmount")]
        public double? LastPaymentAmount { get; set; }= default!;
    
        /// <summary>Date last payment was made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPaymentDate { get; set; }= default!;
    
        /// <summary>This amount represents the total due amount for that period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDue")]
        public double? TotalDue { get; set; }= default!;
    
        /// <summary>The identifier of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        public string? CompanyId { get; set; }= default!;
    
        /// <summary>Debits that are yet to be processed and placed as holds on accounts, but will not be available for use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingDebits")]
        public double? PendingDebits { get; set; }= default!;
    
        /// <summary>Unique and unambiguous identification of a branch of a financial institution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchId")]
        public string? BranchId { get; set; }= default!;
    
        /// <summary>Contains the description for the Organization Code defined at Branch Level.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("branchName")]
        public string? BranchName { get; set; }= default!;
    
        /// <summary>Routing number of the bank where the account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public double? RoutingNumber { get; set; }= default!;
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; }= default!;
    
        /// <summary>Nickname of the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nickName")]
        public string? NickName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Products 
    {
        /// <summary>Description of the product line, e.g. Client Consent for product line CONSENT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productLineName")]
        public string? ProductLineName { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>The group, as defined by the institution, that the product belongs to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupId")]
        public string? ProductGroupId { get; set; }= default!;
    
        /// <summary>Description of the product group</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupName")]
        public string? ProductGroupName { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Indicates the description of the Product</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productDescription")]
        public string? ProductDescription { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Short title given to the name of the arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shortTitle")]
        public string? ShortTitle { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>The identifier of the underlying Entity/Company/Branch.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]
        public string? CompanyCode { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Contains bank sort code or iban branch identifier for the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sortCode")]
        public string? SortCode { get; set; }= default!;
    
        /// <summary>Represents the International Bank Account Number (IBAN) of the account.  E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountIBAN")]
        public string? AccountIBAN { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workingBalance")]
        public double? WorkingBalance { get; set; }= default!;
    
        /// <summary>The date the account is opened.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OpeningDate { get; set; }= default!;
    
        /// <summary>The company in which payment is processed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyName")]
        public string? CompanyName { get; set; }= default!;
    
        /// <summary>Indicates the preferred product of the arrangement contract. This is required for only new arrangements and product change is not permitted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preferredProduct")]
        public string? PreferredProduct { get; set; }= default!;
    
        /// <summary>Indicates to position of the preferred product of the arrangement contract. This is required for only new arrangements and product change is not permitted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preferredProductPosition")]
        public string? PreferredProductPosition { get; set; }= default!;
    
        /// <summary>Indicates the label of the Preferred Product of the Arrangement contract. This is required for only new arrangements and product change is not permitted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preferredProductLabel")]
        public string? PreferredProductLabel { get; set; }= default!;
    
        /// <summary>The act of permitting, especially in giving formal consent to access a particular file or repository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("permission")]
        public string? Permission { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineActualBalance")]
        public double? OnlineActualBalance { get; set; }= default!;
    
        /// <summary>Available balance of the account which is the projected balance which includes the net movements of both debits and credits against the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBalance")]
        public double? AvailableBalance { get; set; }= default!;
    
        /// <summary>Contains the maximum amount available to be drawn</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBalanceWithLimit")]
        public double? AvailableBalanceWithLimit { get; set; }= default!;
    
        /// <summary>Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingAmount")]
        public double? OutstandingAmount { get; set; }= default!;
    
        /// <summary>The amount paid out.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paidOutAmount")]
        public double? PaidOutAmount { get; set; }= default!;
    
        /// <summary>Status of the arrangement. E.g. AUTH, CLOSE, UNAUTH etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementStatus")]
        public string? ArrangementStatus { get; set; }= default!;
    
        /// <summary>Contains the amount borrowed or the part of the amount borrowed which remains unpaid</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPrincipal")]
        public double? TotalPrincipal { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Contains the id associated to the connect reference respective to a transaction of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("connectionId")]
        public string? ConnectionId { get; set; }= default!;
    
        /// <summary>Contains the last updated balances details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balancesLastUpdated")]
        public string? BalancesLastUpdated { get; set; }= default!;
    
        /// <summary>Contains the list of last updated transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionsLastUpdated")]
        public string? TransactionsLastUpdated { get; set; }= default!;
    
        /// <summary>Indicates the logo of the bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankLogo")]
        public string? BankLogo { get; set; }= default!;
    
        /// <summary>Contains the name of the external source provider for the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extSourceProvider")]
        public string? ExtSourceProvider { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Contains the connection status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("connectionStatus")]
        public string? ConnectionStatus { get; set; }= default!;
    
        /// <summary>Contains the connection sub status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("connectionSubStatus")]
        public string? ConnectionSubStatus { get; set; }= default!;
    
        /// <summary>Denotes the next refresh time</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nextRefreshAvailableAt")]
        public string? NextRefreshAvailableAt { get; set; }= default!;
    
        /// <summary>Contains the swift reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("acctSwiftRef")]
        public string? AcctSwiftRef { get; set; }= default!;
    
        /// <summary>Denotes the external account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extAccountNumber")]
        public string? ExtAccountNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("paymentTemplates")]
        public System.Collections.Generic.ICollection<PaymentTemplates>? PaymentTemplates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Jointholders 
    {
        /// <summary>Joint or related customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomer")]
        public double? JointCustomer { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public string? JointCustomerName { get; set; }= default!;
    
        /// <summary>Indicates role of a customer for an arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRole")]
        public string? CustomerRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeTypes 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        public string? ChargeType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxRates 
    {
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRate")]
        public string? TaxRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>The frequency at which a payment is required to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentFrequency")]
        public string? PaymentFrequency { get; set; }= default!;
    
        /// <summary>Indicates Payment type set to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeName")]
        public string? PaymentTypeName { get; set; }= default!;
    
        /// <summary>Indicates the Id of the product property</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        public string? PropertyName { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Indicates the payment frequency associated with the charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeSchedulePaymentValue")]
        public string? ChargeSchedulePaymentValue { get; set; }= default!;
    
        /// <summary>Interest paid from the start of current year till current date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPaidYtd")]
        public double? InterestPaidYtd { get; set; }= default!;
    
        /// <summary>Interest earned on the account since account opening</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPaid")]
        public double? InterestPaid { get; set; }= default!;
    
        /// <summary>End period in DDMM format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodTo { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Settlements 
    {
        /// <summary>Flag to indicate whether Payin Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payinSettlement")]
        public string? PayinSettlement { get; set; }= default!;
    
        /// <summary>Indicates the Payin Settlement Account. The account from which funds are to be debited against the payment type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payinAccountId")]
        public string? PayinAccountId { get; set; }= default!;
    
        /// <summary>Flag to indicate whether Payout Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payoutSettlement")]
        public string? PayoutSettlement { get; set; }= default!;
    
        /// <summary>Indicates the Payout Settlement Account. The account into which funds are to be credited against the payment type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payoutAccountId")]
        public string? PayoutAccountId { get; set; }= default!;
    
        /// <summary>The identifier of the product condition</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        public string? PropertyId { get; set; }= default!;
    
        /// <summary>The identifier of a condition that is used to build a product</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyClassId")]
        public string? PropertyClassId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Jointholders2 
    {
        /// <summary>Joint or related customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomer")]
        public string? JointCustomer { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public string? JointCustomerName { get; set; }= default!;
    
        /// <summary>Indicates role of a customer for an arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRole")]
        public string? CustomerRole { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Jointholders3 
    {
        /// <summary>Joint or related customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomer")]
        public System.Collections.Generic.ICollection<double>? JointCustomer { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public System.Collections.Generic.ICollection<string>? JointCustomerName { get; set; }= default!;
    
        /// <summary>Role of joint customer with the main customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointRelationRoleIds")]
        public System.Collections.Generic.ICollection<string>? JointRelationRoleIds { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SharedLimitAccounts 
    {
        /// <summary>Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccount")]
        public string? SharedLimitAccount { get; set; }= default!;
    
        /// <summary>Indicates the type of shared limit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccountType")]
        public string? SharedLimitAccountType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxRates2 
    {
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRate")]
        public string? TaxRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Interests 
    {
        /// <summary>Contains the property name of loan interest such as penalty Interest and principal interest.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPropertyName")]
        public string? InterestPropertyName { get; set; }= default!;
    
        /// <summary>Indicates the interest compound type of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCompoundType")]
        public string? InterestCompoundType { get; set; }= default!;
    
        /// <summary>Indicates the interest compound type value of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCompoundTypeValue")]
        public string? InterestCompoundTypeValue { get; set; }= default!;
    
        /// <summary>Interest paid from the start of current year till current date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPaidYtd")]
        public double? InterestPaidYtd { get; set; }= default!;
    
        /// <summary>Interest earned on the account since account opening</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPaid")]
        public double? InterestPaid { get; set; }= default!;
    
        /// <summary>End period in DDMM format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodTo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("consolidateInterests")]
        public System.Collections.Generic.ICollection<ConsolidateInterests>? ConsolidateInterests { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SharedInterestAccounts 
    {
        /// <summary>Contains the account details which shares the interest among the eligible or joint customers.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccount")]
        public string? SharedInterestAccount { get; set; }= default!;
    
        /// <summary>Indicates the type of shared interest account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccountType")]
        public string? SharedInterestAccountType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges2 
    {
        /// <summary>The frequency at which a payment is required to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentFrequency")]
        public string? PaymentFrequency { get; set; }= default!;
    
        /// <summary>Indicates Payment type set to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeName")]
        public string? PaymentTypeName { get; set; }= default!;
    
        /// <summary>Indicates the Id of the product property</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        public string? PropertyName { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Indicates the payment frequency associated with the charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeSchedulePaymentValue")]
        public string? ChargeSchedulePaymentValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Jointholders4 
    {
        /// <summary>Joint or related customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomer")]
        public double? JointCustomer { get; set; }= default!;
    
        /// <summary>Name of Joint Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomerName")]
        public string? JointCustomerName { get; set; }= default!;
    
        /// <summary>Role of joint customer with the main customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointRelationRoleIds")]
        public string? JointRelationRoleIds { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaymentTemplates 
    {
        /// <summary>Contains the template used for payment transactions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentTemplate")]
        public string? PaymentTemplate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConsolidateInterests 
    {
        /// <summary>Contains the sum of the cash interest expense and net of cash interest income of the borrower and the restricted subsidiaries determined on a consolidated basis</summary>
        [System.Text.Json.Serialization.JsonPropertyName("consolidateInterest")]
        public string? ConsolidateInterest { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016