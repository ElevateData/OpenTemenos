//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.SwapNpvRevaluation
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISwapNpvRevaluationService
    {
        /// <summary>Retrieves the currency wise daily profit/loss details for net present value method of revaluation.</summary>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVRevaluationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVRevaluationsResponse> GetSwapNPVRevaluationsAsync(string? currency, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the currency wise daily profit/loss details for net present value method of revaluation.</summary>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVRevaluationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVRevaluationsResponse> GetSwapNPVRevaluationsAsync(string? currency, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves cash flow details for selected swap contract and calculates the present value total cash flow.</summary>
        /// <param name="contractId">Identifies the unique identifier of the transaction or contract.</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVDetailsResponse> GetSwapNPVDetailsAsync(string? contractId, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves cash flow details for selected swap contract and calculates the present value total cash flow.</summary>
        /// <param name="contractId">Identifies the unique identifier of the transaction or contract.</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVDetailsResponse> GetSwapNPVDetailsAsync(string? contractId, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the present value of cross currency interest rate swap contracts and calculates the daily profit and loss.</summary>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVCurrencyRevaluationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVCurrencyRevaluationsResponse> GetSwapNPVCurrencyRevaluationsAsync(string? currency, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the present value of cross currency interest rate swap contracts and calculates the daily profit and loss.</summary>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="discountRate">The rate used to discount a future cash flow.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SwapNPVCurrencyRevaluationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwapNPVCurrencyRevaluationsResponse> GetSwapNPVCurrencyRevaluationsAsync(string? currency, string? discountRate, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>SwapNPVRevaluationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVRevaluationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SwapNPVRevaluationsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVRevaluationsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SwapNPVDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SwapNPVDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>SwapNPVCurrencyRevaluationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVCurrencyRevaluationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SwapNPVCurrencyRevaluationsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwapNPVCurrencyRevaluationsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }= default!;
    
        /// <summary>The total present value of asset side cash flows.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueAsset")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueAsset { get; set; }= default!;
    
        /// <summary>The total present value of liability side cash flows.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueLiability")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueLiability { get; set; }= default!;
    
        /// <summary>Cumulative profit or loss till date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossToDate")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ProfitLossToDate { get; set; }= default!;
    
        /// <summary>Profit or loss for the day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossToday")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ProfitLossToday { get; set; }= default!;
    
        /// <summary>Profit or loss till yesterday.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitTillYesterday")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ProfitTillYesterday { get; set; }= default!;
    
        /// <summary>Reference number of the originating transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The type of event schedule. The main ones are interest payment (IP) , principal increase (PI), rate reset (RR).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("scheduleType")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ScheduleType { get; set; }= default!;
    
        /// <summary>The schedule type description.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("scheduleTypeDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ScheduleTypeDescription { get; set; }= default!;
    
        /// <summary>Contains the date on which the transaction or payment gets initiated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</summary>
        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }= default!;
    
        /// <summary>Cash movement (in or out) from the institution. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("cashFlow")]
        public double? CashFlow { get; set; }= default!;
    
        /// <summary>Number of days between two given dates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysDifference")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? DaysDifference { get; set; }= default!;
    
        /// <summary>Number of days in a given period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodDays")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? PeriodDays { get; set; }= default!;
    
        /// <summary>The interest rate payable on Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("couponRates")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CouponRates { get; set; }= default!;
    
        /// <summary>The cumulative present value for the cash flow time buckets.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cumulativePresentValue")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CumulativePresentValue { get; set; }= default!;
    
        /// <summary>Zero coupon rate used in discounting the cash flows.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("zeroDiscountRates")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ZeroDiscountRates { get; set; }= default!;
    
        /// <summary>The value of a future cash flow when discounted.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentValue")]
        public double? PresentValue { get; set; }= default!;
    
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Type of Interest rate swap.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swapType")]
        public string? SwapType { get; set; }= default!;
    
        /// <summary>Identifies the type of interest rate swap leg as asset or liability.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legType")]
        public string? LegType { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Fixed or floating rate.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateType")]
        public string? RateType { get; set; }= default!;
    
        /// <summary>The counterparty ID  for the  deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterparty")]
        public string? Counterparty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Identifies the unique identifier of the transaction or contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ContractId { get; set; }= default!;
    
        /// <summary>Type of Interest rate swap.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swapType")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? SwapType { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Currency of the asset.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assetCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AssetCurrency { get; set; }= default!;
    
        /// <summary>The total present value of asset side cash flows.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueAsset")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueAsset { get; set; }= default!;
    
        /// <summary>The total present value of asset side cash flows  in local currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueAssetLocalCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueAssetLocalCurrency { get; set; }= default!;
    
        /// <summary>Currency of the liability.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? LiabilityCurrency { get; set; }= default!;
    
        /// <summary>The total present value of liability side cash flows.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueLiability")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueLiability { get; set; }= default!;
    
        /// <summary>The total present value of liability side cash flows  in local currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netPresentValueLiabilityLocalCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? NetPresentValueLiabilityLocalCurrency { get; set; }= default!;
    
        /// <summary>Cumulative profit or loss till date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossToDate")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ProfitLossToDate { get; set; }= default!;
    
        /// <summary>Profit or loss for the day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossToday")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ProfitLossToday { get; set; }= default!;
    
        /// <summary>Profit or loss till yesterday.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitTillYesterday")]
        public double? ProfitTillYesterday { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016