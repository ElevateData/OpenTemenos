//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.Entitlements
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEntitlementService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves pending entitlements</summary>
        /// <param name="diaryId">The identifier of the diary</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="eventType">Event Type of the corporate action</param>
        /// <param name="accountOfficerId">The identifier of the department head or specific account officer responsible for the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PendingEntitlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PendingEntitlementsResponse> GetPendingEntitlementsAsync(string? diaryId = null, string? portfolioId = null, string? customerId = null, string? eventType = null, string? accountOfficerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the entitlement details</summary>
        /// <param name="entitlementId">The identifier of the entitlement</param>
        /// <param name="diaryId">The identifier of the diary</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="eventType">Event Type of the corporate action</param>
        /// <param name="accountOfficerId">The identifier of the department head or specific account officer responsible for the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityEntitlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityEntitlementsResponse> GetSecurityEntitlementsAsync(string entitlementId, string? diaryId = null, string? portfolioId = null, string? eventType = null, string? accountOfficerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the entitlement</summary>
        /// <param name="entitlementId">The identifier of the entitlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecurityEntitlementResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityEntitlementResponse> UpdateSecurityEntitlementAsync(string entitlementId, SecurityEntitlement payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates buy sell rights</summary>
        /// <param name="entitlementId">The identifier of the entitlement</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>EntitlementBuySellRightsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntitlementBuySellRightsResponse> GetEntitlementBuySellRightsAsync(string entitlementId, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves entitlement information</summary>
        /// <param name="entitlementId">The identifier of the entitlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>EntitlementBuySellRightsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntitlementBuySellRightsResponse> UpdateEntitlementBuySellRightsAsync(string entitlementId, EntitlementBuySellRights payload, bool? validate_only = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves unauthorised entitlements</summary>
        /// <param name="diaryId">The identifier of the diary</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="securityUpdate">Indicates to update Security Position based on Corporate Action Event processing</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="eventType">Event Type of the corporate action</param>
        /// <param name="accountOfficerId">The identifier of the department head or specific account officer responsible for the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>EntitlementApprovalsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntitlementApprovalsResponse> GetEntitlementApprovalsAsync(string? diaryId = null, string? instrumentId = null, string? securityUpdate = null, string? portfolioId = null, string? customerId = null, string? eventType = null, string? accountOfficerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PendingEntitlementsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PendingEntitlementsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PendingEntitlementsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PendingEntitlementsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityEntitlement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlement 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityEntitlementBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlementBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("optionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails>? OptionDetails { get; set; }= default!;
    
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescriptions")]
        public System.Collections.Generic.ICollection<SellBuyOptionDescriptions>? SellBuyOptionDescriptions { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmounts")]
        public System.Collections.Generic.ICollection<LocalTaxAmounts>? LocalTaxAmounts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventResult")]
        public System.Collections.Generic.ICollection<EventResult>? EventResult { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventOptionDetails")]
        public System.Collections.Generic.ICollection<EventOptionDetails>? EventOptionDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrencyTax")]
        public System.Collections.Generic.ICollection<AccountCurrencyTax>? AccountCurrencyTax { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The identifier of the diary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("diaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DiaryId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Nominal amount provided by the Depository / Issuer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EventQuantity { get; set; }= default!;
    
        /// <summary>Indicates the type of currency to which the account belongs</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The option selected from the total number of options available</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionSelected")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionSelected { get; set; }= default!;
    
        /// <summary>Option description or indicator for oversubscription</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OverOptionDescription { get; set; }= default!;
    
        /// <summary>Holds the price at which Over subscribed quantity is to be sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscriptionPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OverSubscriptionPrice { get; set; }= default!;
    
        /// <summary>Holds Amount of additional shares that the user want to subscribe</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscribedQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OverSubscribedQuantity { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of Source Tax that has previously been debited by initiator of the Corporate Action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initialSourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? InitialSourceTaxAmount { get; set; }= default!;
    
        /// <summary>This field Records the Foreign Fee amount charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFee")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ForeignFee { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>Exchange rate between the Portfolio Reference Currency and the Local Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrencyExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ReferenceCurrencyExchangeRate { get; set; }= default!;
    
        /// <summary>The tax calculated on the foreign charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFeeTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ForeignFeeTax { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Current status of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionStatus { get; set; }= default!;
    
        /// <summary>The external custodian where position is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalCustodian { get; set; }= default!;
    
        /// <summary>Currency in which the event occurs</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EventCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityEntitlementResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlementResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityEntitlementResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlementResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("optionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails2>? OptionDetails { get; set; }= default!;
    
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescriptions")]
        public System.Collections.Generic.ICollection<SellBuyOptionDescriptions2>? SellBuyOptionDescriptions { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmounts")]
        public System.Collections.Generic.ICollection<LocalTaxAmounts2>? LocalTaxAmounts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventResult")]
        public System.Collections.Generic.ICollection<EventResult2>? EventResult { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails2>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventOptionDetails")]
        public System.Collections.Generic.ICollection<EventOptionDetails2>? EventOptionDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrencyTax")]
        public System.Collections.Generic.ICollection<AccountCurrencyTax2>? AccountCurrencyTax { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The identifier of the diary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("diaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DiaryId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Nominal amount provided by the Depository / Issuer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EventQuantity { get; set; }= default!;
    
        /// <summary>Indicates the type of currency to which the account belongs</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The option selected from the total number of options available</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionSelected")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionSelected { get; set; }= default!;
    
        /// <summary>Option description or indicator for oversubscription</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OverOptionDescription { get; set; }= default!;
    
        /// <summary>Holds the price at which Over subscribed quantity is to be sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscriptionPrice")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OverSubscriptionPrice { get; set; }= default!;
    
        /// <summary>Holds Amount of additional shares that the user want to subscribe</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscribedQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OverSubscribedQuantity { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of Source Tax that has previously been debited by initiator of the Corporate Action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initialSourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? InitialSourceTaxAmount { get; set; }= default!;
    
        /// <summary>This field Records the Foreign Fee amount charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFee")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ForeignFee { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>Exchange rate between the Portfolio Reference Currency and the Local Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrencyExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ReferenceCurrencyExchangeRate { get; set; }= default!;
    
        /// <summary>The tax calculated on the foreign charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFeeTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ForeignFeeTax { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Current status of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionStatus { get; set; }= default!;
    
        /// <summary>The external custodian where position is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalCustodian { get; set; }= default!;
    
        /// <summary>Currency in which the event occurs</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EventCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>EntitlementBuySellRights</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementBuySellRights 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public EntitlementBuySellRightsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementBuySellRightsBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("optionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails3>? OptionDetails { get; set; }= default!;
    
        /// <summary>The identifier of the diary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("diaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DiaryId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Event Type of the corporate action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventType { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Represents the eligible rights position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsPosition")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? RightsPosition { get; set; }= default!;
    
        /// <summary>Denotes the sub account type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordType { get; set; }= default!;
    
        /// <summary>Denotes the sum of the Quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netNominal")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? NetNominal { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
        /// <summary>Specifies whether the transaction status will be updated based on the incoming MT566 confirmation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT566Confirmation")]
        public bool? MT566Confirmation { get; set; }= default!;
    
        /// <summary>MT565 message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT565Ref")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MT565Ref { get; set; }= default!;
    
        /// <summary>When set to processed, the security trade is created and authorised and the reference number is updated once the MT566 confirmation is received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT566Ref")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MT566Ref { get; set; }= default!;
    
        /// <summary>Status identifier of the account. The values are 'DELETED' if the account is closed, 'BLOCKED' is there are any posting restrictions &amp; 'ENABLED' for active accounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Status { get; set; }= default!;
    
    
    }
    
    /// <summary>EntitlementBuySellRightsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementBuySellRightsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public EntitlementBuySellRightsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementBuySellRightsResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("optionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails4>? OptionDetails { get; set; }= default!;
    
        /// <summary>The identifier of the diary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("diaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DiaryId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Event Type of the corporate action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventType { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Represents the eligible rights position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsPosition")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? RightsPosition { get; set; }= default!;
    
        /// <summary>Denotes the sub account type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordType { get; set; }= default!;
    
        /// <summary>Denotes the sum of the Quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netNominal")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? NetNominal { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
        /// <summary>Specifies whether the transaction status will be updated based on the incoming MT566 confirmation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT566Confirmation")]
        public bool? MT566Confirmation { get; set; }= default!;
    
        /// <summary>MT565 message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT565Ref")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MT565Ref { get; set; }= default!;
    
        /// <summary>When set to processed, the security trade is created and authorised and the reference number is updated once the MT566 confirmation is received</summary>
        [System.Text.Json.Serialization.JsonPropertyName("MT566Ref")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MT566Ref { get; set; }= default!;
    
        /// <summary>Status identifier of the account. The values are 'DELETED' if the account is closed, 'BLOCKED' is there are any posting restrictions &amp; 'ENABLED' for active accounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Status { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityEntitlementsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlementsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityEntitlementsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityEntitlementsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>EntitlementApprovalsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementApprovalsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public EntitlementApprovalsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EntitlementApprovalsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The identifier of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementId")]
        [System.ComponentModel.DataAnnotations.StringLength(44)]
        public string? EntitlementId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 14D)]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 6D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>All holders of the Security, specified as of this date are entitled to the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExDate { get; set; }= default!;
    
        /// <summary>The date to reply by</summary>
        [System.Text.Json.Serialization.JsonPropertyName("replyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReplyByDate { get; set; }= default!;
    
        /// <summary>The date on which corporate cash is actually paid to shareholder</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PayDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Security Number of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentId")]
        public string? RightsInstrumentId { get; set; }= default!;
    
        /// <summary>Name of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentName")]
        public string? RightsInstrumentName { get; set; }= default!;
    
        /// <summary>Event Type of the corporate action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        public string? EventType { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        public string? EventName { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public double? Rate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Current status of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? OptionStatus { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionQuantity { get; set; }= default!;
    
        /// <summary>Entitlement amount in Dividend currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("enitlementAmountInDividendCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EnitlementAmountInDividendCurrency { get; set; }= default!;
    
        /// <summary>The Dividend rate in Option Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dividendRateInOptionCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? DividendRateInOptionCurrency { get; set; }= default!;
    
        /// <summary>The amount resulting from the execution of a corporate action that the portfolio owner is entitled to receive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EntitlementAmount { get; set; }= default!;
    
        /// <summary>The currency of the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionCurrency { get; set; }= default!;
    
        /// <summary>Indicates whether the option will be selected by default if no instruction is provided by the account owner</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultOption")]
        public bool? DefaultOption { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>The corporate action cut-off date to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OptionReplyByDate { get; set; }= default!;
    
        /// <summary>The corporate action cut-off time to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByTime")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionReplyByTime { get; set; }= default!;
    
        /// <summary>Identifies the unique identifier of the activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentDetails")]
        public System.Collections.Generic.ICollection<NewInstrumentDetails>? NewInstrumentDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellBuyOptionDescriptions 
    {
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SellBuyOptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LocalTaxAmounts 
    {
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventResult 
    {
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Quantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("OptionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails5>? OptionDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventOptionDetails 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountCurrencyTax 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The manually entered tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("manualTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ManualTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails2 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionQuantity { get; set; }= default!;
    
        /// <summary>Entitlement amount in Dividend currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("enitlementAmountInDividendCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EnitlementAmountInDividendCurrency { get; set; }= default!;
    
        /// <summary>The Dividend rate in Option Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dividendRateInOptionCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? DividendRateInOptionCurrency { get; set; }= default!;
    
        /// <summary>The amount resulting from the execution of a corporate action that the portfolio owner is entitled to receive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? EntitlementAmount { get; set; }= default!;
    
        /// <summary>The currency of the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionCurrency { get; set; }= default!;
    
        /// <summary>Indicates whether the option will be selected by default if no instruction is provided by the account owner</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultOption")]
        public bool? DefaultOption { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>The corporate action cut-off date to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OptionReplyByDate { get; set; }= default!;
    
        /// <summary>The corporate action cut-off time to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByTime")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionReplyByTime { get; set; }= default!;
    
        /// <summary>Identifies the unique identifier of the activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentDetails")]
        public System.Collections.Generic.ICollection<NewInstrumentDetails2>? NewInstrumentDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellBuyOptionDescriptions2 
    {
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SellBuyOptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LocalTaxAmounts2 
    {
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventResult2 
    {
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Quantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("OptionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails6>? OptionDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventOptionDetails2 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountCurrencyTax2 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The manually entered tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("manualTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? ManualTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails3 
    {
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellBuyOptionDescription { get; set; }= default!;
    
        /// <summary>Option number is mapped from tag 13A in Option details sequence</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionNo")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? SellBuyOptionNo { get; set; }= default!;
    
        /// <summary>Denotes the rights security number for which there is an option to sell or buy rights</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuySec")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellBuySec { get; set; }= default!;
    
        /// <summary>The corporate action cut-off date to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OptionReplyByDate { get; set; }= default!;
    
        /// <summary>Specifies the Start date of action (Trading) period for the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeFromDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeFromDate { get; set; }= default!;
    
        /// <summary>Specifies the End date of action (Trading) period for the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeToDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeToDate { get; set; }= default!;
    
        /// <summary>The quantity of rights being sold or underlying security or rights security being purchased</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? SellBuyQuantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The consideration amount to be received or paid in the event currency (Quantity x Price).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("considAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConsidAmount { get; set; }= default!;
    
        /// <summary>The Id of the SEC.TRADE generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TradeReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails4 
    {
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellBuyOptionDescription { get; set; }= default!;
    
        /// <summary>Option number is mapped from tag 13A in Option details sequence</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionNo")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? SellBuyOptionNo { get; set; }= default!;
    
        /// <summary>Denotes the rights security number for which there is an option to sell or buy rights</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuySec")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellBuySec { get; set; }= default!;
    
        /// <summary>The corporate action cut-off date to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OptionReplyByDate { get; set; }= default!;
    
        /// <summary>Specifies the Start date of action (Trading) period for the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeFromDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeFromDate { get; set; }= default!;
    
        /// <summary>Specifies the End date of action (Trading) period for the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeToDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeToDate { get; set; }= default!;
    
        /// <summary>The quantity of rights being sold or underlying security or rights security being purchased</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? SellBuyQuantity { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The consideration amount to be received or paid in the event currency (Quantity x Price).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("considAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConsidAmount { get; set; }= default!;
    
        /// <summary>The Id of the SEC.TRADE generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TradeReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("optionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails7>? OptionDetails { get; set; }= default!;
    
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescriptions")]
        public System.Collections.Generic.ICollection<SellBuyOptionDescriptions3>? SellBuyOptionDescriptions { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmounts")]
        public System.Collections.Generic.ICollection<LocalTaxAmounts3>? LocalTaxAmounts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventResult")]
        public System.Collections.Generic.ICollection<EventResult3>? EventResult { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails3>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eventOptionDetails")]
        public System.Collections.Generic.ICollection<EventOptionDetails3>? EventOptionDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrencyTax")]
        public System.Collections.Generic.ICollection<AccountCurrencyTax3>? AccountCurrencyTax { get; set; }= default!;
    
        /// <summary>The identifier of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementId")]
        [System.ComponentModel.DataAnnotations.StringLength(97)]
        public string? EntitlementId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 14D)]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Nominal amount provided by the Depository / Issuer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventQuantity")]
        public double? EventQuantity { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 6D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>The identifier of the diary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("diaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? DiaryId { get; set; }= default!;
    
        /// <summary>All holders of the Security, specified as of this date are entitled to the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExDate { get; set; }= default!;
    
        /// <summary>The date to reply by</summary>
        [System.Text.Json.Serialization.JsonPropertyName("replyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReplyByDate { get; set; }= default!;
    
        /// <summary>The date on which corporate cash is actually paid to shareholder</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PayDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Security Number of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentId")]
        public string? RightsInstrumentId { get; set; }= default!;
    
        /// <summary>Name of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentName")]
        public string? RightsInstrumentName { get; set; }= default!;
    
        /// <summary>Event Type of the corporate action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        public string? EventType { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        public string? EventName { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public double? Rate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>The option selected from the total number of options available</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionSelected")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? OptionSelected { get; set; }= default!;
    
        /// <summary>Option description or indicator for oversubscription</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? OverOptionDescription { get; set; }= default!;
    
        /// <summary>Holds the price at which Over subscribed quantity is to be sold</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscriptionPrice")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? OverSubscriptionPrice { get; set; }= default!;
    
        /// <summary>Holds Amount of additional shares that the user want to subscribe</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overSubscribedQuantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 25D)]
        public double? OverSubscribedQuantity { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of Source Tax that has previously been debited by initiator of the Corporate Action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initialSourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? InitialSourceTaxAmount { get; set; }= default!;
    
        /// <summary>This field Records the Foreign Fee amount charged to the Customer for the trade.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFee")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? ForeignFee { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? Commission { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 15D)]
        public double? ExchangeRate { get; set; }= default!;
    
        /// <summary>Exchange rate between the Portfolio Reference Currency and the Local Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrencyExchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 15D)]
        public double? ReferenceCurrencyExchangeRate { get; set; }= default!;
    
        /// <summary>The tax calculated on the foreign charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreignFeeTax")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? ForeignFeeTax { get; set; }= default!;
    
        /// <summary>The net amount due to or from the Customer after +/- Charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? NetAmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Current status of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OptionStatus { get; set; }= default!;
    
        /// <summary>The external custodian where position is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalCustodian")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ExternalCustodian { get; set; }= default!;
    
        /// <summary>Currency in which the event occurs</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? EventCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>The identifier of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementId")]
        [System.ComponentModel.DataAnnotations.StringLength(44)]
        public string? EntitlementId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 14D)]
        public double? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The Portfolio's holding in the original security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("qualifyingHolding")]
        public double? QualifyingHolding { get; set; }= default!;
    
        /// <summary>Id of the securities depository.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 6D)]
        public double? DepositoryId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>All holders of the Security, specified as of this date are entitled to the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExDate { get; set; }= default!;
    
        /// <summary>The date to reply by</summary>
        [System.Text.Json.Serialization.JsonPropertyName("replyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReplyByDate { get; set; }= default!;
    
        /// <summary>The date on which corporate cash is actually paid to shareholder</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PayDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Security Number of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentId")]
        public string? RightsInstrumentId { get; set; }= default!;
    
        /// <summary>Name of the Rights Security which is being issued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rightsInstrumentName")]
        public string? RightsInstrumentName { get; set; }= default!;
    
        /// <summary>Event Type of the corporate action</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventType")]
        public string? EventType { get; set; }= default!;
    
        /// <summary>The name that is displayed for the event</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EventName { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public double? Rate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Current status of the entitlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? OptionStatus { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewInstrumentDetails 
    {
        /// <summary>The identifier of a new instrument </summary>
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NewInstrumentId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The ratio in which new shares are offered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ratio")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Ratio { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Book cost is equal to the asset's carrying value on the balance sheet</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? BookCost { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails5 
    {
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewInstrumentDetails2 
    {
        /// <summary>The identifier of a new instrument </summary>
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NewInstrumentId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The ratio in which new shares are offered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ratio")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Ratio { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Book cost is equal to the asset's carrying value on the balance sheet</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? BookCost { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails6 
    {
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? OptionQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails7 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? OptionQuantity { get; set; }= default!;
    
        /// <summary>Entitlement amount in Dividend currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("enitlementAmountInDividendCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? EnitlementAmountInDividendCurrency { get; set; }= default!;
    
        /// <summary>The Dividend rate in Option Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dividendRateInOptionCurrency")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 15D)]
        public double? DividendRateInOptionCurrency { get; set; }= default!;
    
        /// <summary>The amount resulting from the execution of a corporate action that the portfolio owner is entitled to receive</summary>
        [System.Text.Json.Serialization.JsonPropertyName("entitlementAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? EntitlementAmount { get; set; }= default!;
    
        /// <summary>The currency of the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? OptionCurrency { get; set; }= default!;
    
        /// <summary>Indicates whether the option will be selected by default if no instruction is provided by the account owner</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultOption")]
        public bool? DefaultOption { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Holds the source tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sourceTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? SourceTaxAmount { get; set; }= default!;
    
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Specifies the tax amount based on the commission charged</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerCommissionTax")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? CustomerCommissionTax { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>The corporate action cut-off date to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OptionReplyByDate { get; set; }= default!;
    
        /// <summary>The corporate action cut-off time to choose a particular option.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionReplyByTime")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? OptionReplyByTime { get; set; }= default!;
    
        /// <summary>Identifies the unique identifier of the activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentDetails")]
        public System.Collections.Generic.ICollection<NewInstrumentDetails3>? NewInstrumentDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SellBuyOptionDescriptions3 
    {
        /// <summary>The description of the sell/buy Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellBuyOptionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? SellBuyOptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LocalTaxAmounts3 
    {
        /// <summary>Holds the local tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? LocalTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventResult3 
    {
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 25D)]
        public double? Quantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("OptionDetails")]
        public System.Collections.Generic.ICollection<OptionDetails8>? OptionDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EventOptionDetails3 
    {
        /// <summary>The description of the Option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OptionDescription { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountCurrencyTax3 
    {
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>The manually entered tax amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("manualTaxAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? ManualTaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NewInstrumentDetails3 
    {
        /// <summary>The identifier of a new instrument </summary>
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? NewInstrumentId { get; set; }= default!;
    
        /// <summary>Contains the name of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newInstrumentName")]
        public string? NewInstrumentName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 25D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>The ratio in which new shares are offered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ratio")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? Ratio { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>Book cost is equal to the asset's carrying value on the balance sheet</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookCost")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? BookCost { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OptionDetails8 
    {
        /// <summary>The quantity of the option trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionQuantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? OptionQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016