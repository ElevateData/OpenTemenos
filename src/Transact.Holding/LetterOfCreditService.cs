//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.LetterOfCreditX
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILetterOfCreditService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a new drawing request to check the documents for letter of credit</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> CreateDrawingAsync(string drawingId, Drawing payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Overview details of letter of credit drawing</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> GetDrawingAsync(string drawingId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update drawing details</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> UpdateDrawingAsync(string drawingId, Drawing payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove drawing details</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> DeleteDrawingAsync(string drawingId, DrawingDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve drawing</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> ApproveDrawingAsync(string drawingId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Overview details of letter of credit advice text</summary>
        /// <param name="documentId">Based on documentCode, the field defaults the required document codes</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcDocumentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcDocumentResponse> GetLcDocumentAsync(string documentId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create letter of credit advice text</summary>
        /// <param name="documentId">Based on documentCode, the field defaults the required document codes</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcDocumentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcDocumentResponse> CreateLcDocumentAsync(string documentId, LcDocument payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update letter of credit advice text</summary>
        /// <param name="documentId">Based on documentCode, the field defaults the required document codes</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcDocumentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcDocumentResponse> UpdateLcDocumentAsync(string documentId, LcDocument payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete letter of credit advice text</summary>
        /// <param name="documentId">Based on documentCode, the field defaults the required document codes</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcDocumentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcDocumentResponse> DeleteLcDocumentAsync(string documentId, LcDocumentDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate letter of credit amendment</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> CreateLcAmendmentAsync(string letterOfCreditId, LcAmendment payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the letter of credit amendments</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="eventStatus">Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LCAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LCAmendmentsResponse> GetLCAmendmentsAsync(string letterOfCreditId, string? eventStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>update letter of credit amendment</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> UpdateLcAmendmentAsync(string letterOfCreditId, LcAmendment payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove letter of credit amendment</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> DeleteLcAmendmentAsync(string letterOfCreditId, LcAmendmentDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve letter of credit amendment</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> ApproveLcAmendmentAsync(string letterOfCreditId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Overview details of letter of credit clause</summary>
        /// <param name="clausesId">This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcClauseResponse> GetLcClauseAsync(string clausesId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a static narrative information for letter of credit</summary>
        /// <param name="clausesId">This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcClauseResponse> CreateLcClauseAsync(string clausesId, LcClause payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a static narrative information for letter of credit</summary>
        /// <param name="clausesId">This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcClauseResponse> UpdateLcClauseAsync(string clausesId, LcClause payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove a static narrative information for letter of credit</summary>
        /// <param name="clausesId">This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcClauseResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcClauseResponse> DeleteLcClauseAsync(string clausesId, LcClauseDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve drawing details</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="eventStatus">Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>DrawingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingsResponse> GetDrawingsAsync(string letterOfCreditId, string? eventStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the letter of credit advice text details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="lcAdviceTextId">This is the key to the letter of credit advice text file.During the input of an L/C this code can be entered for the inclusion of standard text.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LCDocumentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LCDocumentsResponse> GetLCDocumentsAsync(string customerId, string? lcAdviceTextId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the letter of credit clause details</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="lcClausesId">This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LCClausesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LCClausesResponse> GetLCClausesAsync(string customerId, string? lcClausesId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves letter of credit enrichments</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>IncoTermsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IncoTermsResponse> GetIncoTermsAsync(int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves letter of credit details</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="operation">Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LetterOfCreditsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditsResponse> GetLetterOfCreditsAsync(string? letterOfCreditId = null, string? customerId = null, string? operation = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves export letter of credit drawings</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExportDrawingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportDrawingsResponse> GetExportDrawingsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves export letter of credit amendments</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExportLCAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportLCAmendmentsResponse> GetExportLCAmendmentsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves export letter of credits</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExportLcResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportLcResponse> GetExportLcAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves import letter of credit drawings</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ImportDrawingsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportDrawingsResponse> GetImportDrawingsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves import letter of credit amendments</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ImportLCAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportLCAmendmentsResponse> GetImportLCAmendmentsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves import letter of credits</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ImportLcResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportLcResponse> GetImportLcAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the outward collection document codes</summary>
        /// <param name="lcAdviceTextId">This is the key to the letter of credit advice text file.During the input of an L/C this code can be entered for the inclusion of standard text.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutwardCollectionDocumentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardCollectionDocumentsResponse> GetOutwardCollectionDocumentsAsync(string? lcAdviceTextId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the inward collection amendments</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InwardCollectionsAmendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InwardCollectionsAmendmentsResponse> GetInwardCollectionsAmendmentsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the inward collections</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>InwardCollectionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InwardCollectionsResponse> GetInwardCollectionsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves letter of credit tenor details</summary>
        /// <param name="lcPayTypeId">Indicates the identifier of payment type enrichment for letter of credit.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LcTenorsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcTenorsResponse> GetLcTenorsAsync(string? lcPayTypeId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outward collection amendments</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutwardCollectionAmdendmentsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardCollectionAmdendmentsResponse> GetOutwardCollectionAmdendmentsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves inward collections</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutwardCollectionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutwardCollectionsResponse> GetOutwardCollectionsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the letter of credit limits</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>LcLimitsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcLimitsResponse> GetLcLimitsAsync(string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel initiated drawing</summary>
        /// <param name="drawingId">Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DrawingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DrawingResponse> RejectDrawingAsync(string drawingId, DrawingDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel letter of credit amendment</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> RejectLcAmendmentAsync(string letterOfCreditId, LcAmendmentDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve approved outward collections</summary>
        /// <param name="collectionId">Identifier of collection id</param>
        /// <param name="beneficiaryCustomerId">Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</param>
        /// <param name="ibStatus">Field to indicate the status of LC request through internet banking.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ApprovedOutwardCollectionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovedOutwardCollectionsResponse> GetApprovedOutwardCollectionsAsync(string? collectionId = null, string? beneficiaryCustomerId = null, string? ibStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Overview details of letter of credit amendment</summary>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LcAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LcAmendmentResponse> GetLcAmendmentAsync(string lcAmendmentId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create letter of credit request</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> CreateLetterOfCreditAsync(LetterOfCredit payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update letter of credit</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> UpdateLetterOfCreditAsync(string letterOfCreditId, LetterOfCredit payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Overview details of letter of credit</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> GetLetterOfCreditAsync(string letterOfCreditId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates Letter of Credit details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalAmendmentToAnLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalAmendmentToAnLCResponse> UpdateExternalAmendmentToAnLCAsync(string letterOfCreditId, ExternalAmendmentToAnLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove letter of credit</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> DeleteLetterOfCreditAsync(string letterOfCreditId, LetterOfCreditDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve letter of credit request</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> ApproveLetterOfCreditAsync(string letterOfCreditId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel letter of credit request</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LetterOfCreditResponse> RejectLetterOfCreditAsync(string letterOfCreditId, LetterOfCreditDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create export letter of credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExportLetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportLetterOfCreditResponse> CreateExportLetterOfCreditAsync(ExportLetterOfCredit payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update export letter of credit</summary>
        /// <param name="letterOfCreditId">Identifier of the Letter Of Credit</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExportLetterOfCreditResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportLetterOfCreditResponse> UpdateExportLetterOfCreditAsync(string letterOfCreditId, ExportLetterOfCredit payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Sight Payment Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfSightPaymentLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfSightPaymentLCResponse> CreateIssuanceOfSightPaymentLCAsync(IssuanceOfSightPaymentLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Usance Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfUsanceLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfUsanceLCResponse> CreateIssuanceOfUsanceLCAsync(IssuanceOfUsanceLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Negotiation Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfNegotiationLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfNegotiationLCResponse> CreateIssuanceOfNegotiationLCAsync(IssuanceOfNegotiationLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Mixed Payment Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfMixedPaymentLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfMixedPaymentLCResponse> CreateIssuanceOfMixedPaymentLCAsync(IssuanceOfMixedPaymentLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Standby Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfStandbyLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfStandbyLCResponse> CreateIssuanceOfStandbyLCAsync(IssuanceOfStandbyLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Pre-advice Letter of credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfPreAdviseImportLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfPreAdviseImportLCResponse> CreateIssuanceOfPreAdviseImportLCAsync(IssuanceOfPreAdviseImportLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Back-to-Back Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfBackToBackLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfBackToBackLCResponse> CreateIssuanceOfBackToBackLCAsync(IssuanceOfBackToBackLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates transferable Letters of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>IssuanceOfTransferableLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuanceOfTransferableLCResponse> CreateIssuanceOfTransferableLCAsync(IssuanceOfTransferableLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates Letter of Credit beneficiary's consent details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AmendmentSeekingBeneficiaryConsentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AmendmentSeekingBeneficiaryConsentResponse> UpdateAmendmentSeekingBeneficiaryConsentAsync(string letterOfCreditId, AmendmentSeekingBeneficiaryConsent payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates decision on amendment to the import Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DecisionOnAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DecisionOnAmendmentResponse> UpdateDecisionOnAmendmentAsync(string letterOfCreditId, DecisionOnAmendment payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates import Letter of Credit cancellation details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CancellationOfLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancellationOfLCResponse> UpdateCancellationOfLCAsync(string letterOfCreditId, CancellationOfLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates decision on amendment to the export Letter of Credit</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>DecisionOnExportLCAmendmentResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DecisionOnExportLCAmendmentResponse> UpdateDecisionOnExportLCAmendmentAsync(string letterOfCreditId, DecisionOnExportLCAmendment payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates export Letter of Credit cancellation details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>CancellationOfExportLCResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancellationOfExportLCResponse> UpdateCancellationOfExportLCAsync(string letterOfCreditId, CancellationOfExportLC payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outstanding import Letter of Credit details</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="applicantCustomer">Indicates the applicant ID on whose behalf the Letter of Credit is issued.</param>
        /// <param name="lcCurrency">Denote the currency of the Letter of Credit.</param>
        /// <param name="advisingBank">Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ImportLcsOutstandingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportLcsOutstandingResponse> GetImportLcsOutstandingAsync(string customerId, string? transactionReference = null, string? applicantCustomer = null, string? lcCurrency = null, string? advisingBank = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves expired Import Letter of Credit details</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="applicantCustomer">Indicates the applicant ID on whose behalf the Letter of Credit is issued.</param>
        /// <param name="lcCurrency">Denote the currency of the Letter of Credit.</param>
        /// <param name="advisingBank">Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ImportLcsExpiringButOutstandingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportLcsExpiringButOutstandingResponse> GetImportLcsExpiringButOutstandingAsync(string customerId, string? transactionReference = null, string? applicantCustomer = null, string? lcCurrency = null, string? advisingBank = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves outstanding export Letter of Credit details</summary>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="issuingBankId">Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</param>
        /// <param name="lcCurrency">Denote the currency of the Letter of Credit.</param>
        /// <param name="lcAmount">This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</param>
        /// <param name="beneficiaryCustomerId">Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</param>
        /// <param name="expiryDate">The date an agreement such as an arrangement, product, credit facility or limit is due to expire</param>
        /// <param name="liabilityReversalDate">Date on which the contingent entries and the limits raised on the LC will be reversed.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExportlcsOutstandingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportlcsOutstandingResponse> GetExportlcsOutstandingAsync(string letterOfCreditId, string? transactionReference = null, string? issuingBankId = null, string? lcCurrency = null, string? lcAmount = null, string? beneficiaryCustomerId = null, string? expiryDate = null, string? liabilityReversalDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>Drawing</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawing 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DrawingBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingBody 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountIds")]
        public System.Collections.Generic.ICollection<ChargeAccountIds>? ChargeAccountIds { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentNames")]
        public System.Collections.Generic.ICollection<DocumentNames>? DocumentNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancies")]
        public System.Collections.Generic.ICollection<ConsolidatedDiscrepancies>? ConsolidatedDiscrepancies { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentorIds")]
        public System.Collections.Generic.ICollection<PresentorIds>? PresentorIds { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides>? Overrides { get; set; }= default!;
    
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This field contains the amount to be drawn under this transaction, expressed in the currency above (DRAW.CURRENCY).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? DocumentAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyResponse")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DiscrepancyResponse { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PresentorCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>DrawingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DrawingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingResponseBody 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountIds")]
        public System.Collections.Generic.ICollection<ChargeAccountIds2>? ChargeAccountIds { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks2>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers2>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments2>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentNames")]
        public System.Collections.Generic.ICollection<DocumentNames2>? DocumentNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancies")]
        public System.Collections.Generic.ICollection<ConsolidatedDiscrepancies2>? ConsolidatedDiscrepancies { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentorIds")]
        public System.Collections.Generic.ICollection<PresentorIds2>? PresentorIds { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides2>? Overrides { get; set; }= default!;
    
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This field contains the amount to be drawn under this transaction, expressed in the currency above (DRAW.CURRENCY).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? DocumentAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyResponse")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DiscrepancyResponse { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PresentorCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>DrawingDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>LcDocument</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcDocument 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcDocumentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcDocumentBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails>? DocumentDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>LcDocumentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcDocumentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcDocumentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcDocumentResponseBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails2>? DocumentDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>LcDocumentDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcDocumentDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>LcAmendment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmendment 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcAmendmentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmendmentBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceeds")]
        public System.Collections.Generic.ICollection<IbLimitExceeds>? IbLimitExceeds { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmend")]
        public System.Collections.Generic.ICollection<LcAmend>? LcAmend { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers3>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks3>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides3>? Overrides { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>The field to change the principal movement over the lifetime of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseDecreaseAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage or as captured from an Inward message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("decreaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DecreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the Letter of Credit amount (LC.AMOUNT) to calculate the LIABILITY.AMOUNT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the new date on which the Letter of Credit expires from the beneficiary’s point of view.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newAdviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewAdviceExpiryDate { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>Indicates whether LIMIT has to be updated when the Amendment is authorized, but prior to use of Operation D in Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitUpdate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitUpdate { get; set; }= default!;
    
    
    }
    
    /// <summary>LcAmendmentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmendmentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcAmendmentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmendmentResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceeds")]
        public System.Collections.Generic.ICollection<IbLimitExceeds2>? IbLimitExceeds { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered2>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods2>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmend")]
        public System.Collections.Generic.ICollection<LcAmend2>? LcAmend { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers4>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks4>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides4>? Overrides { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>The field to change the principal movement over the lifetime of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseDecreaseAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage or as captured from an Inward message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("decreaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DecreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the Letter of Credit amount (LC.AMOUNT) to calculate the LIABILITY.AMOUNT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the new date on which the Letter of Credit expires from the beneficiary’s point of view.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newAdviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewAdviceExpiryDate { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>Indicates whether LIMIT has to be updated when the Amendment is authorized, but prior to use of Operation D in Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitUpdate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LimitUpdate { get; set; }= default!;
    
    
    }
    
    /// <summary>LcAmendmentDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmendmentDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>LcClause</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcClause 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcClauseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcClauseBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives>? Narratives { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.CLAUSES narrative for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcClausesName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcClausesName { get; set; }= default!;
    
    
    }
    
    /// <summary>LcClauseResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcClauseResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcClauseResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcClauseResponseBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives2>? Narratives { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.CLAUSES narrative for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcClausesName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcClausesName { get; set; }= default!;
    
    
    }
    
    /// <summary>LcClauseDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcClauseDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>DrawingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DrawingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DrawingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>LCDocumentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCDocumentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LCDocumentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCDocumentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>LCClausesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCClausesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LCClausesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCClausesResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>IncoTermsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IncoTermsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IncoTermsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IncoTermsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>LetterOfCreditsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LetterOfCreditsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditsResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>ExportDrawingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportDrawingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportDrawingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportDrawingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    /// <summary>ExportLCAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLCAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportLCAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLCAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>ExportLcResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLcResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportLcResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLcResponseBody : System.Collections.ObjectModel.Collection<Anonymous8>
    {
    
    }
    
    /// <summary>ImportDrawingsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportDrawingsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ImportDrawingsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportDrawingsResponseBody : System.Collections.ObjectModel.Collection<Anonymous9>
    {
    
    }
    
    /// <summary>ImportLCAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLCAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ImportLCAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLCAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous10>
    {
    
    }
    
    /// <summary>ImportLcResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ImportLcResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcResponseBody : System.Collections.ObjectModel.Collection<Anonymous11>
    {
    
    }
    
    /// <summary>OutwardCollectionDocumentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionDocumentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardCollectionDocumentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionDocumentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous12>
    {
    
    }
    
    /// <summary>InwardCollectionsAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardCollectionsAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InwardCollectionsAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardCollectionsAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous13>
    {
    
    }
    
    /// <summary>InwardCollectionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardCollectionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InwardCollectionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardCollectionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous14>
    {
    
    }
    
    /// <summary>LcTenorsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcTenorsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcTenorsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcTenorsResponseBody : System.Collections.ObjectModel.Collection<Anonymous15>
    {
    
    }
    
    /// <summary>OutwardCollectionAmdendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionAmdendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardCollectionAmdendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionAmdendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous16>
    {
    
    }
    
    /// <summary>OutwardCollectionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OutwardCollectionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OutwardCollectionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous17>
    {
    
    }
    
    /// <summary>LcLimitsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcLimitsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LcLimitsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcLimitsResponseBody : System.Collections.ObjectModel.Collection<Anonymous18>
    {
    
    }
    
    /// <summary>ApprovedOutwardCollectionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApprovedOutwardCollectionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ApprovedOutwardCollectionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApprovedOutwardCollectionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous19>
    {
    
    }
    
    /// <summary>LCAmendmentsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCAmendmentsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LCAmendmentsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LCAmendmentsResponseBody : System.Collections.ObjectModel.Collection<Anonymous20>
    {
    
    }
    
    /// <summary>LetterOfCredit</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCredit 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LetterOfCreditBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerNames")]
        public System.Collections.Generic.ICollection<ApplicantCustomerNames>? ApplicantCustomerNames { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks>? AdvisingBanks { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerNames")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerNames>? BeneficiaryCustomerNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("availableWithDetails")]
        public System.Collections.Generic.ICollection<AvailableWithDetails>? AvailableWithDetails { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered3>? AdditionalAmountsCovered { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayments")]
        public System.Collections.Generic.ICollection<DeferredPayments>? DeferredPayments { get; set; }= default!;
    
        /// <summary>Contains the contact details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetails")]
        public System.Collections.Generic.ICollection<ContactDetails>? ContactDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods3>? ShipmentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriods")]
        public System.Collections.Generic.ICollection<PresentationPeriods>? PresentationPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        public System.Collections.Generic.ICollection<DescriptionOfGoods>? DescriptionOfGoods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails3>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired>? DocumentsRequired { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("clausesDetails")]
        public System.Collections.Generic.ICollection<ClausesDetails>? ClausesDetails { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges>? NarrativeCharges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerDetails")]
        public System.Collections.Generic.ICollection<FromCustomerDetails>? FromCustomerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("issuingBanks")]
        public System.Collections.Generic.ICollection<IssuingBanks>? IssuingBanks { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments3>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibReasonDetails")]
        public System.Collections.Generic.ICollection<IbReasonDetails>? IbReasonDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides5>? Overrides { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeIds")]
        public System.Collections.Generic.ICollection<GuaranteeIds>? GuaranteeIds { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the letter of credit amount (LC.AMOUNT) to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageCreditAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageDebitAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>This field is used to decide the pay type for LC when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PayTerms { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tenor")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Tenor { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is tranferrable or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferable")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transferable { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the Receiver.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmInstructions { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is STANBY or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByLC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StandByLC { get; set; }= default!;
    
        /// <summary>Specifes that when a CRITICAL limit override message is received. Additional information may be added here for the Credit Officer of the account .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitBroken")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LimitBroken { get; set; }= default!;
    
        /// <summary>This field holds the details of Part Shipment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipmentText { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipments")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipments { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field identifies the how the credit is available under Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableBy { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>This field is used to define the mode of shipment used to transport goods.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentMode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentMode { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Days { get; set; }= default!;
    
        /// <summary>This field indicates the codes available for the drafts under a collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionMaturityCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CollectionMaturityCode { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections Only. It records the maturity date as advised by the Collecting Bank of a usance draft accepted payable by the Drawee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateAccepted")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateAccepted { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>This field turns on the Provision processing for import Letters of Credit and export confirmed LCs.. When this field is set to 'YES' , an account/percentage provision can be entered. The system will then calculate (using the percentage entered) a provision amount, which will be passed to the Provision.amount field. This amount is in the currency of the provision account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("provision")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Provision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesFrom { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>This field identifies the account from which related charges will be taken, if any.Any valid account number can be entered in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesAccountId { get; set; }= default!;
    
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CommissionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to determine the account from which the provision should be debited when such a transaction is deemed to require provision.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to register any changes in the amount of provision held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAmount { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Field to indicate the status of LC request through internet banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbStatus { get; set; }= default!;
    
        /// <summary>This field is mandatory for Import Letter of Credits and contains the customer number or mnemonic of the advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBankCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Indicates the date that the LC is due to be closed, and written to the history files. If any drawings are outstanding on this date for the LC, then the LC will not be closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosingDate { get; set; }= default!;
    
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithCustomerId { get; set; }= default!;
    
        /// <summary>Indicates that when an outward collection is initiated through internet banking, this field specifies if original documents have been received by the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsReceived")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentsReceived { get; set; }= default!;
    
    
    }
    
    /// <summary>LetterOfCreditResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public LetterOfCreditResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerNames")]
        public System.Collections.Generic.ICollection<ApplicantCustomerNames2>? ApplicantCustomerNames { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks2>? AdvisingBanks { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerNames")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerNames2>? BeneficiaryCustomerNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("availableWithDetails")]
        public System.Collections.Generic.ICollection<AvailableWithDetails2>? AvailableWithDetails { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered4>? AdditionalAmountsCovered { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayments")]
        public System.Collections.Generic.ICollection<DeferredPayments2>? DeferredPayments { get; set; }= default!;
    
        /// <summary>Contains the contact details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetails")]
        public System.Collections.Generic.ICollection<ContactDetails2>? ContactDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods4>? ShipmentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriods")]
        public System.Collections.Generic.ICollection<PresentationPeriods2>? PresentationPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        public System.Collections.Generic.ICollection<DescriptionOfGoods2>? DescriptionOfGoods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails4>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired2>? DocumentsRequired { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("clausesDetails")]
        public System.Collections.Generic.ICollection<ClausesDetails2>? ClausesDetails { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions2>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges2>? NarrativeCharges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerDetails")]
        public System.Collections.Generic.ICollection<FromCustomerDetails2>? FromCustomerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("issuingBanks")]
        public System.Collections.Generic.ICollection<IssuingBanks2>? IssuingBanks { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments4>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions2>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibReasonDetails")]
        public System.Collections.Generic.ICollection<IbReasonDetails2>? IbReasonDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides6>? Overrides { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeIds")]
        public System.Collections.Generic.ICollection<GuaranteeIds2>? GuaranteeIds { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the letter of credit amount (LC.AMOUNT) to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageCreditAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageDebitAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>This field is used to decide the pay type for LC when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PayTerms { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tenor")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Tenor { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is tranferrable or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferable")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transferable { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the Receiver.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmInstructions { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is STANBY or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByLC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StandByLC { get; set; }= default!;
    
        /// <summary>Specifes that when a CRITICAL limit override message is received. Additional information may be added here for the Credit Officer of the account .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitBroken")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LimitBroken { get; set; }= default!;
    
        /// <summary>This field holds the details of Part Shipment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipmentText { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipments")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipments { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field identifies the how the credit is available under Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableBy { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>This field is used to define the mode of shipment used to transport goods.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentMode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentMode { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Days { get; set; }= default!;
    
        /// <summary>This field indicates the codes available for the drafts under a collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionMaturityCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CollectionMaturityCode { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections Only. It records the maturity date as advised by the Collecting Bank of a usance draft accepted payable by the Drawee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateAccepted")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateAccepted { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>This field turns on the Provision processing for import Letters of Credit and export confirmed LCs.. When this field is set to 'YES' , an account/percentage provision can be entered. The system will then calculate (using the percentage entered) a provision amount, which will be passed to the Provision.amount field. This amount is in the currency of the provision account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("provision")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Provision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesFrom { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>This field identifies the account from which related charges will be taken, if any.Any valid account number can be entered in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesAccountId { get; set; }= default!;
    
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CommissionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to determine the account from which the provision should be debited when such a transaction is deemed to require provision.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to register any changes in the amount of provision held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAmount { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Field to indicate the status of LC request through internet banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbStatus { get; set; }= default!;
    
        /// <summary>This field is mandatory for Import Letter of Credits and contains the customer number or mnemonic of the advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBankCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Indicates the date that the LC is due to be closed, and written to the history files. If any drawings are outstanding on this date for the LC, then the LC will not be closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosingDate { get; set; }= default!;
    
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithCustomerId { get; set; }= default!;
    
        /// <summary>Indicates that when an outward collection is initiated through internet banking, this field specifies if original documents have been received by the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsReceived")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentsReceived { get; set; }= default!;
    
    
    }
    
    /// <summary>LetterOfCreditDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LetterOfCreditDelete 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    /// <summary>ExportLetterOfCredit</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLetterOfCredit 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportLetterOfCreditBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLetterOfCreditBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerNames")]
        public System.Collections.Generic.ICollection<ApplicantCustomerNames3>? ApplicantCustomerNames { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks3>? AdvisingBanks { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerNames")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerNames3>? BeneficiaryCustomerNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("availableWithDetails")]
        public System.Collections.Generic.ICollection<AvailableWithDetails3>? AvailableWithDetails { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered5>? AdditionalAmountsCovered { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayments")]
        public System.Collections.Generic.ICollection<DeferredPayments3>? DeferredPayments { get; set; }= default!;
    
        /// <summary>Contains the contact details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetails")]
        public System.Collections.Generic.ICollection<ContactDetails3>? ContactDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods5>? ShipmentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriods")]
        public System.Collections.Generic.ICollection<PresentationPeriods3>? PresentationPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        public System.Collections.Generic.ICollection<DescriptionOfGoods3>? DescriptionOfGoods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails5>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired3>? DocumentsRequired { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("clausesDetails")]
        public System.Collections.Generic.ICollection<ClausesDetails3>? ClausesDetails { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions3>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges3>? NarrativeCharges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerDetails")]
        public System.Collections.Generic.ICollection<FromCustomerDetails3>? FromCustomerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("issuingBanks")]
        public System.Collections.Generic.ICollection<IssuingBanks3>? IssuingBanks { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments5>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions3>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibReasonDetails")]
        public System.Collections.Generic.ICollection<IbReasonDetails3>? IbReasonDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides7>? Overrides { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeIds")]
        public System.Collections.Generic.ICollection<GuaranteeIds3>? GuaranteeIds { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the letter of credit amount (LC.AMOUNT) to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageCreditAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageDebitAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>This field is used to decide the pay type for LC when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PayTerms { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tenor")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Tenor { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is tranferrable or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferable")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transferable { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the Receiver.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmInstructions { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is STANBY or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByLC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StandByLC { get; set; }= default!;
    
        /// <summary>Specifes that when a CRITICAL limit override message is received. Additional information may be added here for the Credit Officer of the account .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitBroken")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LimitBroken { get; set; }= default!;
    
        /// <summary>This field holds the details of Part Shipment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipmentText { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipments")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipments { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field identifies the how the credit is available under Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableBy { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>This field is used to define the mode of shipment used to transport goods.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentMode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentMode { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Days { get; set; }= default!;
    
        /// <summary>This field indicates the codes available for the drafts under a collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionMaturityCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CollectionMaturityCode { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections Only. It records the maturity date as advised by the Collecting Bank of a usance draft accepted payable by the Drawee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateAccepted")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateAccepted { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>This field turns on the Provision processing for import Letters of Credit and export confirmed LCs.. When this field is set to 'YES' , an account/percentage provision can be entered. The system will then calculate (using the percentage entered) a provision amount, which will be passed to the Provision.amount field. This amount is in the currency of the provision account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("provision")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Provision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesFrom { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>This field identifies the account from which related charges will be taken, if any.Any valid account number can be entered in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesAccountId { get; set; }= default!;
    
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CommissionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to determine the account from which the provision should be debited when such a transaction is deemed to require provision.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to register any changes in the amount of provision held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAmount { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Field to indicate the status of LC request through internet banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbStatus { get; set; }= default!;
    
        /// <summary>This field is mandatory for Import Letter of Credits and contains the customer number or mnemonic of the advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBankCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Indicates the date that the LC is due to be closed, and written to the history files. If any drawings are outstanding on this date for the LC, then the LC will not be closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosingDate { get; set; }= default!;
    
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithCustomerId { get; set; }= default!;
    
        /// <summary>Indicates that when an outward collection is initiated through internet banking, this field specifies if original documents have been received by the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsReceived")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentsReceived { get; set; }= default!;
    
    
    }
    
    /// <summary>ExportLetterOfCreditResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLetterOfCreditResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportLetterOfCreditResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportLetterOfCreditResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerNames")]
        public System.Collections.Generic.ICollection<ApplicantCustomerNames4>? ApplicantCustomerNames { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks4>? AdvisingBanks { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerNames")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerNames4>? BeneficiaryCustomerNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("availableWithDetails")]
        public System.Collections.Generic.ICollection<AvailableWithDetails4>? AvailableWithDetails { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered6>? AdditionalAmountsCovered { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayments")]
        public System.Collections.Generic.ICollection<DeferredPayments4>? DeferredPayments { get; set; }= default!;
    
        /// <summary>Contains the contact details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactDetails")]
        public System.Collections.Generic.ICollection<ContactDetails4>? ContactDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods6>? ShipmentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriods")]
        public System.Collections.Generic.ICollection<PresentationPeriods4>? PresentationPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        public System.Collections.Generic.ICollection<DescriptionOfGoods4>? DescriptionOfGoods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails6>? DocumentDetails { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired4>? DocumentsRequired { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("clausesDetails")]
        public System.Collections.Generic.ICollection<ClausesDetails4>? ClausesDetails { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions4>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges4>? NarrativeCharges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerDetails")]
        public System.Collections.Generic.ICollection<FromCustomerDetails4>? FromCustomerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("issuingBanks")]
        public System.Collections.Generic.ICollection<IssuingBanks4>? IssuingBanks { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments6>? SupportDocuments { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions4>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibReasonDetails")]
        public System.Collections.Generic.ICollection<IbReasonDetails4>? IbReasonDetails { get; set; }= default!;
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overrides")]
        public System.Collections.Generic.ICollection<Overrides8>? Overrides { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeIds")]
        public System.Collections.Generic.ICollection<GuaranteeIds4>? GuaranteeIds { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the letter of credit amount (LC.AMOUNT) to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageCreditAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageDebitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PercentageDebitAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>This field is used to decide the pay type for LC when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PayTerms { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tenor")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Tenor { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is tranferrable or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferable")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transferable { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the Receiver.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmInstructions")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmInstructions { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is STANBY or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByLC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? StandByLC { get; set; }= default!;
    
        /// <summary>Specifes that when a CRITICAL limit override message is received. Additional information may be added here for the Credit Officer of the account .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitBroken")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LimitBroken { get; set; }= default!;
    
        /// <summary>This field holds the details of Part Shipment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipmentText { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipments")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipments { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field identifies the how the credit is available under Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableBy { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>This field is used to define the mode of shipment used to transport goods.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentMode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentMode { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Days { get; set; }= default!;
    
        /// <summary>This field indicates the codes available for the drafts under a collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionMaturityCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CollectionMaturityCode { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections Only. It records the maturity date as advised by the Collecting Bank of a usance draft accepted payable by the Drawee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateAccepted")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateAccepted { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>This field turns on the Provision processing for import Letters of Credit and export confirmed LCs.. When this field is set to 'YES' , an account/percentage provision can be entered. The system will then calculate (using the percentage entered) a provision amount, which will be passed to the Provision.amount field. This amount is in the currency of the provision account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("provision")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Provision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesFrom { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>This field identifies the account from which related charges will be taken, if any.Any valid account number can be entered in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ChargesAccountId { get; set; }= default!;
    
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CommissionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to determine the account from which the provision should be debited when such a transaction is deemed to require provision.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to register any changes in the amount of provision held.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProvisionAmount { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Field to indicate the status of LC request through internet banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbStatus { get; set; }= default!;
    
        /// <summary>This field is mandatory for Import Letter of Credits and contains the customer number or mnemonic of the advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBankCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Indicates the date that the LC is due to be closed, and written to the history files. If any drawings are outstanding on this date for the LC, then the LC will not be closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosingDate { get; set; }= default!;
    
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithCustomerId { get; set; }= default!;
    
        /// <summary>Indicates that when an outward collection is initiated through internet banking, this field specifies if original documents have been received by the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsReceived")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentsReceived { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfSightPaymentLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfSightPaymentLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfSightPaymentLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfSightPaymentLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks1>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Sight Payment type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importSightPmtLcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportSightPmtLcType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Applicant { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 32D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfSightPaymentLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfSightPaymentLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfSightPaymentLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfSightPaymentLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses2>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses2>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses2>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks2>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks2>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks12>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames2>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges2>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Sight Payment type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importSightPmtLcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportSightPmtLcType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 32D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfUsanceLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfUsanceLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfUsanceLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfUsanceLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses3>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses3>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses3>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks3>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks3>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks13>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames3>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges3>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Usance type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importUsanceLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportUsanceLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 32D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>In support of Option K of Tag 32a in MT400 series of SWIFT for collections, this field supports the applicable codes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collMatCode")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CollMatCode { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Days { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfUsanceLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfUsanceLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfUsanceLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfUsanceLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses4>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences2>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses4>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses4>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks4>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks4>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks14>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames4>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges4>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Usance type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importUsanceLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportUsanceLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 32D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>In support of Option K of Tag 32a in MT400 series of SWIFT for collections, this field supports the applicable codes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collMatCode")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CollMatCode { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Days { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfNegotiationLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfNegotiationLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfNegotiationLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfNegotiationLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses5>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses5>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses5>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks5>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks5>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks15>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames5>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges5>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Negotiation type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importNegotiationLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportNegotiationLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Applicant { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>In support of Option K of Tag 32a in MT400 series of SWIFT for collections, this field supports the applicable codes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collMatCode")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CollMatCode { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Days { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfNegotiationLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfNegotiationLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfNegotiationLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfNegotiationLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses6>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses6>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses6>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks6>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks6>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks16>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames6>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges6>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import Negotiation type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importNegotiationLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportNegotiationLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>In support of Option K of Tag 32a in MT400 series of SWIFT for collections, this field supports the applicable codes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collMatCode")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CollMatCode { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Days { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfMixedPaymentLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfMixedPaymentLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfMixedPaymentLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfMixedPaymentLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses7>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses7>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses7>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks7>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks7>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks17>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames7>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges7>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings>? Drawings { get; set; }= default!;
    
        /// <summary>Identifies the Import Mixed payment type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importMixedPmtLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportMixedPmtLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of times the letter of credit will revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NumberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfMixedPaymentLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfMixedPaymentLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfMixedPaymentLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfMixedPaymentLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses8>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses8>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses8>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks8>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks8>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks18>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames8>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges8>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings2>? Drawings { get; set; }= default!;
    
        /// <summary>Identifies the Import Mixed payment type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importMixedPmtLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportMixedPmtLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of times the letter of credit will revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NumberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfStandbyLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfStandbyLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfStandbyLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfStandbyLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses9>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences3>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses9>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses9>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks9>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks9>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks19>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames9>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges9>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfStandbyLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfStandbyLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfStandbyLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfStandbyLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses10>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences4>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses10>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses10>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks10>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks10>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks110>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames10>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges10>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Import type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("importLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ImportLCType { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Free text field to amend or generate additional documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsText")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentsText { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfPreAdviseImportLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfPreAdviseImportLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfPreAdviseImportLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfPreAdviseImportLCBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses11>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences5>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses11>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses11>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks11>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks11>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks111>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames11>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges11>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Flag to define if the limits are to be booked or not at the time of issuing the pre-advice LC. Allowed values: - YES - NO (same as null) - null (default).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("updateLimit")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? UpdateLimit { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfPreAdviseImportLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfPreAdviseImportLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfPreAdviseImportLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfPreAdviseImportLCResponseBody 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddresses")]
        public System.Collections.Generic.ICollection<ApplicantAddresses12>? ApplicantAddresses { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences6>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses12>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses12>? AdvisingBankAddresses { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks12>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks12>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBanks1")]
        public System.Collections.Generic.ICollection<ReimbursingBanks112>? ReimbursingBanks1 { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames12>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges12>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ShipmentDate { get; set; }= default!;
    
        /// <summary>Defining the mode of shipment allowed for transporting the goods and service under the LC. Allowed values are: - Air - Sea - Road - Rail - Multi Modal - Other</summary>
        [System.Text.Json.Serialization.JsonPropertyName("modeOfShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ModeOfShipment { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>Flag to define if the limits are to be booked or not at the time of issuing the pre-advice LC. Allowed values: - YES - NO (same as null) - null (default).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("updateLimit")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? UpdateLimit { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Id of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBank")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RequestedConfirmBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfBackToBackLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfBackToBackLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfBackToBackLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfBackToBackLCBody 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences7>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses13>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantNames")]
        public System.Collections.Generic.ICollection<ApplicantNames>? ApplicantNames { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks13>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks13>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges13>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings3>? Drawings { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiversInfoMT730")]
        public System.Collections.Generic.ICollection<SenderReceiversInfoMT730>? SenderReceiversInfoMT730 { get; set; }= default!;
    
        /// <summary>Identifies the Export type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exportLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExportLCType { get; set; }= default!;
    
        /// <summary>This field indicates if a Back to Back Letter of Credit is to be generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backToBackLCRequired")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string BackToBackLCRequired { get; set; }= default!;
    
        /// <summary>This is a system updated field for displaying the corresponding import letter of credit number when a back to back LC transaction is generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedImportLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RelatedImportLCReference { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdvisingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdvisingReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IssuingBankLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string IssuingBankId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBankID { get; set; }= default!;
    
        /// <summary>Identifies the application code rule for the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodes")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ApplicableRuleCodes { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of revolution for the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nunmberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NunmberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>This field indicated the currency and the total amount of charges to be claimed by the Sender of MT730 message type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountOfChargeMT730")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountOfChargeMT730 { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfBackToBackLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfBackToBackLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfBackToBackLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfBackToBackLCResponseBody 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences8>? LimitReferences { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses14>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantNames")]
        public System.Collections.Generic.ICollection<ApplicantNames2>? ApplicantNames { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks14>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks14>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges14>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings4>? Drawings { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBanks")]
        public System.Collections.Generic.ICollection<AccountWithBanks2>? AccountWithBanks { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiversInfoMT730")]
        public System.Collections.Generic.ICollection<SenderReceiversInfoMT7302>? SenderReceiversInfoMT730 { get; set; }= default!;
    
        /// <summary>Identifies the Export type of LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exportLCType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExportLCType { get; set; }= default!;
    
        /// <summary>This field indicates if a Back to Back Letter of Credit is to be generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backToBackLCRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? BackToBackLCRequired { get; set; }= default!;
    
        /// <summary>This is a system updated field for displaying the corresponding import letter of credit number when a back to back LC transaction is generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relatedImportLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RelatedImportLCReference { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdvisingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdvisingReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IssuingBankLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBankId { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBankID { get; set; }= default!;
    
        /// <summary>Identifies the application code rule for the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodes")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ApplicableRuleCodes { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of revolution for the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nunmberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NunmberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>This field indicated the currency and the total amount of charges to be claimed by the Sender of MT730 message type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountOfChargeMT730")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountOfChargeMT730 { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfTransferableLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfTransferableLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfTransferableLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfTransferableLCBody 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks5>? AdvisingBanks { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences9>? LimitReferences { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings5>? Drawings { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges15>? Charges { get; set; }= default!;
    
        /// <summary>This field provides the user with a free text field to make any internal notes regarding the assignment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignments")]
        public System.Collections.Generic.ICollection<Assignments>? Assignments { get; set; }= default!;
    
        /// <summary>Indicates the  second Beneficiary details on whose favour the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaries")]
        public System.Collections.Generic.ICollection<SecondBeneficiaries>? SecondBeneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks15>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftsAt")]
        public System.Collections.Generic.ICollection<DraftsAt>? DraftsAt { get; set; }= default!;
    
        /// <summary>Identify the drawee of Bills of Exchange to be presented under the LC, if the drawee is not a customer of the bank with a valid customer number. Drawees Name and Address may be manually input.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawees")]
        public System.Collections.Generic.ICollection<Drawees>? Drawees { get; set; }= default!;
    
        /// <summary>This field specify the payment dates, amounts and/or method for the determination in an LC, which is available by mixed payment. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("mixedPaymentDetails")]
        public System.Collections.Generic.ICollection<MixedPaymentDetails>? MixedPaymentDetails { get; set; }= default!;
    
        /// <summary>This field specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationDeferredPaymentDetails")]
        public System.Collections.Generic.ICollection<NegotiationDeferredPaymentDetails>? NegotiationDeferredPaymentDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods7>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired5>? DocumentsRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions5>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges5>? NarrativeCharges { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames13>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>This field can be used to stiputate any special or additional instructions to the Paying/Accepting/Negotiating Bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionsToTheBanks")]
        public System.Collections.Generic.ICollection<InstructionsToTheBanks>? InstructionsToTheBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks15>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the parent LC number under the transfer LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentLCReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string ParentLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) at the time of transferring a letter of credit. It can also be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcTransferAdvisingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? LcTransferAdvisingReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string IssuingBankId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>Date of advising the Letter of Credit to beneficiary or Second advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdvisingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdvisingDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 8D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the second Beneficiary ID in whose favour the transfer Letter of Credit is transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaryID")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SecondBeneficiaryID { get; set; }= default!;
    
        /// <summary>Indicates the second Beneficiary name and address in whose favour the transfer Letter of Credit is transferred.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SecondBeneficiaryAddress { get; set; }= default!;
    
        /// <summary>Indicates the  First Beneficiary name and address on whose request the transfer Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstBeneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FirstBeneficiaryName { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithBankID { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdviseThroughBankID { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the risk party under the LC contract. Must be a valid customer number or Mnemonic. It's a system populated field other than the export LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("riskParty")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RiskParty { get; set; }= default!;
    
        /// <summary>Indicates the Date of adding confirmation to the export LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ConfirmationDate { get; set; }= default!;
    
        /// <summary>Value in this field indicates that the portion of the Letter of Credit that has been confirmed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConfirmationAmount { get; set; }= default!;
    
        /// <summary>System populated field to indicate the amount in terms of LC currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmLiabilityAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConfirmLiabilityAmount { get; set; }= default!;
    
        /// <summary>Identifies the total unconfirmed liability amount in respect of partially confirmed Letters of Credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("unconfirmLiabilityAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? UnconfirmLiabilityAmount { get; set; }= default!;
    
        /// <summary>This field indicated the limit reference assigned for the unconfirmed portion of the LC. Input in this field will be allowed based in the parameter system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unconfirmLimitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UnconfirmLimitReference { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of times the letter of credit will revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NumberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
        /// <summary>This field specifies the type of credit and whether or not the Sender is adding its confirmation to the credit. Valid inputs are: Adding our Confirmation / Without our Confirmation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("formOfDocCredit")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FormOfDocCredit { get; set; }= default!;
    
        /// <summary>This field  identifies the advising banks transfer LCs number (or reference of the L/C from legacy system).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransferingBankReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Documentary Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentaryCreditNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentaryCreditNumber { get; set; }= default!;
    
        /// <summary>This field holds the issue date of Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcIssueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LcIssueDate { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to OTHER condition. If the valid code inputs under the field applicable rules as OTHR, then the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicableRuleDescription { get; set; }= default!;
    
        /// <summary>Identifies the expiry date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfExpiry")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfExpiry { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>Identifies the name of the drawee of Bills of Exchange to be presented under the LC, if the drawee is a customer of the bank with a valid customer number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draweeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DraweeId { get; set; }= default!;
    
        /// <summary>Identifies if part shipments are allowed under the terms of the Letter of Credit. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipment { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipment { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Identifies the goods description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGoods { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT740 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderToReceiverInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SenderToReceiverInfo { get; set; }= default!;
    
    
    }
    
    /// <summary>IssuanceOfTransferableLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfTransferableLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public IssuanceOfTransferableLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuanceOfTransferableLCResponseBody 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBanks")]
        public System.Collections.Generic.ICollection<AdvisingBanks6>? AdvisingBanks { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences10>? LimitReferences { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("drawings")]
        public System.Collections.Generic.ICollection<Drawings6>? Drawings { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges16>? Charges { get; set; }= default!;
    
        /// <summary>This field provides the user with a free text field to make any internal notes regarding the assignment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignments")]
        public System.Collections.Generic.ICollection<Assignments2>? Assignments { get; set; }= default!;
    
        /// <summary>Indicates the  First Beneficairy details on whose request the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstBeneficiaries")]
        public System.Collections.Generic.ICollection<FirstBeneficiaries>? FirstBeneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the  second Beneficiary details on whose favour the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaries")]
        public System.Collections.Generic.ICollection<SecondBeneficiaries2>? SecondBeneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks16>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftsAt")]
        public System.Collections.Generic.ICollection<DraftsAt2>? DraftsAt { get; set; }= default!;
    
        /// <summary>Identify the drawee of Bills of Exchange to be presented under the LC, if the drawee is not a customer of the bank with a valid customer number. Drawees Name and Address may be manually input.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawees")]
        public System.Collections.Generic.ICollection<Drawees2>? Drawees { get; set; }= default!;
    
        /// <summary>This field specify the payment dates, amounts and/or method for the determination in an LC, which is available by mixed payment. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("mixedPaymentDetails")]
        public System.Collections.Generic.ICollection<MixedPaymentDetails2>? MixedPaymentDetails { get; set; }= default!;
    
        /// <summary>This field specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationDeferredPaymentDetails")]
        public System.Collections.Generic.ICollection<NegotiationDeferredPaymentDetails2>? NegotiationDeferredPaymentDetails { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods8>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired6>? DocumentsRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions6>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges6>? NarrativeCharges { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankNames")]
        public System.Collections.Generic.ICollection<RequestedConfirmBankNames14>? RequestedConfirmBankNames { get; set; }= default!;
    
        /// <summary>This field can be used to stiputate any special or additional instructions to the Paying/Accepting/Negotiating Bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionsToTheBanks")]
        public System.Collections.Generic.ICollection<InstructionsToTheBanks2>? InstructionsToTheBanks { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBanks")]
        public System.Collections.Generic.ICollection<AdviseThroughBanks16>? AdviseThroughBanks { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the parent LC number under the transfer LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parentLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? ParentLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) at the time of transferring a letter of credit. It can also be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcTransferAdvisingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string? LcTransferAdvisingReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankLCReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankLCReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>Date of advising the Letter of Credit to beneficiary or Second advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdvisingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdvisingDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 8D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the second Beneficiary ID in whose favour the transfer Letter of Credit is transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaryID")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SecondBeneficiaryID { get; set; }= default!;
    
        /// <summary>Indicates the second Beneficiary name and address in whose favour the transfer Letter of Credit is transferred.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SecondBeneficiaryAddress { get; set; }= default!;
    
        /// <summary>specifies the fist beneficiary ID under an export Letter of Credit when the Letter of credit is transferred to a second beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstBeneficiaryID")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FirstBeneficiaryID { get; set; }= default!;
    
        /// <summary>Indicates the  First Beneficiary name and address on whose request the transfer Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstBeneficiaryName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FirstBeneficiaryName { get; set; }= default!;
    
        /// <summary>Indicates the bank ID that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithBankID { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBankID")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdviseThroughBankID { get; set; }= default!;
    
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the receiver of the SWIFT MT700 / MT710 </summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ConfirmationInstruction { get; set; }= default!;
    
        /// <summary>Identifies the risk party under the LC contract. Must be a valid customer number or Mnemonic. It's a system populated field other than the export LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("riskParty")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RiskParty { get; set; }= default!;
    
        /// <summary>Indicates the Date of adding confirmation to the export LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ConfirmationDate { get; set; }= default!;
    
        /// <summary>Value in this field indicates that the portion of the Letter of Credit that has been confirmed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmationAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConfirmationAmount { get; set; }= default!;
    
        /// <summary>System populated field to indicate the amount in terms of LC currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmLiabilityAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ConfirmLiabilityAmount { get; set; }= default!;
    
        /// <summary>Identifies the total unconfirmed liability amount in respect of partially confirmed Letters of Credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("unconfirmLiabilityAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? UnconfirmLiabilityAmount { get; set; }= default!;
    
        /// <summary>This field indicated the limit reference assigned for the unconfirmed portion of the LC. Input in this field will be allowed based in the parameter system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unconfirmLimitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UnconfirmLimitReference { get; set; }= default!;
    
        /// <summary>Identifies the type of Revolving Letter of Credit , if Cumulative (CM) or Non-Cumulative type. (NC) </summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingType { get; set; }= default!;
    
        /// <summary>Identifies the number of times the letter of credit will revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numberOfRevolution")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NumberOfRevolution { get; set; }= default!;
    
        /// <summary>Defines the frequency at which the letter of credit is to revolve.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revolvingFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? RevolvingFrequency { get; set; }= default!;
    
        /// <summary>This field determines if the limit to be impacted to the current LC cycle or for the entire cycle including all the revolving values. Valid input in this field is SINGLE, and Input allowed only if the LC is revolving and non-cumulative in nature.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitForRevolving")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitForRevolving { get; set; }= default!;
    
        /// <summary>Related to revolving Letters of Credit, this is a system populated field to display the liability in terms of the LC currency for the Current revolution.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("curRevolLiab")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurRevolLiab { get; set; }= default!;
    
        /// <summary>This field specifies the type of credit and whether or not the Sender is adding its confirmation to the credit. Valid inputs are: Adding our Confirmation / Without our Confirmation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("formOfDocCredit")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FormOfDocCredit { get; set; }= default!;
    
        /// <summary>This field  identifies the advising banks transfer LCs number (or reference of the L/C from legacy system).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransferingBankReference { get; set; }= default!;
    
        /// <summary>Indicates the Issuing Bank's reference of the Documentary Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentaryCreditNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentaryCreditNumber { get; set; }= default!;
    
        /// <summary>This field holds the issue date of Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcIssueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LcIssueDate { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to. Following are the valid inputs under this field: UCP LATEST VERSION, EUCP LATEST VERSION, UCPURR LATEST VERSION, EUCPURR LATEST VERSION, ISP LATEST VERSION, OTHR. If OTHR is input then, the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRule")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicableRule { get; set; }= default!;
    
        /// <summary>Specifies the rules the Letter of credit is subject to OTHER condition. If the valid code inputs under the field applicable rules as OTHR, then the rule under which credit is subject to must be input in applicable rules description field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicableRuleDescription { get; set; }= default!;
    
        /// <summary>Identifies the expiry date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfExpiry")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfExpiry { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.Range(0D, 35D)]
        public double? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>Identifies the name of the drawee of Bills of Exchange to be presented under the LC, if the drawee is a customer of the bank with a valid customer number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draweeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DraweeId { get; set; }= default!;
    
        /// <summary>Identifies if part shipments are allowed under the terms of the Letter of Credit. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipment { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC. Valid codes are ALLOWED, CONDITIONAL, and NOT ALLOWED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Transhipment { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Identifies the goods description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGoods { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT740 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderToReceiverInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SenderToReceiverInfo { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalAmendmentToAnLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalAmendmentToAnLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalAmendmentToAnLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalAmendmentToAnLCBody 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered7>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods9>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges7>? NarrativeCharges { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges17>? Charges { get; set; }= default!;
    
        /// <summary>This field holds the details of the amendments (Tag 77), while generating/receiving MT747 message type.(Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimNarratives")]
        public System.Collections.Generic.ICollection<ReimNarratives>? ReimNarratives { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string AdvisingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentDate { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBankAndAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ReimbursingBankAndAddress { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>Indicates the portion of the Letter of Credit amount for which the charges are to be applied at the time of amendment instead of recalculation the charges for the full LC value. If left blank, LC.AMOUNT will be used for calculating default charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ChargeBaseAmount { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("docyCreditNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DocyCreditNumber { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing banks number, to be input at the time of generating the SWIFT MT747 (Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? ReimbursingBankReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the date on which MT740 (Authorization to Reimburse) was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfOriginalAuthorisation")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DateOfOriginalAuthorisation { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newDocyCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 33D)]
        public double? NewDocyCreditAmount { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT740 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderToReceiverInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? SenderToReceiverInfo { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalAmendmentToAnLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalAmendmentToAnLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExternalAmendmentToAnLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalAmendmentToAnLCResponseBody 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered8>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries2>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods10>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges8>? NarrativeCharges { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges18>? Charges { get; set; }= default!;
    
        /// <summary>This field holds the details of the amendments (Tag 77), while generating/receiving MT747 message type.(Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimNarratives")]
        public System.Collections.Generic.ICollection<ReimNarratives2>? ReimNarratives { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentDate { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies the number of calendar days after the date of shipment within which the documents must be presented for payment, acceptance or negotiation. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysAndPeriodForPresentation")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DaysAndPeriodForPresentation { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Decision field to determine whether the contingent entries are to be reversed after the deal expiry date or not Allowed values: - YES - NO - null (default value, same as NO)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoExpiry")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AutoExpiry { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing bank ID under the LC, through whom reimbursement will be made to the paying/negotiating bank for a letter of credit. (Reimbursing bank should be a valid customer with customer ID)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ReimbursingBank { get; set; }= default!;
    
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBankAndAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ReimbursingBankAndAddress { get; set; }= default!;
    
        /// <summary>Indicates the reimbursement rules that the Letter of Credit contract is subject to. Allowed values: - URR LATEST VERSION - NOTURR - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicableRuleCodesMT740")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicableRuleCodesMT740 { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>This field indicate whether a draft print of the Letter of Credit / Documentary Collection document created is to be produced on deal input (i.e. before the authorization stage) Y' or 'N'. Default from LC.PARAMETERS file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftPrint")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? DraftPrint { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>Indicates the portion of the Letter of Credit amount for which the charges are to be applied at the time of amendment instead of recalculation the charges for the full LC value. If left blank, LC.AMOUNT will be used for calculating default charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ChargeBaseAmount { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>This Field determines the exchange rate to be used between the provision debit account and the provision credit account, when the currencies differ</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginExchangeRate { get; set; }= default!;
    
        /// <summary>This field determines if the margin calculated to be debited after considering the limits booked under the LC contract. Yes or No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitWithProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitWithProvision { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("docyCreditNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DocyCreditNumber { get; set; }= default!;
    
        /// <summary>Identifies the reimbursing banks number, to be input at the time of generating the SWIFT MT747 (Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? ReimbursingBankReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the date on which MT740 (Authorization to Reimburse) was sent.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfOriginalAuthorisation")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? DateOfOriginalAuthorisation { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newDocyCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 33D)]
        public double? NewDocyCreditAmount { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT740 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderToReceiverInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? SenderToReceiverInfo { get; set; }= default!;
    
    
    }
    
    /// <summary>AmendmentSeekingBeneficiaryConsent</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentSeekingBeneficiaryConsent 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AmendmentSeekingBeneficiaryConsentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentSeekingBeneficiaryConsentBody 
    {
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankIds")]
        public System.Collections.Generic.ICollection<AdvisingBankIds>? AdvisingBankIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses15>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired7>? DocumentsRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions7>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges19>? Charges { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>This is a system populated field that indicates the total liability amount in respect of each issued or confirmed letters of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcLiabilityAmountOutStanding")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? LcLiabilityAmountOutStanding { get; set; }= default!;
    
        /// <summary>This is a system populated field indicating the total amount of all the pending Amendments pertaining the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingAmendMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PendingAmendMovement { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>This field indicates the Revised increased/decreased amount in LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseOrDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseOrDecreaseAmount { get; set; }= default!;
    
        /// <summary>This field specified  the new amended negative tolerance percentage under the Letter of Credit , to calculate the minimum amount that can be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newDebitTolerance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? NewDebitTolerance { get; set; }= default!;
    
        /// <summary>This field defines the new tolerance percentage to be added to the LC amount to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newCreditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewCreditTolerance { get; set; }= default!;
    
        /// <summary>Contains the new expiry date of data rights request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewExpiryDate { get; set; }= default!;
    
        /// <summary>New Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLiabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLiabilityReversalDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewExpiryPlace { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>Indicates whether LIMIT has to be updated when the Amendment contract is authorized, prior to acceptance of the amendment from beneficiary. System maintained. Updated from LC.AMENDMENT application.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("separateLimitUpdate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SeparateLimitUpdate { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT707 message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendReceiveInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendReceiveInfo { get; set; }= default!;
    
        /// <summary>Identifies the goods description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DescriptionOfGoods { get; set; }= default!;
    
        /// <summary>Indicates the portion of the Letter of Credit amount for which the charges are to be applied at the time of amendment instead of recalculation the charges for the full LC value. If left blank, LC.AMOUNT will be used for calculating default charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeBaseAmount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>AmendmentSeekingBeneficiaryConsentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentSeekingBeneficiaryConsentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AmendmentSeekingBeneficiaryConsentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentSeekingBeneficiaryConsentResponseBody 
    {
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankIds")]
        public System.Collections.Generic.ICollection<AdvisingBankIds2>? AdvisingBankIds { get; set; }= default!;
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddresses")]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses16>? BeneficiaryAddresses { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired8>? DocumentsRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions8>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges20>? Charges { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>This is a system populated field that indicates the total liability amount in respect of each issued or confirmed letters of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcLiabilityAmountOutStanding")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? LcLiabilityAmountOutStanding { get; set; }= default!;
    
        /// <summary>This is a system populated field indicating the total amount of all the pending Amendments pertaining the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingAmendMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PendingAmendMovement { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>This field indicates the Revised increased/decreased amount in LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseOrDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? IncreaseOrDecreaseAmount { get; set; }= default!;
    
        /// <summary>This field specified  the new amended negative tolerance percentage under the Letter of Credit , to calculate the minimum amount that can be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newDebitTolerance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? NewDebitTolerance { get; set; }= default!;
    
        /// <summary>This field defines the new tolerance percentage to be added to the LC amount to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newCreditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewCreditTolerance { get; set; }= default!;
    
        /// <summary>Contains the new expiry date of data rights request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewExpiryDate { get; set; }= default!;
    
        /// <summary>New Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLiabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLiabilityReversalDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewExpiryPlace { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>Indicates whether LIMIT has to be updated when the Amendment contract is authorized, prior to acceptance of the amendment from beneficiary. System maintained. Updated from LC.AMENDMENT application.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("separateLimitUpdate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SeparateLimitUpdate { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT707 message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendReceiveInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendReceiveInfo { get; set; }= default!;
    
        /// <summary>Identifies the goods description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DescriptionOfGoods { get; set; }= default!;
    
        /// <summary>Indicates the portion of the Letter of Credit amount for which the charges are to be applied at the time of amendment instead of recalculation the charges for the full LC value. If left blank, LC.AMOUNT will be used for calculating default charges</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeBaseAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeBaseAmount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>DecisionOnAmendment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnAmendment 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DecisionOnAmendmentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnAmendmentBody 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered9>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences11>? LimitReferences { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries3>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBanks")]
        public System.Collections.Generic.ICollection<BankToBanks>? BankToBanks { get; set; }= default!;
    
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetails")]
        public System.Collections.Generic.ICollection<InternalAmendmentDetails>? InternalAmendmentDetails { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges21>? Charges { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions>? Commissions { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmendmentDate { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharges { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portsOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortsOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates if the commission is claimed from opener or beneficiary Options - O(Opener) or B(Beneficiary) Allowed only when commission is claimed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionPartyCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionPartyCharge { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Indicates if the commission is to be collected from the customer's account or claimed. Yes To be claimed Null To be collected from customers account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionClaimed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionClaimed { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the number of days for which the commission is calculated for the associated period band.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoDays")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoDays { get; set; }= default!;
    
    
    }
    
    /// <summary>DecisionOnAmendmentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnAmendmentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DecisionOnAmendmentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnAmendmentResponseBody 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered10>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences12>? LimitReferences { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries4>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBanks")]
        public System.Collections.Generic.ICollection<BankToBanks2>? BankToBanks { get; set; }= default!;
    
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetails")]
        public System.Collections.Generic.ICollection<InternalAmendmentDetails2>? InternalAmendmentDetails { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges22>? Charges { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions2>? Commissions { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmendmentDate { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharges { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portsOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortsOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates if the commission is claimed from opener or beneficiary Options - O(Opener) or B(Beneficiary) Allowed only when commission is claimed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionPartyCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionPartyCharge { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Indicates if the commission is to be collected from the customer's account or claimed. Yes To be claimed Null To be collected from customers account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionClaimed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionClaimed { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the number of days for which the commission is calculated for the associated period band.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoDays")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoDays { get; set; }= default!;
    
    
    }
    
    /// <summary>CancellationOfLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CancellationOfLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfLCBody 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences13>? LimitReferences { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries5>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges23>? Charges { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions3>? Commissions { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string AdvisingBankReference { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCBodyPurposeOfMessage? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>This field indicate whether this LC is fully utilised YES - fully utilised  NO - not fully utilised This field will default to NO. It may be set to YES in the following circumstances: - During an amendment to the LC - If a drawing is set to fully utilise - If the total of all drawings exceeds the LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullyUtilised")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FullyUtilised { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCBodyNarrative? Narrative { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCBodyBankToBank? BankToBank { get; set; }= default!;
    
        /// <summary>This field indicate whether a draft print of the Letter of Credit / Documentary Collection document created is to be produced on deal input (i.e. before the authorization stage) Y' or 'N'. Default from LC.PARAMETERS file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftPrint")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DraftPrint { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates if the commission is claimed from opener or beneficiary Options - O(Opener) or B(Beneficiary) Allowed only when commission is claimed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionPartyCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionPartyCharge { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Indicates if the commission is to be collected from the customer's account or claimed. Yes To be claimed Null To be collected from customers account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionClaimed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionClaimed { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the number of days for which the commission is calculated for the associated period band.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoDays")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoDays { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>Indicates the account where the provision taken under a credit needs to be credited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCreditAccount { get; set; }= default!;
    
        /// <summary>This is a system maintained field Indicating the provision amount outstanding for the LC contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginOutstanding { get; set; }= default!;
    
    
    }
    
    /// <summary>CancellationOfLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CancellationOfLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfLCResponseBody 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferences")]
        public System.Collections.Generic.ICollection<LimitReferences14>? LimitReferences { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries6>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges24>? Charges { get; set; }= default!;
    
        /// <summary>The bank fees or commission charged for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissions")]
        public System.Collections.Generic.ICollection<Commissions4>? Commissions { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Advising Bank reference number for use on messages and advices under the LC contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? AdvisingBankReference { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCResponseBodyPurposeOfMessage? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>This field indicate whether this LC is fully utilised YES - fully utilised  NO - not fully utilised This field will default to NO. It may be set to YES in the following circumstances: - During an amendment to the LC - If a drawing is set to fully utilise - If the total of all drawings exceeds the LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullyUtilised")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FullyUtilised { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCResponseBodyNarrative? Narrative { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CancellationOfLCResponseBodyBankToBank? BankToBank { get; set; }= default!;
    
        /// <summary>This field indicate whether a draft print of the Letter of Credit / Documentary Collection document created is to be produced on deal input (i.e. before the authorization stage) Y' or 'N'. Default from LC.PARAMETERS file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftPrint")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DraftPrint { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates if the commission is claimed from opener or beneficiary Options - O(Opener) or B(Beneficiary) Allowed only when commission is claimed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionPartyCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionPartyCharge { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Indicates if the commission is to be collected from the customer's account or claimed. Yes To be claimed Null To be collected from customers account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionClaimed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionClaimed { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the number of days for which the commission is calculated for the associated period band.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoDays")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoDays { get; set; }= default!;
    
        /// <summary>Decision field enabling a cash margin to be blocked for the LC contract. Yes or No, default is No</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginRequired { get; set; }= default!;
    
        /// <summary>Flag to enable the online release of the cash margin. Allowed values: - YES - null (default)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("releaseProvision")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReleaseProvision { get; set; }= default!;
    
        /// <summary>This field determines if the margin to be calculated based on the LC base amount or the total liability amount including tolerance etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCalculationBase")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCalculationBase { get; set; }= default!;
    
        /// <summary>Field to state the percentage of provision to be taken</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginPercent { get; set; }= default!;
    
        /// <summary>Field to state the account from which the provision amount is to be debited</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginDebitAccount { get; set; }= default!;
    
        /// <summary>Actual amount of provision that is debited for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? MarginAmount { get; set; }= default!;
    
        /// <summary>Indicates the account where the provision taken under a credit needs to be credited.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCreditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginCreditAccount { get; set; }= default!;
    
        /// <summary>This is a system maintained field Indicating the provision amount outstanding for the LC contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MarginOutstanding { get; set; }= default!;
    
    
    }
    
    /// <summary>DecisionOnExportLCAmendment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnExportLCAmendment 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DecisionOnExportLCAmendmentBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnExportLCAmendmentBody 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries7>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods11>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetails")]
        public System.Collections.Generic.ICollection<InternalAmendmentDetails3>? InternalAmendmentDetails { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges25>? Charges { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Issuing Bank/Advising Bank/Customer reference number for use on messages and advices under the LC contract. For Export LCs this is the Issuing Bank's reference. For Import LCs this is the Advising Bank's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>DecisionOnExportLCAmendmentResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnExportLCAmendmentResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public DecisionOnExportLCAmendmentResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DecisionOnExportLCAmendmentResponseBody 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries8>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods12>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBanks")]
        public System.Collections.Generic.ICollection<BankToBanks3>? BankToBanks { get; set; }= default!;
    
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetails")]
        public System.Collections.Generic.ICollection<InternalAmendmentDetails4>? InternalAmendmentDetails { get; set; }= default!;
    
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiversInfoMT730")]
        public System.Collections.Generic.ICollection<SenderReceiversInfoMT7303>? SenderReceiversInfoMT730 { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges26>? Charges { get; set; }= default!;
    
        /// <summary>Indicates the amendment number under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendmentNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Indicates the applicant ID on whose behalf the Letter of Credit is issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantCustomer { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Issuing Bank/Advising Bank/Customer reference number for use on messages and advices under the LC contract. For Export LCs this is the Issuing Bank's reference. For Import LCs this is the Advising Bank's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankReference { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Indicates the place of taking in charge(in case of multimodal transport document), the place of receipt(in case of a road, rail or inland waterway transport document or a courier expedited delivery service document), the place of dispatch or the place of shipment to be indicated on the transport document</summary>
        [System.Text.Json.Serialization.JsonPropertyName("placeOfTakingInCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PlaceOfTakingInCharge { get; set; }= default!;
    
        /// <summary>Indicates the place of dispatch or taking in charge of the goods or loading on board for shipments made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfLoading")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfLoading { get; set; }= default!;
    
        /// <summary>Indicates the port of discharge or the airport of destination of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portOfDischarge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortOfDischarge { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
    
    }
    
    /// <summary>CancellationOfExportLC</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfExportLC 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CancellationOfExportLCBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfExportLCBody 
    {
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicants")]
        public System.Collections.Generic.ICollection<Applicants>? Applicants { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered11>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries9>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges27>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Issuing Bank/Advising Bank/Customer reference number for use on messages and advices under the LC contract. For Export LCs this is the Issuing Bank's reference. For Import LCs this is the Advising Bank's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankReference")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string IssuingBankReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>This field holds the issue date of Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcIssueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcIssueDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string CancellationRequest { get; set; }= default!;
    
        /// <summary>This field indicate whether this LC is fully utilised YES - fully utilised  NO - not fully utilised This field will default to NO. It may be set to YES in the following circumstances: - During an amendment to the LC - If a drawing is set to fully utilise - If the total of all drawings exceeds the LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullyUtilised")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FullyUtilised { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BankToBank { get; set; }= default!;
    
        /// <summary>This field indicate whether a draft print of the Letter of Credit / Documentary Collection document created is to be produced on deal input (i.e. before the authorization stage) Y' or 'N'. Default from LC.PARAMETERS file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftPrint")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DraftPrint { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
    
    }
    
    /// <summary>CancellationOfExportLCResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfExportLCResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CancellationOfExportLCResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CancellationOfExportLCResponseBody 
    {
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicants")]
        public System.Collections.Generic.ICollection<Applicants2>? Applicants { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered12>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries10>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges28>? Charges { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Decides if an amendment is external or internal . Valid input is YES, indicating that an amendment is external and that a message is to be communicated to other parties of the Letter of Credit. Otherwise, NO indicates an internal amendment hence no message output.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendAmendmentAdvice")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? SendAmendmentAdvice { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Issuing Bank/Advising Bank/Customer reference number for use on messages and advices under the LC contract. For Export LCs this is the Issuing Bank's reference. For Import LCs this is the Advising Bank's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? IssuingBankReference { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>This field holds the issue date of Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcIssueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcIssueDate { get; set; }= default!;
    
        /// <summary>Denote the currency of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcCurrency { get; set; }= default!;
    
        /// <summary>This field indicates the new amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLcAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLcAmount { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit the amount can be specified plus or minus a tolerance expressed as a percentage which will always impact the LC liability for the greater amount including the plus tolerance as defined in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditTolerance { get; set; }= default!;
    
        /// <summary>Under a Letter of Credit, the amount can be specified with a tolerance, which will impact the LC liability for the greater amount. The amount in this field specifies a negative tolerance expressed as a percentage of the LC amount. It can impact the final drawing amount but not the live LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitTolerance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitTolerance { get; set; }= default!;
    
        /// <summary>Indicates the purpose of MT707 amendment message, whether its the issuance of amendment message or advise of amendment message to the second advising bank or advise and confirmation of amendment message to the second advising bank. Permitted Codes are: ACNF - Advice and confirmation of the credit amendment ADVI - Advice of the credit amendment ISSU - Issuance of the credit amendment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("purposeOfMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PurposeOfMessage { get; set; }= default!;
    
        /// <summary>Indicates that the documentary credit is requested to be cancelled. Valid input in this field is CANCEL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationRequest")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? CancellationRequest { get; set; }= default!;
    
        /// <summary>This field indicate whether this LC is fully utilised YES - fully utilised  NO - not fully utilised This field will default to NO. It may be set to YES in the following circumstances: - During an amendment to the LC - If a drawing is set to fully utilise - If the total of all drawings exceeds the LC amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullyUtilised")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FullyUtilised { get; set; }= default!;
    
        /// <summary>New Expiry date for presentation under the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryDate { get; set; }= default!;
    
        /// <summary>New Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newLCExpiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? NewLCExpiryPlace { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("latestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LatestShipmentDate { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BankToBank { get; set; }= default!;
    
        /// <summary>This field indicate whether a draft print of the Letter of Credit / Documentary Collection document created is to be produced on deal input (i.e. before the authorization stage) Y' or 'N'. Default from LC.PARAMETERS file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftPrint")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DraftPrint { get; set; }= default!;
    
        /// <summary>System updated field at the time of Amendment decision under the Letter of Credit using Operation 'D'. This field indicates the current status of the amendment whether amendment is pending, approved or rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmendStatus { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeFrom { get; set; }= default!;
    
        /// <summary>This field identifies the default charge account under which all present and future charges under the letter of credit will be debited to. This eliminates the need to specify the charge account for every charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDefaultAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDefaultAccount { get; set; }= default!;
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCharge { get; set; }= default!;
    
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This field indicates whether any default charges under Letters of Credit are to be waived. Values are Yes, Null If yes is selected, then the subject commission will not be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiveCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? WaiveCommission { get; set; }= default!;
    
        /// <summary>Indicates the Start date for calculation of the Letter of Credit commission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionStartDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionStartDate { get; set; }= default!;
    
        /// <summary>Indicates the frequency at which the commission is to be collected or claimed. Only monthly frequency allowed (M01, M02, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionFrequency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionFrequency { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Indicates if the value date or maturity date or both need to be considered for commission calculation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualParam")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccrualParam { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? CommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed commission amount for each commission schedule. Amount expressed in the currency of the contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fixedCommissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FixedCommissionAmount { get; set; }= default!;
    
        /// <summary>Indicates the Account from which the commission amount is to be collected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAccount { get; set; }= default!;
    
        /// <summary>Indicates the Exchange rate to be applied between commission(contract) currency and commission account currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionExchangeRate { get; set; }= default!;
    
        /// <summary>Identifies on which day the scheduled frequency date is to be cycled, when the scheduled date is not a working day. C - Calendar P - Previous working day N - Next working day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("backForwardKey")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BackForwardKey { get; set; }= default!;
    
        /// <summary>Determines whether the excess commission amount calculated on account of principal decrease is to be returned to the customer or not. YES or No. Value gets defaulted from LC.PARAMETERS which can be amended by the user.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("returnCommission")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReturnCommission { get; set; }= default!;
    
    
    }
    
    /// <summary>ImportLcsOutstandingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcsOutstandingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ImportLcsOutstandingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcsOutstandingResponseBody : System.Collections.ObjectModel.Collection<Anonymous21>
    {
    
    }
    
    /// <summary>ImportLcsExpiringButOutstandingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcsExpiringButOutstandingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ImportLcsExpiringButOutstandingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ImportLcsExpiringButOutstandingResponseBody : System.Collections.ObjectModel.Collection<Anonymous22>
    {
    
    }
    
    /// <summary>ExportlcsOutstandingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportlcsOutstandingResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExportlcsOutstandingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExportlcsOutstandingResponseBody : System.Collections.ObjectModel.Collection<Anonymous23>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccountIds 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SupportDocument { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentNames 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SupportDocuments { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConsolidatedDiscrepancies 
    {
        /// <summary>Consolidates the discrepancies that are specified in the fields DISCREPANCY,DEF.DISCREPANCY and the DOC.DISCREPANCY fields. The discrepancies listed in this field will only be relayed in the MT734/MT750 OUTWARD swift message.When an Inward MT734/750 is received in T24 the discrepancies listed in the message are mapped to this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancy")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ConsolidatedDiscrepancy { get; set; }= default!;
    
        /// <summary>Specifies the current status of each discrepancies</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DiscrepancyStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentorIds 
    {
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PresentorId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ChargeAccountIds2 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ChargeAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks2 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers2 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments2 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SupportDocument { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentNames2 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SupportDocuments { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConsolidatedDiscrepancies2 
    {
        /// <summary>Consolidates the discrepancies that are specified in the fields DISCREPANCY,DEF.DISCREPANCY and the DOC.DISCREPANCY fields. The discrepancies listed in this field will only be relayed in the MT734/MT750 OUTWARD swift message.When an Inward MT734/750 is received in T24 the discrepancies listed in the message are mapped to this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancy")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ConsolidatedDiscrepancy { get; set; }= default!;
    
        /// <summary>Specifies the current status of each discrepancies</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DiscrepancyStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentorIds2 
    {
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PresentorId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.ADVICE.TEXT for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdviceDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdviceDescription { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives3>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails2 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.ADVICE.TEXT for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdviceDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdviceDescription { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives4>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbLimitExceeds 
    {
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IbLimitExceed { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmend 
    {
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives5>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers3 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks3 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides3 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbLimitExceeds2 
    {
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceed")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? IbLimitExceed { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered2 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods2 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcAmend2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives6>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers4 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks4 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides4 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        [System.Text.Json.Serialization.JsonPropertyName("documentStatuses")]
        public System.Collections.Generic.ICollection<DocumentStatuses>? DocumentStatuses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("forwardContracts")]
        public System.Collections.Generic.ICollection<ForwardContracts>? ForwardContracts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerIds")]
        public System.Collections.Generic.ICollection<PresentorCustomerIds>? PresentorCustomerIds { get; set; }= default!;
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges29>? Charges { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancies")]
        public System.Collections.Generic.ICollection<ConsolidatedDiscrepancies3>? ConsolidatedDiscrepancies { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyDetails")]
        public System.Collections.Generic.ICollection<DiscrepancyDetails>? DiscrepancyDetails { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks5>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers5>? MessageFromCustomers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("inwardMessageIds")]
        public System.Collections.Generic.ICollection<InwardMessageIds>? InwardMessageIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerNames")]
        public System.Collections.Generic.ICollection<PresentorCustomerNames>? PresentorCustomerNames { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerAddresses")]
        public System.Collections.Generic.ICollection<PresentorCustomerAddresses>? PresentorCustomerAddresses { get; set; }= default!;
    
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocuments")]
        public System.Collections.Generic.ICollection<SupportDocuments7>? SupportDocuments { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DebitAccountId { get; set; }= default!;
    
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? GuaranteeId { get; set; }= default!;
    
        /// <summary>To specify if Original documents have been received by the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentReceived")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? DocumentReceived { get; set; }= default!;
    
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PresentorId { get; set; }= default!;
    
        /// <summary>This field is used to hold the actual reimbursement amount, plus any charges applicable, debited from the Drawdown Account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimburseAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ReimburseAmount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Identifier of drawings application under the Letter of Credit system that is used to effect the transfer of funds and the acceptance of documents under Letters of Credit and Documentary Collection transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DrawingId { get; set; }= default!;
    
        /// <summary>Business date on which the accounting entry was generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BookingDate { get; set; }= default!;
    
        /// <summary>This field contains the date on which Acceptance/Deferred Payment drawings will mature, or Letter of Credit Collection drawings will be due for chasing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityReview")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? MaturityReview { get; set; }= default!;
    
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PresentorCustomer { get; set; }= default!;
    
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantResponseDiscrepancy")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? ApplicantResponseDiscrepancy { get; set; }= default!;
    
        /// <summary>This field identifies the account currency where funds are to be received from under this drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawdownAccountCurrency")]
        public string? DrawdownAccountCurrency { get; set; }= default!;
    
        /// <summary>This field identifies the account currency where funds are to be received from under this drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCustomerRate")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? DebitCustomerRate { get; set; }= default!;
    
        /// <summary>This field is used by Sight drawings where user can specify a different debit value date from the credit value date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitValue")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DebitValue { get; set; }= default!;
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CreditAccountId { get; set; }= default!;
    
        /// <summary>Specifies the credit currency. For example: USD, EUR etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditCurrencyId")]
        public string? CreditCurrencyId { get; set; }= default!;
    
        /// <summary>Amount to be credited in a payment transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? CreditAmount { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails7>? DocumentDetails { get; set; }= default!;
    
        /// <summary>This is the key to the letter of credit advice text file.During the input of an L/C this code can be entered for the inclusion of standard text.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdviceTextId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LcAdviceTextId { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayNames")]
        public System.Collections.Generic.ICollection<DisplayNames>? DisplayNames { get; set; }= default!;
    
        /// <summary>This is the key to the LC.CLAUSES file.During the input of an L/C this code can be entered for the inclusion of standard clauses.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcClausesId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LcClausesId { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.CLAUSES narrative for enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClausesDescription { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Indicates the identifier of payment type enrichment for letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcEnrichmentId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? LcEnrichmentId { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? IncoTerms { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        [System.Text.Json.Serialization.JsonPropertyName("issuingBanks")]
        public System.Collections.Generic.ICollection<IssuingBanks5>? IssuingBanks { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankAccountIds")]
        public System.Collections.Generic.ICollection<IssuingBankAccountIds>? IssuingBankAccountIds { get; set; }= default!;
    
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddresses")]
        public System.Collections.Generic.ICollection<AdvisingBankAddresses13>? AdvisingBankAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("forwardContracts")]
        public System.Collections.Generic.ICollection<ForwardContracts2>? ForwardContracts { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerIds")]
        public System.Collections.Generic.ICollection<ApplicantCustomerIds>? ApplicantCustomerIds { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerIds")]
        public System.Collections.Generic.ICollection<BeneficiaryCustomerIds>? BeneficiaryCustomerIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ibReasonDetails")]
        public System.Collections.Generic.ICollection<IbReasonDetails5>? IbReasonDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("presentPeriods")]
        public System.Collections.Generic.ICollection<PresentPeriods>? PresentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGoods")]
        public System.Collections.Generic.ICollection<DescriptionOfGoods5>? DescriptionOfGoods { get; set; }= default!;
    
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentsRequired")]
        public System.Collections.Generic.ICollection<DocumentsRequired9>? DocumentsRequired { get; set; }= default!;
    
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalConditions")]
        public System.Collections.Generic.ICollection<AdditionalConditions9>? AdditionalConditions { get; set; }= default!;
    
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftsAt")]
        public System.Collections.Generic.ICollection<DraftsAt3>? DraftsAt { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentDetails")]
        public System.Collections.Generic.ICollection<DocumentDetails8>? DocumentDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeIds")]
        public System.Collections.Generic.ICollection<GuaranteeIds5>? GuaranteeIds { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageGroup")]
        public System.Collections.Generic.ICollection<MessageGroup>? MessageGroup { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("instructions")]
        public System.Collections.Generic.ICollection<Instructions5>? Instructions { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("supportDocumentDetails")]
        public System.Collections.Generic.ICollection<SupportDocumentDetails>? SupportDocumentDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("amendmentIds")]
        public System.Collections.Generic.ICollection<AmendmentIds>? AmendmentIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("previousAmendIds")]
        public System.Collections.Generic.ICollection<PreviousAmendIds>? PreviousAmendIds { get; set; }= default!;
    
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBanks")]
        public System.Collections.Generic.ICollection<AvailableWithBanks17>? AvailableWithBanks { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered13>? AdditionalAmountsCovered { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayments")]
        public System.Collections.Generic.ICollection<DeferredPayments5>? DeferredPayments { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods13>? ShipmentPeriods { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("clausesTextDetails")]
        public System.Collections.Generic.ICollection<ClausesTextDetails>? ClausesTextDetails { get; set; }= default!;
    
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharges")]
        public System.Collections.Generic.ICollection<NarrativeCharges9>? NarrativeCharges { get; set; }= default!;
    
        /// <summary>Identifier of the Letter Of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("letterOfCreditId")]
        public string? LetterOfCreditId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>To specify the Corporate customer's reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientReference")]
        public string? ClientReference { get; set; }= default!;
    
        /// <summary>This field is used to decide the pay type for LC when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payTerms")]
        public string? PayTerms { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Field to indicate the status of LC request through internet banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcStatus")]
        public string? LcStatus { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
        /// <summary>This field identifies the total liability amount in respect of each individual issued or confirmed letters of credit. Used as a running total of the remaining credit amount available after all current drawings (if any) have been made under the letter of credit. The amount will be expressed in the currency of the letter of credit (LC.CURRENCY).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityCreditAmount")]
        public double? LiabilityCreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the actual expiry date of Guarantee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AdviceExpiryDate { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageDebitAmount")]
        public double? PercentageDebitAmount { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the letter of credit amount (LC.AMOUNT) to calculate the full liability amount or maximum amount that can be drawn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("percentageCreditAmount")]
        public double? PercentageCreditAmount { get; set; }= default!;
    
        /// <summary>This field is used to identify the banks former or current l/c number (or reference of the L/C on another computer system).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("legacyLcId")]
        public string? LegacyLcId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAccountId")]
        public string? BeneficiaryAccountId { get; set; }= default!;
    
        /// <summary>Indicates the date that the LC is due to be closed, and written to the history files. If any drawings are outstanding on this date for the LC, then the LC will not be closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ClosingDate { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections only. It is used in conjunction with the following field 'DAYS' or 'COLL.MAT.CODE' to indicate the TENOR of the drafts under the collection and is used in the production of corresponding Collection messages.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tenor")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Tenor { get; set; }= default!;
    
        /// <summary>This field is mandatory for Import Letter of Credits and contains the customer number or mnemonic of the advising bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? AdvisingBankCustomerId { get; set; }= default!;
    
        /// <summary>Identifies the account number of the Advising bank to be used as the default payment account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AdvisingBankAccountId { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>For Export/Advising Letter of Credit this is the Issuing Bank's/Opener's reference.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>Indicates the identifier of payment types for  letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("payType")]
        public string? PayType { get; set; }= default!;
    
        /// <summary>Indicates the identifier of payment type enrichment for letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeDetails")]
        public string? PaymentTypeDetails { get; set; }= default!;
    
        /// <summary>This field displays the number of the next drawing that will be made under the letter of credit. 01 is defaulted if there are no drawings against the L/C.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nextDrawingId")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? NextDrawingId { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 13D)]
        public double? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>Used for the production of messages/advices, this field stipulates the latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastestShipmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastestShipmentDate { get; set; }= default!;
    
        /// <summary>Expiry place for presentation under the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryPlace")]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string? ExpiryPlace { get; set; }= default!;
    
        /// <summary>This field contains confirmation instructions for the Receiver</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? ConfirmInstruction { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>This field identifies the Issuing Bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? IssuingBankNumber { get; set; }= default!;
    
        /// <summary>Valid for Documentary Collections and used in conjunction with the field TENOR to indicate the tenor of the drafts under the collection. It is used in the production of corresponding documentary collection messages and to support Option K of Tag 32a of SWIFT MT400, accepts D or M followed by number representing number of Days or number of Months.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("days")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? Days { get; set; }= default!;
    
        /// <summary>This field is valid for Documentary Collections Only. It records the maturity date as advised by the Collecting Bank of a usance draft accepted payable by the Drawee.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateAccepted")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DateAccepted { get; set; }= default!;
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ApplicantAccountId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Identifies the required operation to be executed for a Trade Finance contract. Input of valid codes as: O for opening of LC, P for Pre-advise of LC, A for Amend LC, C for Collect Charges, D for Decision on Amendments, T for Tracer, IO for LC through Internet Banking Operation and M for Ancillary Message (MT759)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? Operation { get; set; }= default!;
    
        /// <summary>This field indicates the codes available for the drafts under a collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionMaturityCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? CollectionMaturityCode { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>This field holds the valid incoterms code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incoTerms")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? IncoTerms { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is tranferrable or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferable")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Transferable { get; set; }= default!;
    
        /// <summary>This field is used to decide whether LC is STANBY or not when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("standByLId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? StandByLId { get; set; }= default!;
    
        /// <summary>This field holds the details of Part Shipment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialShipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PartialShipmentText { get; set; }= default!;
    
        /// <summary>Identifies if transhipments are allowed under the terms of the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transhipmentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TranshipmentText { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>This field identifies the how the credit is available under Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableByDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AvailableByDescription { get; set; }= default!;
    
        /// <summary>This field is used to define the mode of shipment used to transport goods.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentMode")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ShipmentMode { get; set; }= default!;
    
        /// <summary>This field turns on the Provision processing for import Letters of Credit and export confirmed LCs.. When this field is set to 'YES' , an account/percentage provision can be entered. The system will then calculate (using the percentage entered) a provision amount, which will be passed to the Provision.amount field. This amount is in the currency of the provision account. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("provision")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Provision { get; set; }= default!;
    
        /// <summary>Code to identify from whom the bank is to claim its charges. Allowed values: - O(pener) - B(eneficiary) - T(hird Party)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesFrom")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? ChargesFrom { get; set; }= default!;
    
        /// <summary>This field identifies the account from which related charges will be taken, if any.Any valid account number can be entered in this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargesAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ChargesAccountId { get; set; }= default!;
    
        /// <summary>This is the account for paying the commission at the Schedule date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CommissionAccountId { get; set; }= default!;
    
        /// <summary>This field is used to determine the account from which the provision should be debited when such a transaction is deemed to require provision.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ProvisionAccountId { get; set; }= default!;
    
        /// <summary>Based on documentCode, the field defaults the required document codes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DocumentId { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifies the applicant customer for the drawing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingApplicant")]
        public string? DrawingApplicant { get; set; }= default!;
    
        /// <summary>Specifies the document code defined in Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingDocument")]
        public string? DrawingDocument { get; set; }= default!;
    
        /// <summary>This field contains the value date for drawing entries. Can be future or back valued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DrawingDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmendmentDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Specifies the status of the amendment request. Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentStatus")]
        public string? AmendmentStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous8 
    {
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank name and address of the bank issuing the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankName")]
        public string? IssuingBankName { get; set; }= default!;
    
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        public string? ApplicantCustomerId { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous9 
    {
        /// <summary>Specifies the LC reference under which the shipping guarantee has been requested.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcId")]
        public string? LcId { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryId")]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Specifies the status of document submitted under LC. Associated multivalue field associated with fields DOC.ID to DOC.DISCREPANCY.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentStatus")]
        public string? DocumentStatus { get; set; }= default!;
    
        /// <summary>This field contains the value date for drawing entries. Can be future or back valued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DrawingDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? DrawingAmount { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous10 
    {
        /// <summary>Specifies the LC reference under which the shipping guarantee has been requested.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcId")]
        public string? LcId { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Date of the last external amendment, on which the issuing bank considers the Letter of Credit as being amended.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmendmentDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? DrawingAmount { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous11 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>For Letters of Credit this field identifies the Beneficiary's name and address.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcBeneficiaryValue")]
        public string? LcBeneficiaryValue { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 35D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
        /// <summary>This field indicates the user name of bank user who is processing the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmendmentBankUser")]
        public string? LcAmendmentBankUser { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous12 
    {
        /// <summary>This field indentifies the short mnemonic of documents to be defaulted in LETTER.OF.CREDIT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCodeId")]
        public string? DocumentCodeId { get; set; }= default!;
    
        /// <summary>Contains a short meaningful description of the LC.ADVICE.TEXT for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCodeName")]
        public string? DocumentCodeName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous13 
    {
        /// <summary>Identifier of collection id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        public string? CollectionId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>Indicates the customer name of the drawer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawerCustomerId")]
        public string? DrawerCustomerId { get; set; }= default!;
    
        /// <summary>This field indicates the collection initiated date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lodgeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LodgeDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous14 
    {
        [System.Text.Json.Serialization.JsonPropertyName("graphDetails")]
        public System.Collections.Generic.ICollection<GraphDetails>? GraphDetails { get; set; }= default!;
    
        /// <summary>The ID of the Letter of Credit, to be linked to this Guarantee for the purpose of apportioning the Margin</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionReference")]
        public string? CollectionReference { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>Indicates the customer name of the drawer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawerCustomerId")]
        public string? DrawerCustomerId { get; set; }= default!;
    
        /// <summary>Specifies the status of document submitted under LC. Associated multivalue field associated with fields DOC.ID to DOC.DISCREPANCY.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentStatus")]
        public string? DocumentStatus { get; set; }= default!;
    
        /// <summary>This field indicates the collection initiated date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lodgeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LodgeDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous15 
    {
        [System.Text.Json.Serialization.JsonPropertyName("lcPayTypeDetails")]
        public System.Collections.Generic.ICollection<LcPayTypeDetails>? LcPayTypeDetails { get; set; }= default!;
    
        /// <summary>Indicates the identifier of payment type enrichment for letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcPayTypeId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? LcPayTypeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous16 
    {
        /// <summary>Identifier of collection id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        public string? CollectionId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>Identifies the customer for the drawing request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draweeCustomerId")]
        public string? DraweeCustomerId { get; set; }= default!;
    
        /// <summary>This field indicates the collection initiated date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lodgeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LodgeDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous17 
    {
        [System.Text.Json.Serialization.JsonPropertyName("graphDetails")]
        public System.Collections.Generic.ICollection<GraphDetails2>? GraphDetails { get; set; }= default!;
    
        /// <summary>Identifier of collection id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        public string? CollectionId { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>Identifies the customer for the drawings request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draweeCustomerId")]
        public string? DraweeCustomerId { get; set; }= default!;
    
        /// <summary>Specifies the status of document submitted under LC. Associated multivalue field associated with fields DOC.ID to DOC.DISCREPANCY.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentStatus")]
        public string? DocumentStatus { get; set; }= default!;
    
        /// <summary>This field indicates the collection initiated date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lodgeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LodgeDate { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Contains the application id of the service that has crashed due to error.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string? ApplicationId { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Specifies the recent transactions for the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recentTransactions")]
        public string? RecentTransactions { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous18 
    {
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        public string? LcType { get; set; }= default!;
    
        /// <summary>The credit limit available to the customer for use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableAmount")]
        public double? AvailableAmount { get; set; }= default!;
    
        /// <summary>The Amount utilized for the guarantees for the specific customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisedAmount")]
        public double? UtilisedAmount { get; set; }= default!;
    
        /// <summary>Specifies the pending amount for the guarantees for the specific customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pendingAmount")]
        public double? PendingAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous19 
    {
        /// <summary>Identifier of collection id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? CollectionId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous20 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceeds")]
        public System.Collections.Generic.ICollection<IbLimitExceeds3>? IbLimitExceeds { get; set; }= default!;
    
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountsCovered")]
        public System.Collections.Generic.ICollection<AdditionalAmountsCovered14>? AdditionalAmountsCovered { get; set; }= default!;
    
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriods")]
        public System.Collections.Generic.ICollection<ShipmentPeriods14>? ShipmentPeriods { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativesGroup")]
        public System.Collections.Generic.ICollection<NarrativesGroup>? NarrativesGroup { get; set; }= default!;
    
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers6>? MessageFromCustomers { get; set; }= default!;
    
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBanks")]
        public System.Collections.Generic.ICollection<MessageFromBanks6>? MessageFromBanks { get; set; }= default!;
    
        /// <summary>Identifier of letter of credit amendment id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmendmentId")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? LcAmendmentId { get; set; }= default!;
    
        /// <summary>This field indicates the amount of the Letter of Credit that will always be expressed in the currency of Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? LcAmount { get; set; }= default!;
    
        /// <summary>The field to change the principal movement over the lifetime of the deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseDecreaseAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? IncreaseDecreaseAmount { get; set; }= default!;
    
        /// <summary>This field specifies the negative tolerance relative to the documentary credit amount as a percentage or as captured from an Inward message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("decreaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 5D)]
        public double? DecreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Used to define the percentage to be added to the Letter of Credit amount (LC.AMOUNT) to calculate the LIABILITY.AMOUNT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("increaseCreditAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 5D)]
        public double? IncreaseCreditAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum amount that can be drawn under this Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximumCreditAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? MaximumCreditAmount { get; set; }= default!;
    
        /// <summary>Specifies the new date on which the Letter of Credit expires from the beneficiary’s point of view.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("newAdviceExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewAdviceExpiryDate { get; set; }= default!;
    
        /// <summary>This Multi-value field indicates the place of Dispatch or Taking in charge of the goods or Loading on board.Used for the production of documents and advice, stipulates the place of Dispatch or Taking in charge of the goods or Loading on board for shipments made under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentDespatch")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ShipmentDespatch { get; set; }= default!;
    
        /// <summary>It denotes the Port of Loading/Airport of Departure.populated to 44E tag of 707 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherDespatchDetails")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? OtherDespatchDetails { get; set; }= default!;
    
        /// <summary>Indicates the final destination of the goods.Used for the production of documents and advice stipulated, the final destination of the goods shipped under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transportation")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Transportation { get; set; }= default!;
    
        /// <summary>Indicates the final destination or place of delivery of the shipment under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("finalDestination")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? FinalDestination { get; set; }= default!;
    
        /// <summary>Used for the production of messages/advices, this field stipulates the latest date for loading on board/dispatch/taking in charge for goods shipped under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastestShipmentDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? LastestShipmentDate { get; set; }= default!;
    
        /// <summary>Specifies the status of the request.Allowed values are - With Bank_With Customer_Approved_Rejected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? EventStatus { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantCustomerNames 
    {
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerNames 
    {
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithDetails 
    {
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWith")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWith { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered3 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeferredPayments 
    {
        /// <summary>This free text field will specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DeferredPayment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("contactInformations")]
        public System.Collections.Generic.ICollection<ContactInformations>? ContactInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods3 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentationPeriods 
    {
        /// <summary>Used for the production of messages/advices this field specifies the number of days after the date of issuance of the transports document(s) within which the documents must be presented for payment, acceptance or negotiation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentationPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DescriptionOfGoods 
    {
        /// <summary>Indicate the details of the amendment to the description of the goods under a Letter of Credit contract. The text to begin with the valid codes: ADD or DELETE or REPALL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGood")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGood { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails3 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Used in the production of messages/advices, this field in conjunction with &lt;DOCUMENT.CODE&gt; is used to identify the number of each document being sent in the first mailing to the respective party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("document1stCopy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Document1stCopy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clausesTexts")]
        public System.Collections.Generic.ICollection<ClausesTexts>? ClausesTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessages")]
        public System.Collections.Generic.ICollection<FromCustomerMessages>? FromCustomerMessages { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBanks 
    {
        /// <summary>This field identifies the Issuing Bank for an Export Letter of Credit and the Collecting Bank for an Outward Documentary Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments3 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions 
    {
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Instruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasonDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibReasons")]
        public System.Collections.Generic.ICollection<IbReasons>? IbReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides5 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIds 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantCustomerNames2 
    {
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks2 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerNames2 
    {
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithDetails2 
    {
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWith")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWith { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered4 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeferredPayments2 
    {
        /// <summary>This free text field will specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DeferredPayment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetails2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("contactInformations")]
        public System.Collections.Generic.ICollection<ContactInformations2>? ContactInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods4 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentationPeriods2 
    {
        /// <summary>Used for the production of messages/advices this field specifies the number of days after the date of issuance of the transports document(s) within which the documents must be presented for payment, acceptance or negotiation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentationPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DescriptionOfGoods2 
    {
        /// <summary>Indicate the details of the amendment to the description of the goods under a Letter of Credit contract. The text to begin with the valid codes: ADD or DELETE or REPALL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGood")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGood { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails4 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Used in the production of messages/advices, this field in conjunction with &lt;DOCUMENT.CODE&gt; is used to identify the number of each document being sent in the first mailing to the respective party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("document1stCopy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Document1stCopy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts2>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired2 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesDetails2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clausesTexts")]
        public System.Collections.Generic.ICollection<ClausesTexts2>? ClausesTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions2 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges2 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerDetails2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessages")]
        public System.Collections.Generic.ICollection<FromCustomerMessages2>? FromCustomerMessages { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBanks2 
    {
        /// <summary>This field identifies the Issuing Bank for an Export Letter of Credit and the Collecting Bank for an Outward Documentary Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments4 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions2 
    {
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Instruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasonDetails2 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibReasons")]
        public System.Collections.Generic.ICollection<IbReasons2>? IbReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides6 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIds2 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantCustomerNames3 
    {
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks3 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerNames3 
    {
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithDetails3 
    {
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWith")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWith { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered5 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeferredPayments3 
    {
        /// <summary>This free text field will specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DeferredPayment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetails3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("contactInformations")]
        public System.Collections.Generic.ICollection<ContactInformations3>? ContactInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods5 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentationPeriods3 
    {
        /// <summary>Used for the production of messages/advices this field specifies the number of days after the date of issuance of the transports document(s) within which the documents must be presented for payment, acceptance or negotiation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentationPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DescriptionOfGoods3 
    {
        /// <summary>Indicate the details of the amendment to the description of the goods under a Letter of Credit contract. The text to begin with the valid codes: ADD or DELETE or REPALL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGood")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGood { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails5 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Used in the production of messages/advices, this field in conjunction with &lt;DOCUMENT.CODE&gt; is used to identify the number of each document being sent in the first mailing to the respective party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("document1stCopy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Document1stCopy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts3>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired3 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesDetails3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clausesTexts")]
        public System.Collections.Generic.ICollection<ClausesTexts3>? ClausesTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions3 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges3 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerDetails3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessages")]
        public System.Collections.Generic.ICollection<FromCustomerMessages3>? FromCustomerMessages { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBanks3 
    {
        /// <summary>This field identifies the Issuing Bank for an Export Letter of Credit and the Collecting Bank for an Outward Documentary Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments5 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions3 
    {
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Instruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasonDetails3 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibReasons")]
        public System.Collections.Generic.ICollection<IbReasons3>? IbReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides7 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIds3 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantCustomerNames4 
    {
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks4 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerNames4 
    {
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithDetails4 
    {
        /// <summary>Used for the production of letter of credit messages/advices, this field identifies the bank authorised to pay, accept, or negotiate documents presented under the L/C if it is not a customer of the bank with a valid CUSTOMER.NO.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWith")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWith { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered6 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeferredPayments4 
    {
        /// <summary>This free text field will specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DeferredPayment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetails4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("contactInformations")]
        public System.Collections.Generic.ICollection<ContactInformations4>? ContactInformations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods6 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentationPeriods4 
    {
        /// <summary>Used for the production of messages/advices this field specifies the number of days after the date of issuance of the transports document(s) within which the documents must be presented for payment, acceptance or negotiation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentationPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentationPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DescriptionOfGoods4 
    {
        /// <summary>Indicate the details of the amendment to the description of the goods under a Letter of Credit contract. The text to begin with the valid codes: ADD or DELETE or REPALL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGood")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DescriptionOfGood { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails6 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Used in the production of messages/advices, this field in conjunction with &lt;DOCUMENT.CODE&gt; is used to identify the number of each document being sent in the first mailing to the respective party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("document1stCopy")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Document1stCopy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts4>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired4 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesDetails4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clausesTexts")]
        public System.Collections.Generic.ICollection<ClausesTexts4>? ClausesTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions4 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges4 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerDetails4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessages")]
        public System.Collections.Generic.ICollection<FromCustomerMessages4>? FromCustomerMessages { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBanks4 
    {
        /// <summary>This field identifies the Issuing Bank for an Export Letter of Credit and the Collecting Bank for an Outward Documentary Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments6 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions4 
    {
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Instruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasonDetails4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("ibReasons")]
        public System.Collections.Generic.ICollection<IbReasons4>? IbReasons { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Overrides8 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIds4 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? GuaranteeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks1 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses2 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses2 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks2 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks2 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks12 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames2 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges2 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses3 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses3 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses3 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks3 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks3 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks13 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames3 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges3 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses4 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences2 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses4 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses4 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks4 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks4 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks14 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames4 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges4 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses5 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses5 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses5 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks5 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks5 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks15 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames5 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges5 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses6 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses6 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses6 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks6 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks6 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks16 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames6 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges6 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses7 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses7 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses7 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks7 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks7 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks17 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames7 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges7 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>This is a system generated field to display the revolution number under a revolving letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionNo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionNo { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the provision / margin outstanding amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ProvisionOutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the related provision amount to be released subsequently on maturity date of a related drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAwaitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ProvisionAwaitAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the liability relating to each portion (MX or revolving type of LC) such as sight, acceptance or deferred payment is stored here.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityPortionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityPortionAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the local currency equivalent of the liability portion stored in liability portion amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localCurrencyPortiomAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? LocalCurrencyPortiomAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the amount overdrawn for a particular portion in a mixed payment transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionOverdrawn")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionOverdrawn { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses8 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses8 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses8 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks8 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks8 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks18 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames8 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges8 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings2 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>This is a system generated field to display the revolution number under a revolving letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionNo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionNo { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the provision / margin outstanding amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ProvisionOutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the related provision amount to be released subsequently on maturity date of a related drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAwaitAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ProvisionAwaitAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the liability relating to each portion (MX or revolving type of LC) such as sight, acceptance or deferred payment is stored here.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityPortionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityPortionAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the local currency equivalent of the liability portion stored in liability portion amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localCurrencyPortiomAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? LocalCurrencyPortiomAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the amount overdrawn for a particular portion in a mixed payment transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionOverdrawn")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionOverdrawn { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses9 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences3 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses9 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses9 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks9 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks9 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks19 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames9 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges9 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses10 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences4 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses10 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses10 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks10 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks10 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks110 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames10 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges10 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses11 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences5 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses11 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses11 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks11 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks11 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks111 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames11 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges11 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantAddresses12 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ApplicantAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences6 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses12 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses12 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks12 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks12 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimbursingBanks112 
    {
        /// <summary>Identifies the Name &amp; Address of the reimbursing bank under the LC. If the third party reimbursing bank is not one of the banks customers (i.e. not on the customer list), then this field allows the input of a name and address of the reimbursing bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimbursingBank1")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ReimbursingBank1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames12 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(28)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges12 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences7 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses13 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantNames 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks13 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks13 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges13 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
        /// <summary>Indicates the charge property.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charge")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Charge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings3 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AcptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("AdditionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>This is a system generated field to display the revolution number under a revolving letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionNo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionNo { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DrawingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the provision / margin outstanding amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 26D)]
        public double? ProvisionOutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the related provision amount to be released subsequently on maturity date of a related drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAwaitAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ProvisionAwaitAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the liability relating to each portion (MX or revolving type of LC) such as sight, acceptance or deferred payment is stored here.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityPortionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityPortionAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the local currency equivalent of the liability portion stored in liability portion amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localCurrencyPortiomAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 26D)]
        public double? LocalCurrencyPortiomAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the amount overdrawn for a particular portion in a mixed payment transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionOverdrawn")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionOverdrawn { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SenderReceiversInfoMT730 
    {
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiverInfoMT730")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SenderReceiverInfoMT730 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences8 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses14 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantNames2 
    {
        /// <summary>Indicates the name and address of the applicant of the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ApplicantName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks14 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks14 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges14 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
        /// <summary>Indicates the charge property.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charge")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Charge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings4 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AcptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("AdditionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>This is a system generated field to display the revolution number under a revolving letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionNo")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionNo { get; set; }= default!;
    
        /// <summary>System populated field that holds the amount of drawing processed under the related draw type multi value set.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? DrawingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the provision / margin outstanding amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 26D)]
        public double? ProvisionOutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the related provision amount to be released subsequently on maturity date of a related drawing.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("provisionAwaitAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ProvisionAwaitAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the liability relating to each portion (MX or revolving type of LC) such as sight, acceptance or deferred payment is stored here.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityPortionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LiabilityPortionAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the local currency equivalent of the liability portion stored in liability portion amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("localCurrencyPortiomAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 26D)]
        public double? LocalCurrencyPortiomAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>This is a system populated field to display the amount overdrawn for a particular portion in a mixed payment transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portionOverdrawn")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PortionOverdrawn { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountWithBanks2 
    {
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SenderReceiversInfoMT7302 
    {
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiverInfoMT730")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SenderReceiverInfoMT730 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks5 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences9 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings5 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges15 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Assignments 
    {
        /// <summary>Identifies a recognisable reference for each assignment portion. This reference cannot be duplicated within the letter of credit record and should be unique.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentReference { get; set; }= default!;
    
        /// <summary>Identify the customer number of the assignee if they are a customer of the bank. Should be a valid customer number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigneeId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigneeId { get; set; }= default!;
    
        /// <summary>Identify the total amount of the letter of credit which has been assigned to the assignee under the specific assignee reference/multi value set. This amount cannot exceed the liability amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentAmount { get; set; }= default!;
    
        /// <summary>Provides user the option of changing various details of the security position to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigntOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigntOutstandingAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("assigneeAddresses")]
        public System.Collections.Generic.ICollection<AssigneeAddresses>? AssigneeAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("assignmentNotes")]
        public System.Collections.Generic.ICollection<AssignmentNotes>? AssignmentNotes { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecondBeneficiaries 
    {
        /// <summary>Indicates the  second Beneficiary details on whose favour the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SecondBeneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks15 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DraftsAt 
    {
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftAt")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DraftAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawees 
    {
        /// <summary>Identify the drawee of Bills of Exchange to be presented under the LC, if the drawee is not a customer of the bank with a valid customer number. Drawees Name and Address may be manually input.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawee")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Drawee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MixedPaymentDetails 
    {
        /// <summary>This field specify the payment dates, amounts and/or method for the determination in an LC, which is available by mixed payment. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("mixedPaymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MixedPaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NegotiationDeferredPaymentDetails 
    {
        /// <summary>This field specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationDeferredPaymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NegotiationDeferredPaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods7 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired5 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions5 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges5 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames13 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstructionsToTheBanks 
    {
        /// <summary>This field can be used to stiputate any special or additional instructions to the Paying/Accepting/Negotiating Bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionsToTheBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstructionsToTheBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks15 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBanks6 
    {
        /// <summary>Identifies the advising bank under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences10 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawings6 
    {
        /// <summary>This field is correlated to the other field payment type and identifies the Draw type under Letter of credit. Whether its a sight LC payment, acceptance, deferred payment or Mixed payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawingType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DrawingType { get; set; }= default!;
    
        /// <summary>This field identifies the percentage amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPercent")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPercent { get; set; }= default!;
    
        /// <summary>Identifies the amount of LC that is available for a particular draw type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentPortion")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PaymentPortion { get; set; }= default!;
    
        /// <summary>This field indicate the number of days applicable to an Acceptance or Deferred Payment period under a letter of credit. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acptTimeBand")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AcptTimeBand { get; set; }= default!;
    
        /// <summary>This field allows input of an amount that will be added to the liability amount of the LC and the limit will be updated accordingly.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCoveredAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalCoveredAmount { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges16 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Assignments2 
    {
        /// <summary>Identifies a recognisable reference for each assignment portion. This reference cannot be duplicated within the letter of credit record and should be unique.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentReference { get; set; }= default!;
    
        /// <summary>Identify the customer number of the assignee if they are a customer of the bank. Should be a valid customer number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigneeId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigneeId { get; set; }= default!;
    
        /// <summary>Identify the total amount of the letter of credit which has been assigned to the assignee under the specific assignee reference/multi value set. This amount cannot exceed the liability amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentAmount { get; set; }= default!;
    
        /// <summary>Provides user the option of changing various details of the security position to be transferred</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigntOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigntOutstandingAmount { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("assigneeAddresses")]
        public System.Collections.Generic.ICollection<AssigneeAddresses2>? AssigneeAddresses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("assignmentNotes")]
        public System.Collections.Generic.ICollection<AssignmentNotes2>? AssignmentNotes { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FirstBeneficiaries 
    {
        /// <summary>Indicates the  First Beneficairy details on whose request the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstBeneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FirstBeneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecondBeneficiaries2 
    {
        /// <summary>Indicates the  second Beneficiary details on whose favour the transfer Letter of Credit is issued. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondBeneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SecondBeneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks16 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DraftsAt2 
    {
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftAt")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DraftAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Drawees2 
    {
        /// <summary>Identify the drawee of Bills of Exchange to be presented under the LC, if the drawee is not a customer of the bank with a valid customer number. Drawees Name and Address may be manually input.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("drawee")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Drawee { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MixedPaymentDetails2 
    {
        /// <summary>This field specify the payment dates, amounts and/or method for the determination in an LC, which is available by mixed payment. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("mixedPaymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MixedPaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NegotiationDeferredPaymentDetails2 
    {
        /// <summary>This field specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("negotiationDeferredPaymentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NegotiationDeferredPaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods8 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired6 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions6 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges6 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RequestedConfirmBankNames14 
    {
        /// <summary>Name and address of the requested confirming bank, i.e. the bank which may or which is requested by the issuing bank to add its confirmation to the documentary credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestedConfirmBankName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestedConfirmBankName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstructionsToTheBanks2 
    {
        /// <summary>This field can be used to stiputate any special or additional instructions to the Paying/Accepting/Negotiating Bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instructionsToTheBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstructionsToTheBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdviseThroughBanks16 
    {
        /// <summary>Identifies the bank ID, if different from the Receiver, through which the Letter of Credit is to be advised/confirmed to the beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("adviseThroughBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdviseThroughBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered7 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods9 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges7 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges17 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharge { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimNarratives 
    {
        /// <summary>This field holds the details of the amendments (Tag 77), while generating/receiving MT747 message type.(Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimNarrative")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? ReimNarrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered8 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries2 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods10 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges8 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges18 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharge { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReimNarratives2 
    {
        /// <summary>This field holds the details of the amendments (Tag 77), while generating/receiving MT747 message type.(Amendment to an authorisation to reimburse.)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reimNarrative")]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string? ReimNarrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankIds 
    {
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses15 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired7 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions7 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges19 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankIds2 
    {
        /// <summary>Identifies the advising bank ID under the Letter of Credit, through whom the Letter of Credit is to be advised to the second advising bank or beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdvisingBankId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryAddresses16 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BeneficiaryAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired8 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions8 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges20 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered9 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences11 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries3 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankToBanks 
    {
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BankToBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalAmendmentDetails 
    {
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalAmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges21 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions 
    {
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the amount on which the commission rate is applied to arrive at the commission amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoAmount { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered10 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences12 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries4 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankToBanks2 
    {
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BankToBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalAmendmentDetails2 
    {
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalAmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges22 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions2 
    {
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the amount on which the commission rate is applied to arrive at the commission amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoAmount { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences13 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries5 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges23 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions3 
    {
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the amount on which the commission rate is applied to arrive at the commission amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoAmount { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCBodyPurposeOfMessage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Purpose of Message")]
        Purpose_of_Message = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Free format field - any narration can be given")]
        Free_format_field__any_narration_can_be_given = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCBodyBankToBank
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Information to Receiver Bnk -Free format field")]
        Information_to_Receiver_Bnk_Free_format_field = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LimitReferences14 
    {
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LimitReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries6 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges24 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Commissions4 
    {
        /// <summary>These field control the allocation of Periodic commission where the field COMM.CODE is the trigger for periodic commission and the field CSN.CODE is a system maintained field and hold the commission amount relating to the period band</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>This is a system maintained field containing the amount on which the commission rate is applied to arrive at the commission amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uptoAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? UptoAmount { get; set; }= default!;
    
        /// <summary>The commission by percentage. Allowed only for manual commission. Calculated commission amount can be overwritten manually.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionRate { get; set; }= default!;
    
        /// <summary>Amount of commission charged for the payment created with respect to the commission type used.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CommissionAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCResponseBodyPurposeOfMessage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Purpose of Message")]
        Purpose_of_Message = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCResponseBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Free format field - any narration can be given")]
        Free_format_field__any_narration_can_be_given = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CancellationOfLCResponseBodyBankToBank
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Information to Receiver Bnk -Free format field")]
        Information_to_Receiver_Bnk_Free_format_field = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries7 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods11 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalAmendmentDetails3 
    {
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalAmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges25 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries8 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods12 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BankToBanks3 
    {
        /// <summary>Field to specify the additional information for the Receiver i.e. between banks handling the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankToBank")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BankToBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalAmendmentDetails4 
    {
        /// <summary>This is a free text field for updating the internal amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalAmendmentDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? InternalAmendmentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SenderReceiversInfoMT7303 
    {
        /// <summary>This field holds the additional information for the Receiver (Tag 72Z), while receiving/generating MT730 message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("senderReceiverInfoMT730")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SenderReceiverInfoMT730 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges26 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Applicants 
    {
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Applicant { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered11 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries9 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges27 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Applicants2 
    {
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Applicant { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered12 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries10 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges28 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Code to determine the identity of the party from whom the related charge is to be taken. Allowed values: -B(eneficiary) - O(pener) - T(hird Party).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partyCharged")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PartyCharged { get; set; }= default!;
    
        /// <summary>The account number of the account where charges will be debited to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeDebitAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeDebitAccount { get; set; }= default!;
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the exchange rate to be used between the charge debit account and the charge currency is different.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChargeExchangeRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeExchangeRate { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeAmount { get; set; }= default!;
    
        /// <summary>Define if charges are to be amortised over the life of the LC. Y or N  input</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amortiseCharges")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AmortiseCharges { get; set; }= default!;
    
        /// <summary>Indicates the codes to identify the different status of the charge. If the charge has been taken, claimed, or to be deferred or waived. The codes that are used to identify various states of the charge are: null, 2, 3, 4, 5, 15. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeStatus { get; set; }= default!;
    
        /// <summary>Contains the currency that tax is to be levied in. Example USD, GBP etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxCurrency { get; set; }= default!;
    
        /// <summary>Total amount of taxes applicable on all commission or charges calculated for the transaction/payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TaxAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous21 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; }= default!;
    
        /// <summary>Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingAmount")]
        public string? OutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field that indicates the total liability amount in respect of each issued or confirmed letters of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityAmount")]
        public string? LiabilityAmount { get; set; }= default!;
    
        /// <summary>Currency of the Credit provision account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? MarginCurrency { get; set; }= default!;
    
        /// <summary>This is a system maintained field Indicating the provision amount outstanding for the LC contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginOutstanding")]
        public string? MarginOutstanding { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous22 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? IssueDate { get; set; }= default!;
    
        /// <summary>Indicates the applicant name and address on whose behalf the Letter of Credit is being pre advised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Applicant { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; }= default!;
    
        /// <summary>Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? OutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field that indicates the total liability amount in respect of each issued or confirmed letters of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityAmount")]
        public string? LiabilityAmount { get; set; }= default!;
    
        /// <summary>Currency of the Credit provision account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? MarginCurrency { get; set; }= default!;
    
        /// <summary>This is a system maintained field Indicating the provision amount outstanding for the LC contract.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marginOutstanding")]
        public string? MarginOutstanding { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? LiabilityReversalDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous23 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaries")]
        public System.Collections.Generic.ICollection<Beneficiaries11>? Beneficiaries { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingReference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AdvisingReference { get; set; }= default!;
    
        /// <summary>Identifies the Advising banks LCs number (or reference of the L/C from legacy system) or it can be used for the bank to use a unique Letter of Credit number rather than the system generated ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? LcNumber { get; set; }= default!;
    
        /// <summary>Indicates the type of LC, whether this is an Import/Export, Confirmed/Unconfirmed/Revolving/Transferrable/Back to Back LC/documentary collection/Clean collection etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LcType { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>Identifies the Issuing bank ID under the LC, who issues the LC under when a bank is advising the Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBankId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingAmount")]
        public string? OutstandingAmount { get; set; }= default!;
    
        /// <summary>This is a system populated field that indicates the total liability amount in respect of each issued or confirmed letters of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityAmount")]
        public string? LiabilityAmount { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Date on which the contingent entries and the limits raised on the LC will be reversed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("liabilityReversalDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LiabilityReversalDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives3 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives4 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives5 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives6 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentStatuses 
    {
        /// <summary>Specifies the status of document submitted under LC. Associated multivalue field associated with fields DOC.ID to DOC.DISCREPANCY.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DocumentStatus { get; set; }= default!;
    
        /// <summary>Specifies the status of document submitted under LC. Associated multivalue field associated with fields DOC.ID to DOC.DISCREPANCY.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentDiscrepancy")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? DocumentDiscrepancy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts5>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForwardContracts 
    {
        /// <summary>Field to input the forex contract ID if forward contract is booked for the drawings.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardContract")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ForwardContract { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentorCustomerIds 
    {
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentorCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges29 
    {
        /// <summary>Indicates the charge code to which the charges are identified and calculated and to be debited to the customer account. For example: C(Credit less Charges The Credit less Charges), D(Debit plus Charge The Debit plus Charge) , W(Waive).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCode")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ChargeCode { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? ChargeAccountId { get; set; }= default!;
    
        /// <summary>Specifies the currency of the charge amount. Allowed only when a charge amount is specified </summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ChargeCurrencyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConsolidatedDiscrepancies3 
    {
        /// <summary>Specifies the current status of each discrepancies</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DiscrepancyStatus { get; set; }= default!;
    
        /// <summary>Consolidates the discrepancies that are specified in the fields DISCREPANCY,DEF.DISCREPANCY and the DOC.DISCREPANCY fields. The discrepancies listed in this field will only be relayed in the MT734/MT750 OUTWARD swift message.When an Inward MT734/750 is received in T24 the discrepancies listed in the message are mapped to this field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("consolidatedDiscrepancy")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? ConsolidatedDiscrepancy { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DiscrepancyDetails 
    {
        /// <summary>Specifies the current status of each discrepancies</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discrepancyDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? DiscrepancyDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks5 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers5 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InwardMessageIds 
    {
        /// <summary>This field holds the inward delivery reference for the corresponding message type.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inwardMessageId")]
        [System.ComponentModel.DataAnnotations.StringLength(45)]
        public string? InwardMessageId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentorCustomerNames 
    {
        /// <summary>This field is used to identify the presentor of the documents if they are not a customer of the bank with a valid CUSTOMER.NO.Optionally input, identifies the presentor customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerName")]
        public string? PresentorCustomerName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentorCustomerAddresses 
    {
        /// <summary>This field is used to identify the address of the presentor customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentorCustomerAddress")]
        public string? PresentorCustomerAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocuments7 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails7 
    {
        /// <summary>Contains a short meaningful description of the LC.ADVICE.TEXT for enrichment purposes.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcAdviceDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? LcAdviceDescription { get; set; }= default!;
    
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DocumentCode { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives7>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DisplayNames 
    {
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBanks5 
    {
        /// <summary>This field identifies the Issuing Bank for an Export Letter of Credit and the Collecting Bank for an Outward Documentary Collection.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IssuingBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IssuingBankAccountIds 
    {
        /// <summary>Input to this field sets up the default account to be used for reimbursement from the Issuing Bank (in the case of a Export Letter of Credit) and the Collecting Bank (in the case of an Outward Documentary Collection).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issuingBankAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? IssuingBankAccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdvisingBankAddresses13 
    {
        /// <summary>Identifies the name and address of the advising bank under the LC, through whom Letter of Credit to be advised to second advising bank or beneficiary.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisingBankAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdvisingBankAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ForwardContracts2 
    {
        /// <summary>Field to input the forex contract ID if forward contract is booked for the drawings.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardContract")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ForwardContract { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ApplicantCustomerIds 
    {
        /// <summary>This field identifies the applicant on whose behalf the Letter of Credit is issued, if the applicant is held on the CUSTOMER file.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicantCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicantCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficiaryCustomerIds 
    {
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryCustomerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasonDetails5 
    {
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibReason")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? IbReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PresentPeriods 
    {
        /// <summary>Used for the production of messages/advices this field specifies the number of days after the date of issuance of the transports document(s) within which the documents must be presented for payment, acceptance or negotiation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("presentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PresentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DescriptionOfGoods5 
    {
        /// <summary>Indicate the details of the amendment to the description of the goods under a Letter of Credit contract. The text to begin with the valid codes: ADD or DELETE or REPALL</summary>
        [System.Text.Json.Serialization.JsonPropertyName("descriptionOfGood")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DescriptionOfGood { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentsRequired9 
    {
        /// <summary>Free textfield used to describe the documents to be presented under the letter of credit, in addition to the predefined documents associated with documentCode.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentRequired")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalConditions9 
    {
        /// <summary>Amendment details to the additional conditions under a LC contract. Must begin with the valid codes: ADD or DELETE or REPALL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalCondition")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? AdditionalCondition { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DraftsAt3 
    {
        /// <summary>Indicates the tenor of the draft to be presented under the Letter of Credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("draftAt")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DraftAt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentDetails8 
    {
        /// <summary>Required documents under a Letter of Credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentCode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DocumentCode { get; set; }= default!;
    
        /// <summary>Used in the production of messages/advices, this field in conjunction with &lt;DOCUMENT.CODE&gt; is used to identify the number of each document being sent in the first mailing to the respective party.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("document1stCopy")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? Document1stCopy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("documentTexts")]
        public System.Collections.Generic.ICollection<DocumentTexts6>? DocumentTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GuaranteeIds5 
    {
        /// <summary>Identifier of the guarantee</summary>
        [System.Text.Json.Serialization.JsonPropertyName("guaranteeId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? GuaranteeId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageGroup 
    {
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomers")]
        public System.Collections.Generic.ICollection<MessageFromCustomers7>? MessageFromCustomers { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Instructions5 
    {
        /// <summary>Contains the instruction control for the current service. Allowed values: - START: to start the current service. - STOP: to stop the current service - AUTO: to start the current service automatically and stop at the end of the process.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instruction")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Instruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SupportDocumentDetails 
    {
        /// <summary>Holds the attached/uploaded documents.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("supportDocument")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SupportDocument { get; set; }= default!;
    
        /// <summary>The accepted forms of identification taken by the bank when enrolling a Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentName")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AmendmentIds 
    {
        /// <summary>Identifier of letter of credit amendment id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amendmentId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AmendmentId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PreviousAmendIds 
    {
        /// <summary>Specifies the previous guarantee amendment details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("previousAmendId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PreviousAmendId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AvailableWithBanks17 
    {
        /// <summary>Indicates the bank name and address that is authorised to pay, accept, or negotiate document presented under the letter of credit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableWithbank")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AvailableWithbank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered13 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DeferredPayments5 
    {
        /// <summary>This free text field will specify the payment date or method for its determination for which deferred payment or a Negotiation drawings will be made under the LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deferredPayment")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DeferredPayment { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods13 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTextDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("clausesTexts")]
        public System.Collections.Generic.ICollection<ClausesTexts5>? ClausesTexts { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativeCharges9 
    {
        /// <summary>Field to specify the details of the charges to be borne by the beneficiary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrativeCharge")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NarrativeCharge { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GraphDetails 
    {
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class LcPayTypeDetails 
    {
        /// <summary>Indicates the identifier of payment type details for letter of credit.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lcPayTypeDetail")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? LcPayTypeDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GraphDetails2 
    {
        /// <summary>Indicates the type of collection</summary>
        [System.Text.Json.Serialization.JsonPropertyName("collectionType")]
        public string? CollectionType { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbLimitExceeds3 
    {
        /// <summary>Field to record the Applicant's response to discrepancies in the documents under LC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibLimitExceed")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? IbLimitExceed { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AdditionalAmountsCovered14 
    {
        /// <summary>Specifies any additional amounts available under the Letter of Credit, such as insurance, freight, interest, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("additionalAmountCovered")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AdditionalAmountCovered { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ShipmentPeriods14 
    {
        /// <summary>Indicates the period of time which the goods are to be loaded on board/dispatched/taken in charge.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shipmentPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ShipmentPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NarrativesGroup 
    {
        [System.Text.Json.Serialization.JsonPropertyName("narratives")]
        public System.Collections.Generic.ICollection<Narratives8>? Narratives { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers6 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromBanks6 
    {
        /// <summary>Field to input queries/clarifications by bank to be sought from Corporate customer on the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromBank")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromBank { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactInformations 
    {
        /// <summary>Free text field to hold telephone numbers or email address for applicant bankers to contact when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ContactInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTexts 
    {
        /// <summary>Contains the full clause text which is used in the construction of L/C Advices/Documents generated as a result of L/C transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClausesText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerMessages 
    {
        /// <summary>his field indicates that message from the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FromCustomerMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasons 
    {
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactInformations2 
    {
        /// <summary>Free text field to hold telephone numbers or email address for applicant bankers to contact when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ContactInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts2 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTexts2 
    {
        /// <summary>Contains the full clause text which is used in the construction of L/C Advices/Documents generated as a result of L/C transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClausesText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerMessages2 
    {
        /// <summary>his field indicates that message from the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FromCustomerMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasons2 
    {
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactInformations3 
    {
        /// <summary>Free text field to hold telephone numbers or email address for applicant bankers to contact when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ContactInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts3 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTexts3 
    {
        /// <summary>Contains the full clause text which is used in the construction of L/C Advices/Documents generated as a result of L/C transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClausesText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerMessages3 
    {
        /// <summary>his field indicates that message from the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FromCustomerMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasons3 
    {
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactInformations4 
    {
        /// <summary>Free text field to hold telephone numbers or email address for applicant bankers to contact when LC initiated through Internet Banking.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ContactInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts4 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTexts4 
    {
        /// <summary>Contains the full clause text which is used in the construction of L/C Advices/Documents generated as a result of L/C transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesText")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ClausesText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FromCustomerMessages4 
    {
        /// <summary>his field indicates that message from the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromCustomerMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FromCustomerMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class IbReasons4 
    {
        /// <summary>This field holds the reason for change in IB.STATUS field.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ibReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IbReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AssigneeAddresses 
    {
        /// <summary>Identifies the assignee's name and address if they are not a customer of the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigneeAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigneeAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AssignmentNotes 
    {
        /// <summary>This field provides the user with a free text field to make any internal notes regarding the assignment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentNote")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentNote { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AssigneeAddresses2 
    {
        /// <summary>Identifies the assignee's name and address if they are not a customer of the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assigneeAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssigneeAddress { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AssignmentNotes2 
    {
        /// <summary>This field provides the user with a free text field to make any internal notes regarding the assignment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assignmentNote")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AssignmentNote { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Beneficiaries11 
    {
        /// <summary>Identifies the Beneficiary name and address of the Standing Order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiary")]
        public string? Beneficiary { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts5 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives7 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentTexts6 
    {
        /// <summary>Specifies the description of document code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("documentText")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? DocumentText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class MessageFromCustomers7 
    {
        /// <summary>Field to input any additional information/clarifications to be provided to the bank, by Corporate customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("messageFromCustomer")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? MessageFromCustomer { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ClausesTexts5 
    {
        /// <summary>Contains the full clause text which is used in the construction of L/C Advices/Documents generated as a result of L/C transactions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clausesText")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ClausesText { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Narratives8 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016