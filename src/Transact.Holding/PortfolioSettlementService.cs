//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.PortfolioSettlement
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortfolioSettlementService
    {
        /// <summary>Retrieves the overdue settlements</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="transactionId">Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="brokerId">The identifier of the broker</param>
        /// <param name="tradeDate">Standard date field which records trade date of the account</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="currency">Indicates the type of currency to which the account belongs</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="deliveryInstruction">Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</param>
        /// <param name="transactionType">Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="stockExchange">The stock exchange identifier</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>OverdueSettlementsByPortfolioResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OverdueSettlementsByPortfolioResponse> GetOverdueSettlementsByPortfolioAsync(string portfolioId, string? transactionId, string? customerId, string? brokerId, string? tradeDate, string? valueDate, string? depository, string? currency, string? instrumentId, string? deliveryInstruction, string? transactionType, string? quantity, string? stockExchange, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the overdue settlements</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="transactionId">Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="brokerId">The identifier of the broker</param>
        /// <param name="tradeDate">Standard date field which records trade date of the account</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="currency">Indicates the type of currency to which the account belongs</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="deliveryInstruction">Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</param>
        /// <param name="transactionType">Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="stockExchange">The stock exchange identifier</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>OverdueSettlementsByPortfolioResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OverdueSettlementsByPortfolioResponse> GetOverdueSettlementsByPortfolioAsync(string portfolioId, string? transactionId, string? customerId, string? brokerId, string? tradeDate, string? valueDate, string? depository, string? currency, string? instrumentId, string? deliveryInstruction, string? transactionType, string? quantity, string? stockExchange, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Allows to view the outstanding and overdue settlement details</summary>
        /// <param name="transactionId">Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="brokerId">The identifier of the broker</param>
        /// <param name="tradeDate">Standard date field which records trade date of the account</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="currency">Indicates the type of currency to which the account belongs</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="deliveryInstruction">Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</param>
        /// <param name="transactionType">Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="stockExchange">The stock exchange identifier</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecuritySettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecuritySettlementsResponse> GetSecuritySettlementsAsync(string? transactionId, string? customerId, string? portfolioId, string? brokerId, string? tradeDate, string? valueDate, string? depository, string? currency, string? instrumentId, string? deliveryInstruction, string? transactionType, string? quantity, string? stockExchange, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the outstanding and overdue settlement details</summary>
        /// <param name="transactionId">Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="brokerId">The identifier of the broker</param>
        /// <param name="tradeDate">Standard date field which records trade date of the account</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="currency">Indicates the type of currency to which the account belongs</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="deliveryInstruction">Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</param>
        /// <param name="transactionType">Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</param>
        /// <param name="quantity">The nominal quantity</param>
        /// <param name="stockExchange">The stock exchange identifier</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>SecuritySettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecuritySettlementsResponse> GetSecuritySettlementsAsync(string? transactionId, string? customerId, string? portfolioId, string? brokerId, string? tradeDate, string? valueDate, string? depository, string? currency, string? instrumentId, string? deliveryInstruction, string? transactionType, string? quantity, string? stockExchange, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Allows to view the settlement  details of the transaction pending to be settled</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>FullSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FullSettlementsResponse> GetFullSettlementsAsync(string securitySettlementsId, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the settlement  details of the transaction pending to be settled</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>FullSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FullSettlementsResponse> GetFullSettlementsAsync(string securitySettlementsId, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Allows to perform complete settlement on the transaction</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>FullSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FullSettlementsResponse> UpdateFullSettlementsAsync(string securitySettlementsId, FullSettlements payload, bool? validate_only, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to perform complete settlement on the transaction</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>FullSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FullSettlementsResponse> UpdateFullSettlementsAsync(string securitySettlementsId, FullSettlements payload, bool? validate_only, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Allows to view the settlement  details of the transaction pending to be settled</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PartialSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartialSettlementsResponse> GetPartialSettlementsAsync(string securitySettlementsId, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the settlement  details of the transaction pending to be settled</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PartialSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartialSettlementsResponse> GetPartialSettlementsAsync(string securitySettlementsId, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Allows to perform partial settlement on the transaction</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PartialSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartialSettlementsResponse> UpdatePartialSettlementsAsync(string securitySettlementsId, PartialSettlements payload, bool? validate_only, string? credentials, string? companyId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to perform partial settlement on the transaction</summary>
        /// <param name="securitySettlementsId">Identifier of the Security Settlement</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>PartialSettlementsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartialSettlementsResponse> UpdatePartialSettlementsAsync(string securitySettlementsId, PartialSettlements payload, bool? validate_only, string? credentials, string? companyId, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>OverdueSettlementsByPortfolioResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverdueSettlementsByPortfolioResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public OverdueSettlementsByPortfolioResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverdueSettlementsByPortfolioResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecuritySettlementsResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>SecuritySettlementsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecuritySettlementsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public SecuritySettlementsResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecuritySettlementsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecuritySettlementsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>FullSettlements</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FullSettlements 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FullSettlementsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FullSettlementsBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerDetails")]
        public System.Collections.Generic.ICollection<CustomerDetails>? CustomerDetails { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionCode { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerAmount { get; set; }= default!;
    
        /// <summary>Total amount of cash to be debited from or credited to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerAmount { get; set; }= default!;
    
        /// <summary>Flag to indicate whether a bill is settled or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Settled { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityCancelled { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Customer amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountSettled { get; set; }= default!;
    
        /// <summary>Customer amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountCancelled { get; set; }= default!;
    
        /// <summary>Broker amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountSettled { get; set; }= default!;
    
        /// <summary>The broker amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountCancelled { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit5? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>FullSettlementsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FullSettlementsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FullSettlementsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FullSettlementsResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails2>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerDetails")]
        public System.Collections.Generic.ICollection<CustomerDetails2>? CustomerDetails { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TransactionCode { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>Net amount due to/from the broker for the transaction. Applicable only where the security transfer is made against payment.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerAmount { get; set; }= default!;
    
        /// <summary>Total amount of cash to be debited from or credited to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerAmount { get; set; }= default!;
    
        /// <summary>Flag to indicate whether a bill is settled or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Settled { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityCancelled { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Customer amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountSettled { get; set; }= default!;
    
        /// <summary>Customer amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountCancelled { get; set; }= default!;
    
        /// <summary>Broker amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountSettled { get; set; }= default!;
    
        /// <summary>The broker amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountCancelled { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>PartialSettlements</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartialSettlements 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PartialSettlementsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartialSettlementsBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails3>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerDetails")]
        public System.Collections.Generic.ICollection<CustomerDetails3>? CustomerDetails { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityCancelled { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>Customer amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountSettled { get; set; }= default!;
    
        /// <summary>Customer amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountCancelled { get; set; }= default!;
    
        /// <summary>Broker amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountSettled { get; set; }= default!;
    
        /// <summary>The broker amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountCancelled { get; set; }= default!;
    
        /// <summary>Delivery instruction reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryKey { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
    
    }
    
    /// <summary>PartialSettlementsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartialSettlementsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PartialSettlementsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PartialSettlementsResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("brokerDetails")]
        public System.Collections.Generic.ICollection<BrokerDetails4>? BrokerDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("customerDetails")]
        public System.Collections.Generic.ICollection<CustomerDetails4>? CustomerDetails { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityCancelled { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Holds the total amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? NetAmount { get; set; }= default!;
    
        /// <summary>Customer amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountSettled { get; set; }= default!;
    
        /// <summary>Customer amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerAmountCancelled { get; set; }= default!;
    
        /// <summary>Broker amount that has been settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountSettled { get; set; }= default!;
    
        /// <summary>The broker amount that has been cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerAmountCancelled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerAmountCancelled { get; set; }= default!;
    
        /// <summary>Delivery instruction reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DeliveryKey { get; set; }= default!;
    
        /// <summary>Specifies whether MT565 has to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("generateInstruction")]
        public bool? GenerateInstruction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Specifies the counterparty with whom the trade is to be effected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("broker")]
        public System.Collections.Generic.ICollection<Broker>? Broker { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(97)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Quantity { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerOutstandingQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data 
    {
        [System.Text.Json.Serialization.JsonPropertyName("currentWorkingDay")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CurrentWorkingDay { get; set; }= default!;
    
        /// <summary>Indicates the period of settlement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementPeriod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SettlementPeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Specifies the counterparty with whom the trade is to be effected.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("broker")]
        public System.Collections.Generic.ICollection<Broker2>? Broker { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(97)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; }= default!;
    
        /// <summary>Flag to indicate whether a bill is settled or not</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settled")]
        public string? Settled { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        public string? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? CustomerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Type of Delivery to be made for this transaction. Allowed values: - DAP: Delivery Against Payment - FOP: Free of Payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? DeliveryInstruction { get; set; }= default!;
    
        /// <summary>Defines the status of settlement instruction for the incoming MT548 swift message. Sample values are 1. MTCH/MACH 2. IPRC/PACK</summary>
        [System.Text.Json.Serialization.JsonPropertyName("matchCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? MatchCode { get; set; }= default!;
    
        /// <summary>Defines the status of the settlement for the incoming MT548 swift message.The values allowed are: Waiting : pending to receive settlement status update meaning pending to receive MT548 swift message,  Action required : awaiting action to be performed to get the final update on settlement status.Matched : transactions whose nominals have matched with the depository position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementStatus")]
        public string? SettlementStatus { get; set; }= default!;
    
        /// <summary>Status of the overdue amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("overdueStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? OverdueStatus { get; set; }= default!;
    
        /// <summary>Indicates if the transaction is fully settled or not.  Allowed Values are 1. YES - fully settled 2. NO - partially settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementFlag")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? SettlementFlag { get; set; }= default!;
    
        /// <summary>The name of the application. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("applicationName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ApplicationName { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? RecordStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountToSettle { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountValueDate { get; set; }= default!;
    
        /// <summary>Indicates if the settlement is automatic at the Customer / Broker side</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoSettle { get; set; }= default!;
    
        /// <summary>Contains the incoming MT544-547 Swift message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryConfirmationKey { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerDetails 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountToSettle { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountValueDate { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Indicates if the settlement is automatic at the Customer / Broker side</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoSettle { get; set; }= default!;
    
        /// <summary>Borrow amount that is settled till date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountSettled { get; set; }= default!;
    
        /// <summary>Borrow amount that is outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountOutstanding { get; set; }= default!;
    
        /// <summary>Borrow amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountToSettle { get; set; }= default!;
    
        /// <summary>The Customer borrow amount that is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountCancelled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountCancelled { get; set; }= default!;
    
        /// <summary>Value date on which the borrow amount is settled/cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowValueDate { get; set; }= default!;
    
        /// <summary>Customer lent amount that is settled till date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountSettled { get; set; }= default!;
    
        /// <summary>Customer lent amount that is outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountOutstanding { get; set; }= default!;
    
        /// <summary>Customer lent amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountToSettle { get; set; }= default!;
    
        /// <summary>The customer lent amount that is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountCancelled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountCancelled { get; set; }= default!;
    
        /// <summary>Value date on which the customer lent amount is settled/cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentValueDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit5 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails2 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountToSettle { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountValueDate { get; set; }= default!;
    
        /// <summary>Indicates if the settlement is automatic at the Customer / Broker side</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoSettle { get; set; }= default!;
    
        /// <summary>Contains the incoming MT544-547 Swift message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryConfirmationKey { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerDetails2 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountToSettle { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountValueDate { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Indicates if the settlement is automatic at the Customer / Broker side</summary>
        [System.Text.Json.Serialization.JsonPropertyName("autoSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AutoSettle { get; set; }= default!;
    
        /// <summary>Borrow amount that is settled till date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountSettled { get; set; }= default!;
    
        /// <summary>Borrow amount that is outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountOutstanding { get; set; }= default!;
    
        /// <summary>Borrow amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountToSettle { get; set; }= default!;
    
        /// <summary>The Customer borrow amount that is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowAmountCancelled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowAmountCancelled { get; set; }= default!;
    
        /// <summary>Value date on which the borrow amount is settled/cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("borrowValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BorrowValueDate { get; set; }= default!;
    
        /// <summary>Customer lent amount that is settled till date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountSettled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountSettled { get; set; }= default!;
    
        /// <summary>Customer lent amount that is outstanding</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountOutstanding")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountOutstanding { get; set; }= default!;
    
        /// <summary>Customer lent amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountToSettle")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountToSettle { get; set; }= default!;
    
        /// <summary>The customer lent amount that is cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentAmountCancelled")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentAmountCancelled { get; set; }= default!;
    
        /// <summary>Value date on which the customer lent amount is settled/cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lentValueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? LentValueDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails3 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToSettle { get; set; }= default!;
    
        /// <summary>Amount that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToCancel { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmountValueDate { get; set; }= default!;
    
        /// <summary>Contains the incoming MT544-547 Swift message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryConfirmationKey { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerDetails3 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Delivery reference of the incoming message that settled/unsettled the nominal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityDeliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityDeliveryKey { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToSettle { get; set; }= default!;
    
        /// <summary>Amount that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToCancel { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmountValueDate { get; set; }= default!;
    
        /// <summary>The delivery reference of the incoming message that settled/unsettled the nominal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountDeliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountDeliveryKey { get; set; }= default!;
    
        /// <summary>Amount in the currency of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 23D)]
        public double? AmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BrokerDetails4 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToSettle { get; set; }= default!;
    
        /// <summary>Amount that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToCancel { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmountValueDate { get; set; }= default!;
    
        /// <summary>Contains the incoming MT544-547 Swift message reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryConfirmationKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DepositoryConfirmationKey { get; set; }= default!;
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("narrative")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Narrative { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerDetails4 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>Represents the Nominee Company record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nominee")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? Nominee { get; set; }= default!;
    
        /// <summary>Total quantity that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantitySettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantitySettled { get; set; }= default!;
    
        /// <summary>The quantity outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerOutstandingQuantity { get; set; }= default!;
    
        /// <summary>Quantity that has to be settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToSettle { get; set; }= default!;
    
        /// <summary>Quantity that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? QuantityToCancel { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Delivery reference of the incoming message that settled/unsettled the nominal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityDeliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? QuantityDeliveryKey { get; set; }= default!;
    
        /// <summary>Total amount that is settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountSettled")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountSettled { get; set; }= default!;
    
        /// <summary>The amount outstanding from/to the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? CustomerOutstandingAmount { get; set; }= default!;
    
        /// <summary>Indicates the amount that is being settled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToSettle")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToSettle { get; set; }= default!;
    
        /// <summary>Amount that has to be cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountToCancel")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? AmountToCancel { get; set; }= default!;
    
        /// <summary>Value date on which the amount was settled/ unsettled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AmountValueDate { get; set; }= default!;
    
        /// <summary>The delivery reference of the incoming message that settled/unsettled the nominal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountDeliveryKey")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AmountDeliveryKey { get; set; }= default!;
    
        /// <summary>Amount in the currency of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("amountInAccountCurrency")]
        [System.ComponentModel.DataAnnotations.Range(0D, 23D)]
        public double? AmountInAccountCurrency { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        [System.ComponentModel.DataAnnotations.Range(0D, 30D)]
        public double? ExchangeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Broker 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BrokerName { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostro")]
        public string? Nostro { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? BrokerOutstandingQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Broker2 
    {
        /// <summary>The identifier of the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BrokerId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerName")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BrokerName { get; set; }= default!;
    
        /// <summary>Nostro account id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostro")]
        public string? Nostro { get; set; }= default!;
    
        /// <summary>Currency of the nostro account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nostroCurrency")]
        public string? NostroCurrency { get; set; }= default!;
    
        /// <summary>The amount outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingAmount")]
        public string? BrokerOutstandingAmount { get; set; }= default!;
    
        /// <summary>The quantity of the instrument outstanding for the broker</summary>
        [System.Text.Json.Serialization.JsonPropertyName("brokerOutstandingQuantity")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? BrokerOutstandingQuantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016