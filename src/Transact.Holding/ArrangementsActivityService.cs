//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.ArrangementsActivities
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IArrangementsActivityService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the activity log of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="simulation">What if scenario reference</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ArrangementActivityLogResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ArrangementActivityLogResponse> GetArrangementActivityLogAsync(string arrangementId, string? simulation = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the Financial Activity Log of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="simulationReference">Indicates the Reference ID for simulation activity</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FinancialActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<FinancialActivitiesResponse> GetFinancialActivitiesAsync(string arrangementId, string? simulationReference = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists the User related activity logs of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="simulationReference">Indicates the Reference ID for simulation activity</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UserActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<UserActivitiesResponse> GetUserActivitiesAsync(string arrangementId, string? simulationReference = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the System activities of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="simulationReference">Indicates the Reference ID for simulation activity</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>SystemActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<SystemActivitiesResponse> GetSystemActivitiesAsync(string arrangementId, string? simulationReference = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the log of an activity in hold of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>HoldActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<HoldActivitiesResponse> GetHoldActivitiesAsync(string arrangementId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the archived activity log of an account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="simulationReference">Indicates the Reference ID for simulation activity</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ArchievedActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ArchievedActivitiesResponse> GetArchievedActivitiesAsync(string arrangementId, string? simulationReference = null, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the transaction list for a given Account Number</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountSummaryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<AccountSummaryResponse> GetAccountSummaryAsync(string accountId, string? startDate = null, string? endDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of activities applicable for an arrangement account</summary>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="activityId">Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ArrangementActivitiesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ArrangementActivitiesResponse> GetArrangementActivitiesAsync(string arrangementId, string? activityId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of unauthorised activities of an account</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="activity">Defines the activity to be processed against the Arrangement. The activity may be a user activity or a system generated activity.</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="product">Specifies the list of products licensed for the institution. This will be used to set the products field in the SPF (System Parameter) table and the master company. The products in the company can only be subset of the products in the SPF table.</param>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="contractId">Indicates the unique identifier of the transaction or contract which initiated the activity</param>
        /// <param name="transactionAmount">Contains the transaction amount. This is based on the currency, either local or foreign currency</param>
        /// <param name="transactionAmountLocalCurrency">Indicates the transaction amount in local currency</param>
        /// <param name="applicationId">Contains the application id of the service that has crashed due to error.</param>
        /// <param name="inputter">The user identifier who input the transaction</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>UnauthorisedAAAResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<UnauthorisedAAAResponse> GetUnauthorisedAAAAsync(string? customerId = null, string? activity = null, string? arrangementId = null, string? product = null, string? currency = null, string? contractId = null, string? transactionAmount = null, string? transactionAmountLocalCurrency = null, string? applicationId = null, string? inputter = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>ArrangementActivityLogResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArrangementActivityLogResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ArrangementActivityLogResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArrangementActivityLogResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>FinancialActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FinancialActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FinancialActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FinancialActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>UserActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UserActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UserActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UserActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>SystemActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SystemActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>HoldActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class HoldActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public HoldActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class HoldActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>ArchievedActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArchievedActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ArchievedActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArchievedActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSummaryResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountSummaryResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSummaryResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public AccountSummaryResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountSummaryResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSummaryResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>ArrangementActivitiesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArrangementActivitiesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ArrangementActivitiesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ArrangementActivitiesResponseBody : System.Collections.ObjectModel.Collection<Anonymous8>
    {
    
    }
    
    /// <summary>UnauthorisedAAAResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UnauthorisedAAAResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UnauthorisedAAAResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UnauthorisedAAAResponseBody : System.Collections.ObjectModel.Collection<Anonymous9>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }= default!;
    
        /// <summary>Defines the activity to be processed against the Arrangement. The activity may be a user activity or a system generated activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public string? Activity { get; set; }= default!;
    
        /// <summary>The product condition has an activity type associated that drives an action.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityDate")]
        public string? ActivityDate { get; set; }= default!;
    
        /// <summary>Defines the activity to be processed against the Arrangement. The activity may be a user activity or a system generated activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public string? Activity { get; set; }= default!;
    
        /// <summary>Indicates the type of an activity which was triggered by user or during a transaction.Eg:User,Txn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        public string? ActivityType { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Business Activity Status  POSSIBLE VALUES: 0: Ready  1: Running  2: Completed successfully  3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        public string? ActivityStatus { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityDate")]
        public string? ActivityDate { get; set; }= default!;
    
        /// <summary>Indicates the activity which was triggered by User</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UserActivity")]
        public string? UserActivity { get; set; }= default!;
    
        /// <summary>Indicates the type of an activity which was triggered by user or during a transaction.Eg:User,Txn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        public string? ActivityType { get; set; }= default!;
    
        /// <summary>Business Activity Status  POSSIBLE VALUES: 0: Ready  1: Running  2: Completed successfully  3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        public string? ActivityStatus { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        [System.Text.Json.Serialization.JsonPropertyName("activityDates")]
        public System.Collections.Generic.ICollection<ActivityDates>? ActivityDates { get; set; }= default!;
    
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActivityDate { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ActivityDate { get; set; }= default!;
    
        /// <summary>Id of the selected activity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityName")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? ActivityName { get; set; }= default!;
    
        /// <summary>Indicates the type of an activity which was triggered by user or during a transaction.Eg:User,Txn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? ActivityType { get; set; }= default!;
    
        /// <summary>Business Activity Status  POSSIBLE VALUES: 0: Ready  1: Running  2: Completed successfully  3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? ActivityStatus { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityDate")]
        public string? ActivityDate { get; set; }= default!;
    
        /// <summary>Id of the selected activity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityName")]
        public string? ActivityName { get; set; }= default!;
    
        /// <summary>Indicates the type of an activity which was triggered by user or during a transaction.Eg:User,Txn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        public string? ActivityType { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Business Activity Status  POSSIBLE VALUES: 0: Ready  1: Running  2: Completed successfully  3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        public string? ActivityStatus { get; set; }= default!;
    
        /// <summary>Activity reference of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityReference")]
        public string? ActivityReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Short title on an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountTitle")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccountTitle { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Closing balance of the arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingBalance")]
        public string? ClosingBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        /// <summary>Business date on which the accounting entry was generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? BookingDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the description based on the transaction type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? TransactionDescription { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>Debit value of the transaction </summary>
        [System.Text.Json.Serialization.JsonPropertyName("debit")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Debit { get; set; }= default!;
    
        /// <summary>Credit value of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("credit")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Credit { get; set; }= default!;
    
        /// <summary>Closing balance of the arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ClosingBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous8 
    {
        /// <summary>Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityId")]
        public string? ActivityId { get; set; }= default!;
    
        /// <summary>The name of the condition that is used to build a product</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyClassName")]
        public string? PropertyClassName { get; set; }= default!;
    
        /// <summary>Id of the selected activity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityName")]
        public string? ActivityName { get; set; }= default!;
    
        /// <summary>Indicates the version of the simulation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("simVersion")]
        public string? SimVersion { get; set; }= default!;
    
        /// <summary>Indicates the activities that were performed on the current day</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityToday")]
        public string? ActivityToday { get; set; }= default!;
    
        /// <summary>Defines the activity to be processed against the Arrangement. The activity may be a user activity or a system generated activity.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public string? Activity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous9 
    {
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Indicates the description of the Product</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productDescription")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ProductDescription { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>The arrangement activity being performed on the arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementActivity")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ArrangementActivity { get; set; }= default!;
    
        /// <summary>Id of the selected activity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityName")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? ActivityName { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The user identifier who input the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("inputter")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? Inputter { get; set; }= default!;
    
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Date { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? Status { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ActivityDates 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemActivity")]
        public string? SystemActivity { get; set; }= default!;
    
        /// <summary>Indicates the type of an activity which was triggered by user or during a transaction.Eg:User,Txn.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        public string? ActivityType { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        public string? TransactionAmount { get; set; }= default!;
    
        /// <summary>Business Activity Status  POSSIBLE VALUES: 0: Ready  1: Running  2: Completed successfully  3: On hold or in error</summary>
        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        public string? ActivityStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016