//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.Accounts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAccountService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the account closure information</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountClosureResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountClosureResponse> GetAccountClosureAsync(string accountId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates account closure information</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountClosureResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountClosureResponse> UpdateAccountClosureAsync(string accountId, AccountClosure payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves account transaction details</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as account id. Accepts both IBAN &amp; BBAN</param>
        /// <param name="bookingDate">Business date on which the accounting entry was generated.</param>
        /// <param name="processingDate">The date when payment instruction is processed in system.</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="description">Contains the description of purpose of the payment.</param>
        /// <param name="reversalMarker">Denotes the flag which is set whenever any credit or reversal debit entries with future exposure dates are processed</param>
        /// <param name="includeSubAcct">Denotes the flag which needs to be set in order to allow the automatic creation of sub-accounts and the automatic distribution of transactions over sub-accounts</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountTransactionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountTransactionsResponse> GetAccountTransactionsAsync(string accountId, string? bookingDate = null, string? processingDate = null, string? valueDate = null, string? description = null, string? reversalMarker = null, string? includeSubAcct = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves available card details</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="cardIssueId">The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222</param>
        /// <param name="issueDate">The date the item was issued.</param>
        /// <param name="expiryDate">The date an agreement such as an arrangement, product, credit facility or limit is due to expire</param>
        /// <param name="cardStatus">Current status of the Card and following are the possible statuses are  - CARD.ISSUED - CARD.RETURNED - CARD.SCRAP - CARD.CANCEL - NOT.ACTIVATED - NOT.RECEIVED - ACTIVE - BLOCKED - EXPIRED</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountCardsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountCardsResponse> GetAccountCardsAsync(string accountId, string? cardIssueId = null, string? issueDate = null, string? expiryDate = null, string? cardStatus = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of account balances</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="limitReferenceId">Limit reference identifier for the limit order.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountBalanceTodayResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountBalanceTodayResponse> GetAccountBalanceTodayAsync(string? accountId = null, string? customerId = null, string? productId = null, string? currencyId = null, string? limitReferenceId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves balances movements of account</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="bookingDate">Business date on which the accounting entry was generated.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountBalanceMovementResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountBalanceMovementResponse> GetAccountBalanceMovementAsync(string accountId, string bookingDate, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve emergency block information for an account</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountEmergencyBlockResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountEmergencyBlockResponse1> GetAccountEmergencyBlockAsync(string accountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update emergency block in account</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountEmergencyBlockResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountEmergencyBlockResponse> UpdateAccountEmergencyBlockAsync(string accountId, AccountEmergencyBlock payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve account funds authorisation status</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountFundsAuthStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountFundsAuthStatusResponse1> GetAccountFundsAuthStatusAsync(string accountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update account funds authorisation status</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountFundsAuthStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountFundsAuthStatusResponse> UpdateAccountFundsAuthStatusAsync(string accountId, AccountFundsAuthStatus payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates conditions for funds diversion</summary>
        /// <param name="settingId">Contains the particular parameter record setting identifier.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FundsDiversionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundsDiversionResponse> CreateFundsDiversionAsync(string settingId, FundsDiversion payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates funds diversion parameter</summary>
        /// <param name="settingId">Contains the particular parameter record setting identifier.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>FundsDiversionResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundsDiversionResponse> UpdateFundsDiversionAsync(string settingId, FundsDiversion payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves consolidated nostro account balances</summary>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="longPositionSign">Polarity (sign) used to denote buy position balance.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>NostroForwardBalancesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NostroForwardBalancesResponse> GetNostroForwardBalancesAsync(string valueDate, string? accountId = null, string? longPositionSign = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves nostro account balances for a specific currency</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="nostroId">Nostro account id</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>NostroBalancesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NostroBalancesResponse> GetNostroBalancesAsync(string currencyId, string? nostroId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves consolidated nostro account balances for a specific currency</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>NostroCurrencyPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NostroCurrencyPositionsResponse> GetNostroCurrencyPositionsAsync(string currencyId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves consolidated nostro account positions for the currency</summary>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="longPositionSign">Polarity (sign) used to denote buy position balance.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>NostroPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NostroPositionsResponse> GetNostroPositionsAsync(string currencyId, string? longPositionSign = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the list of reserved funds</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="eventId">Event identifier</param>
        /// <param name="lockReason">Indicates the simple description for the balance reservation event.</param>
        /// <param name="fromDate">Indicates the business date from when the balance reservation event is active.</param>
        /// <param name="toDate">Indicates the business date until when the balance reservation event is active.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ReservedFundsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReservedFundsResponse> GetReservedFundsAsync(string? accountId = null, string? eventId = null, string? lockReason = null, string? fromDate = null, string? toDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves arrangement account details</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDetailsResponse> GetAccountDetailsAsync(string accountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve proxy registration status</summary>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="alternateAccountId">Alternate identification for an account</param>
        /// <param name="proxyType">Type of proxy created for account</param>
        /// <param name="proxyIdentifier">A proxy identifier to be linked to an account based on the proxy type provided eg. Mobile number, email id and tax id</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ActiveProxyIdentifierResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActiveProxyIdentifierResponse> GetActiveProxyIdentifierAsync(string? customerId = null, string? alternateAccountId = null, string? proxyType = null, string? proxyIdentifier = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Register the proxy identifier for the account</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ProxyIdentifierResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProxyIdentifierResponse> CreateProxyIdentifierAsync(ProxyIdentifier payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update proxy directory for account to de-register the proxy identifier</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ProxyIdentifierResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProxyIdentifierResponse1> UpdateProxyIdentifierAsync(string proxyIdentifierId, ProxyIdentifier1 payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves account details required for payment processing</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="accountCompany">Company of the account to be created</param>
        /// <param name="paymentCurrency">This field holds the transaction currency or currency in which payment is initiated.</param>
        /// <param name="accountSwitch">Indicates if availability of account switch details should be checked.</param>
        /// <param name="beneficialCustomer">Indicates if beneficial owners of the account are to be retrieved</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountPaymentDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountPaymentDetailsResponse> GetAccountPaymentDetailsAsync(string accountId, string accountCompany, string paymentCurrency, string accountSwitch, string beneficialCustomer, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves list of account details</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="currencyId">Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</param>
        /// <param name="limitReference">Identifies the credit limit reference for the underlying account.</param>
        /// <param name="arrangementId">Indicates an unique identifier of an account</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string? accountId = null, string? customerId = null, string? productId = null, string? currencyId = null, string? limitReference = null, string? arrangementId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves contract balances of accounts</summary>
        /// <param name="contractBalanceId">Unique Identifier of Contract Balances</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ContractBalancesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContractBalancesResponse> GetContractBalancesAsync(string contractBalanceId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update synchronization error status</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>SynchronizationErrorResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SynchronizationErrorResponse> UpdateSynchronizationErrorAsync(string accountId, SynchronizationError payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the details of the expiring switches for generating alerts</summary>
        /// <param name="accountId">The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as account id.Accepts both IBAN &amp; BBAN</param>
        /// <param name="alertStatus">Contains status of the Alert. Possible values are Pending, Sent</param>
        /// <param name="alertDate">Indicates the date in which an alert to be raised.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ExpiringAccountSwitchesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpiringAccountSwitchesResponse> GetExpiringAccountSwitchesAsync(string accountId, string? alertStatus = null, System.DateTimeOffset? alertDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves details of the account switch requests</summary>
        /// <param name="accountId">The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</param>
        /// <param name="requestDate">Date on which the client's request to be classified as professional has been received.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountSwitchDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSwitchDetailsResponse> GetAccountSwitchDetailsAsync(string accountId, System.DateTimeOffset? requestDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates alert status from pending to sent for corresponding switch instructions.</summary>
        /// <param name="accountId">The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <returns>AccountSwitchDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSwitchDetailsResponse1> UpdateAccountSwitchDetailsAsync(string accountId, AccountSwitchDetails payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves rerouted payment information.</summary>
        /// <param name="accountId">The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="companyId">The identifier of the underlying Entity/Company/Branch.</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AccountSwitchPaymentDetailsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSwitchPaymentDetailsResponse> GetAccountSwitchPaymentDetailsAsync(string accountId, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approves account closure information</summary>
        /// <param name="accountId">Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>AccountClosureResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountClosureResponse> ApproveAccountClosureAsync(string accountId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountClosureResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountClosureResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountClosureResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountClosureResponseBody 
    {
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>The date when the Security Account is to be closed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureDate")]
        public System.DateTimeOffset? ClosureDate { get; set; }= default!;
    
        /// <summary>Identifier of the creditAccounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string? CreditAccount { get; set; }= default!;
    
        /// <summary>Indicate how a closed account must capitalize interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("capitaliseInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CapitaliseInterest { get; set; }= default!;
    
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Mode of the account closure needs to be specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CloseMode { get; set; }= default!;
    
        /// <summary>Payment reference number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ftId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FtId { get; set; }= default!;
    
        /// <summary>This field contains the reason for closing the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureReason")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClosureReason { get; set; }= default!;
    
        /// <summary>This field is used to hold the notes for the reason of account closure</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureNotes")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClosureNotes { get; set; }= default!;
    
        /// <summary>Contains the current Online Actual Balance on the ACCOUNT at the time the Posting Restriction to flag it for closure was entered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineLedgerBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? OnlineLedgerBalance { get; set; }= default!;
    
        /// <summary>Indicates the available balance allowed to use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineClearedBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? OnlineClearedBalance { get; set; }= default!;
    
        /// <summary>Defines the total balance amount to the account inclusive of all charges and interest applicable at present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balancePayable")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? BalancePayable { get; set; }= default!;
    
        /// <summary>The total amount of outstanding credit and credit 2 interest calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCreditInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalCreditInterest { get; set; }= default!;
    
        /// <summary>The total amount of outstanding debit and debit 2 interest calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalDebitInterest { get; set; }= default!;
    
        /// <summary>The total amount of outstanding debit and debit 2 interest calculated up to the specified Capitalisation Date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDrInterestPending")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalDrInterestPending { get; set; }= default!;
    
        /// <summary>The total amount of outstanding account 'ledger' charges and interest related charges calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCharges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalCharges { get; set; }= default!;
    
        /// <summary>This field reflects the total charges pending on the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalChargesPending")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalChargesPending { get; set; }= default!;
    
        /// <summary>The total amount of Tax on outstanding interest and charges calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalTax { get; set; }= default!;
    
        /// <summary>This field reflects the total tax pending on the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalTaxPending")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalTaxPending { get; set; }= default!;
    
        /// <summary>Identifies any restrictions for posting entries that are to be imposed on the Account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postingRestriction")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PostingRestriction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountClosure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountClosure 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountClosureBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountClosureBody 
    {
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>The date when the Security Account is to be closed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureDate")]
        public System.DateTimeOffset? ClosureDate { get; set; }= default!;
    
        /// <summary>Identifier of the creditAccounts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string CreditAccount { get; set; }= default!;
    
        /// <summary>Indicate how a closed account must capitalize interest</summary>
        [System.Text.Json.Serialization.JsonPropertyName("capitaliseInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CapitaliseInterest { get; set; }= default!;
    
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ChargeType { get; set; }= default!;
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeAmount")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? ChargeAmount { get; set; }= default!;
    
        /// <summary>Mode of the account closure needs to be specified</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closeMode")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CloseMode { get; set; }= default!;
    
        /// <summary>Payment reference number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ftId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? FtId { get; set; }= default!;
    
        /// <summary>This field contains the reason for closing the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureReason")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClosureReason { get; set; }= default!;
    
        /// <summary>This field is used to hold the notes for the reason of account closure</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closureNotes")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClosureNotes { get; set; }= default!;
    
        /// <summary>Contains the current Online Actual Balance on the ACCOUNT at the time the Posting Restriction to flag it for closure was entered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineLedgerBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? OnlineLedgerBalance { get; set; }= default!;
    
        /// <summary>Indicates the available balance allowed to use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineClearedBalance")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? OnlineClearedBalance { get; set; }= default!;
    
        /// <summary>Defines the total balance amount to the account inclusive of all charges and interest applicable at present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balancePayable")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? BalancePayable { get; set; }= default!;
    
        /// <summary>The total amount of outstanding credit and credit 2 interest calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCreditInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalCreditInterest { get; set; }= default!;
    
        /// <summary>The total amount of outstanding debit and debit 2 interest calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebitInterest")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalDebitInterest { get; set; }= default!;
    
        /// <summary>The total amount of outstanding debit and debit 2 interest calculated up to the specified Capitalisation Date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDrInterestPending")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TotalDrInterestPending { get; set; }= default!;
    
        /// <summary>The total amount of outstanding account 'ledger' charges and interest related charges calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCharges")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalCharges { get; set; }= default!;
    
        /// <summary>This field reflects the total charges pending on the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalChargesPending")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalChargesPending { get; set; }= default!;
    
        /// <summary>The total amount of Tax on outstanding interest and charges calculated up to the specified Capitalisation Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalTax")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalTax { get; set; }= default!;
    
        /// <summary>This field reflects the total tax pending on the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalTaxPending")]
        [System.ComponentModel.DataAnnotations.Range(0D, 25D)]
        public double? TotalTaxPending { get; set; }= default!;
    
        /// <summary>Identifies any restrictions for posting entries that are to be imposed on the Account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postingRestriction")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? PostingRestriction { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransactionsResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountTransactionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransactionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public AccountTransactionsResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountTransactionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTransactionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit5? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountCardsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountCardsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountCardsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountCardsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>AccountBalanceTodayResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountBalanceTodayResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountBalanceTodayResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountBalanceTodayResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>AccountBalanceMovementResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountBalanceMovementResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountBalanceMovementResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountBalanceMovementResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>AccountEmergencyBlock</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlock 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountEmergencyBlockBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlockBody 
    {
        /// <summary>Indicates if there is an emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyBlock")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? EmergencyBlock { get; set; }= default!;
    
        /// <summary>Indicates the reason for emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EmergencyReason { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountEmergencyBlockResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlockResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountEmergencyBlockResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlockResponseBody 
    {
        /// <summary>Indicates if there is an emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyBlock")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? EmergencyBlock { get; set; }= default!;
    
        /// <summary>Indicates the reason for emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EmergencyReason { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountFundsAuthStatus</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatus 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountFundsAuthStatusBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatusBody 
    {
        /// <summary>Funds authorisation status of the system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("faStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? FaStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountFundsAuthStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatusResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountFundsAuthStatusResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatusResponseBody 
    {
        /// <summary>Funds authorisation status of the system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("faStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? FaStatus { get; set; }= default!;
    
    
    }
    
    /// <summary>FundsDiversion</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsDiversion 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FundsDiversionBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsDiversionBody 
    {
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCodes")]
        public System.Collections.Generic.ICollection<TransactionCodes>? TransactionCodes { get; set; }= default!;
    
        /// <summary>Specifies the behaviour of diversion of funds to be followed by the Accounting System. Allowed values are YES - to divert the funds to  the diversion account of the original account , NO - diversion of funds do not take place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultFundsDiversion")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DefaultFundsDiversion { get; set; }= default!;
    
    
    }
    
    /// <summary>FundsDiversionResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsDiversionResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FundsDiversionResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FundsDiversionResponseBody 
    {
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCodes")]
        public System.Collections.Generic.ICollection<TransactionCodes2>? TransactionCodes { get; set; }= default!;
    
        /// <summary>Specifies the behaviour of diversion of funds to be followed by the Accounting System. Allowed values are YES - to divert the funds to  the diversion account of the original account , NO - diversion of funds do not take place.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultFundsDiversion")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DefaultFundsDiversion { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroForwardBalancesResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit6? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data2? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>NostroForwardBalancesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroForwardBalancesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public NostroForwardBalancesResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NostroForwardBalancesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroForwardBalancesResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>NostroBalancesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroBalancesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NostroBalancesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroBalancesResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    /// <summary>NostroCurrencyPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroCurrencyPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NostroCurrencyPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroCurrencyPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous7>
    {
    
    }
    
    /// <summary>NostroPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public NostroPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class NostroPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous8>
    {
    
    }
    
    /// <summary>ReservedFundsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReservedFundsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ReservedFundsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ReservedFundsResponseBody : System.Collections.ObjectModel.Collection<Anonymous9>
    {
    
    }
    
    /// <summary>AccountDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous10>
    {
    
    }
    
    /// <summary>ActiveProxyIdentifierResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ActiveProxyIdentifierResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ActiveProxyIdentifierResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ActiveProxyIdentifierResponseBody : System.Collections.ObjectModel.Collection<Anonymous11>
    {
    
    }
    
    /// <summary>ProxyIdentifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifier 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProxyIdentifierBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifierBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Alternate identification for an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string AlternateAccountId { get; set; }= default!;
    
        /// <summary>Type of proxy created for account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyType")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyType { get; set; }= default!;
    
        /// <summary>A proxy identifier to be linked to an account based on the proxy type provided eg. Mobile number, email id and tax id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyIdentifier")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyIdentifier { get; set; }= default!;
    
        /// <summary>Current status of the proxy directory</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyStatus { get; set; }= default!;
    
        /// <summary>Payment scheme under which the proxy identifier is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyScheme")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyScheme { get; set; }= default!;
    
        /// <summary>Indicates if a proxy identifier is registered for Requestor or Payer or Both or None</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyRole { get; set; }= default!;
    
    
    }
    
    /// <summary>ProxyIdentifierResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifierResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProxyIdentifierResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifierResponseBody 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Alternate identification for an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? AlternateAccountId { get; set; }= default!;
    
        /// <summary>Type of proxy created for account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyType")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyType { get; set; }= default!;
    
        /// <summary>A proxy identifier to be linked to an account based on the proxy type provided eg. Mobile number, email id and tax id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyIdentifier")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyIdentifier { get; set; }= default!;
    
        /// <summary>Current status of the proxy directory</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyStatus { get; set; }= default!;
    
        /// <summary>Payment scheme under which the proxy identifier is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyScheme")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyScheme { get; set; }= default!;
    
        /// <summary>Indicates if a proxy identifier is registered for Requestor or Payer or Both or None</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyRole { get; set; }= default!;
    
    
    }
    
    /// <summary>ProxyIdentifier1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifier1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProxyIdentifier1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifier1Body 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Alternate identification for an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string AlternateAccountId { get; set; }= default!;
    
        /// <summary>Type of proxy created for account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyType")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyType { get; set; }= default!;
    
        /// <summary>A proxy identifier to be linked to an account based on the proxy type provided eg. Mobile number, email id and tax id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyIdentifier")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyIdentifier { get; set; }= default!;
    
        /// <summary>Current status of the proxy directory</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyStatus { get; set; }= default!;
    
        /// <summary>Payment scheme under which the proxy identifier is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyScheme")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string ProxyScheme { get; set; }= default!;
    
        /// <summary>Indicates if a proxy identifier is registered for Requestor or Payer or Both or None</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyRole { get; set; }= default!;
    
    
    }
    
    /// <summary>ProxyIdentifierResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifierResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ProxyIdentifierResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ProxyIdentifierResponse1Body 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Alternate identification for an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? AlternateAccountId { get; set; }= default!;
    
        /// <summary>Type of proxy created for account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyType")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyType { get; set; }= default!;
    
        /// <summary>A proxy identifier to be linked to an account based on the proxy type provided eg. Mobile number, email id and tax id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyIdentifier")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyIdentifier { get; set; }= default!;
    
        /// <summary>Current status of the proxy directory</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyStatus { get; set; }= default!;
    
        /// <summary>Payment scheme under which the proxy identifier is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyScheme")]
        [System.ComponentModel.DataAnnotations.StringLength(22, MinimumLength = 1)]
        public string? ProxyScheme { get; set; }= default!;
    
        /// <summary>Indicates if a proxy identifier is registered for Requestor or Payer or Both or None</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string? ProxyRole { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountPaymentDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountPaymentDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountPaymentDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountPaymentDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous12>
    {
    
    }
    
    /// <summary>AccountsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountsResponseBody : System.Collections.ObjectModel.Collection<Anonymous13>
    {
    
    }
    
    /// <summary>ContractBalancesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractBalancesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ContractBalancesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContractBalancesResponseBody : System.Collections.ObjectModel.Collection<Anonymous14>
    {
    
    }
    
    /// <summary>AccountFundsAuthStatusResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatusResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountFundsAuthStatusResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountFundsAuthStatusResponse1Body : System.Collections.ObjectModel.Collection<Anonymous15>
    {
    
    }
    
    /// <summary>AccountEmergencyBlockResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlockResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountEmergencyBlockResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountEmergencyBlockResponse1Body : System.Collections.ObjectModel.Collection<Anonymous16>
    {
    
    }
    
    /// <summary>SynchronizationError</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SynchronizationError 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SynchronizationErrorBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SynchronizationErrorBody 
    {
        /// <summary>Emergency block error in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyBlockError")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? EmergencyBlockError { get; set; }= default!;
    
    
    }
    
    /// <summary>SynchronizationErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SynchronizationErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SynchronizationErrorResponseBody? Body { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SynchronizationErrorResponseBody 
    {
        /// <summary>Emergency block error in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyBlockError")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? EmergencyBlockError { get; set; }= default!;
    
    
    }
    
    /// <summary>ExpiringAccountSwitchesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExpiringAccountSwitchesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public ExpiringAccountSwitchesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExpiringAccountSwitchesResponseBody : System.Collections.ObjectModel.Collection<Anonymous17>
    {
    
    }
    
    /// <summary>AccountSwitchDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountSwitchDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous18>
    {
    
    }
    
    /// <summary>AccountSwitchPaymentDetailsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchPaymentDetailsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountSwitchPaymentDetailsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchPaymentDetailsResponseBody : System.Collections.ObjectModel.Collection<Anonymous19>
    {
    
    }
    
    /// <summary>AccountSwitchDetails</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountSwitchDetailsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetailsBody 
    {
        /// <summary>The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number of the switching account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchIBAN { get; set; }= default!;
    
        /// <summary>Identifier of account IBAN. Contains the account IBAN to which the existing account is being switched to based on switch instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchAccountId { get; set; }= default!;
    
        /// <summary>Indicates the Bank Identification Code(BIC) of the institution where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchBic")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchBic { get; set; }= default!;
    
        /// <summary>Indicates the clearing or sort code of the bank where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchClearingCode { get; set; }= default!;
    
        /// <summary>Date on which the client's request to be classified as professional has been received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestDate { get; set; }= default!;
    
        /// <summary>The status identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Status { get; set; }= default!;
    
        /// <summary>Allows the user to cancel an account switch Instruction and this will move the Status of the instruction to Cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelInstruction { get; set; }= default!;
    
        /// <summary>Cancel date for switch Instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates if IBAN can be inputted while initiating a payment order. Allowed options are either 'Mandatory', 'Allowed' or 'Not Allowed'.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("IBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IBAN { get; set; }= default!;
    
        /// <summary>Bank Identifier Code (BIC) of the Beneficiary bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bicId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BicId { get; set; }= default!;
    
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Indicates the date in which an alert to be raised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlertDate { get; set; }= default!;
    
        /// <summary>Contains status of the Alert. Possible values are Pending, Sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlertStatus { get; set; }= default!;
    
        /// <summary>Indicates whether account is switched in or out.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchIndicator { get; set; }= default!;
    
    
    }
    
    /// <summary>AccountSwitchDetailsResponse1</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetailsResponse1 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public AccountSwitchDetailsResponse1Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountSwitchDetailsResponse1Body 
    {
        /// <summary>The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number of the switching account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchIBAN { get; set; }= default!;
    
        /// <summary>Identifier of account IBAN. Contains the account IBAN to which the existing account is being switched to based on switch instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchAccountId { get; set; }= default!;
    
        /// <summary>Indicates the Bank Identification Code(BIC) of the institution where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchBic")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchBic { get; set; }= default!;
    
        /// <summary>Indicates the clearing or sort code of the bank where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchClearingCode { get; set; }= default!;
    
        /// <summary>Date on which the client's request to be classified as professional has been received.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? RequestDate { get; set; }= default!;
    
        /// <summary>The status identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Status { get; set; }= default!;
    
        /// <summary>Allows the user to cancel an account switch Instruction and this will move the Status of the instruction to Cancelled</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelInstruction")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelInstruction { get; set; }= default!;
    
        /// <summary>Cancel date for switch Instruction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancelDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CancelDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ExpiryDate { get; set; }= default!;
    
        /// <summary>Indicates if IBAN can be inputted while initiating a payment order. Allowed options are either 'Mandatory', 'Allowed' or 'Not Allowed'.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("IBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? IBAN { get; set; }= default!;
    
        /// <summary>Bank Identifier Code (BIC) of the Beneficiary bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bicId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BicId { get; set; }= default!;
    
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EffectiveDate { get; set; }= default!;
    
        /// <summary>Indicates the date in which an alert to be raised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertDate")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlertDate { get; set; }= default!;
    
        /// <summary>Contains status of the Alert. Possible values are Pending, Sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlertStatus { get; set; }= default!;
    
        /// <summary>Indicates whether account is switched in or out.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchIndicator { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Balance brought forward from the previous date/period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? OpeningBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Business date on which the accounting entry was generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BookingDate { get; set; }= default!;
    
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The transaction description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionName")]
        public string? TransactionName { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionAmount")]
        public double? TransactionAmount { get; set; }= default!;
    
        /// <summary>Indicator flag which is set whenever a debit or a credit transaction happens in the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitCreditIndicator")]
        public string? DebitCreditIndicator { get; set; }= default!;
    
        /// <summary>The total amount of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionTotal")]
        public string? TransactionTotal { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit5 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountIds")]
        public System.Collections.Generic.ICollection<AccountIds>? AccountIds { get; set; }= default!;
    
        /// <summary>Name of the Cardholder/Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardNames")]
        public System.Collections.Generic.ICollection<CardNames>? CardNames { get; set; }= default!;
    
        /// <summary>The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardIssueId")]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? CardIssueId { get; set; }= default!;
    
        /// <summary>The number which is up for display on the credit or debit card.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardDisplayNumber")]
        public string? CardDisplayNumber { get; set; }= default!;
    
        /// <summary>The type of the card, e.g. Visa, Mastercard, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardType")]
        public string? CardType { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>The date the item was issued.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>The date of cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CancellationDate { get; set; }= default!;
    
        /// <summary>The reason for the cancellation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cancellationReason")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? CancellationReason { get; set; }= default!;
    
        /// <summary>Current status of the Card and following are the possible statuses are  - CARD.ISSUED - CARD.RETURNED - CARD.SCRAP - CARD.CANCEL - NOT.ACTIVATED - NOT.RECEIVED - ACTIVE - BLOCKED - EXPIRED</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CardStatus { get; set; }= default!;
    
        /// <summary>The complete card number including the combination of bank codes, account number and other card convention</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullCardNumber")]
        public string? FullCardNumber { get; set; }= default!;
    
        /// <summary>Current number of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Display name or short name of the account specified.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AccountName { get; set; }= default!;
    
        /// <summary>Limit reference identifier for the limit order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReferenceId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? LimitReferenceId { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workingBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? WorkingBalance { get; set; }= default!;
    
        /// <summary>Contains the ledger balance of the account which is the total of all entries posted against the account excluding any entries with the processing date in the future.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ledgerBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? LedgerBalance { get; set; }= default!;
    
        /// <summary>Balance taking into consideration all cleared funds booked against the account, including credit and reversed debit entries with a future exposure date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearedBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ClearedBalance { get; set; }= default!;
    
        /// <summary>Shows reserved amount for the underlying account for a given balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? LockedAmount { get; set; }= default!;
    
        /// <summary>Refers the usable amount in the balance</summary>
        [System.Text.Json.Serialization.JsonPropertyName("useableBalance")]
        public string? UseableBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Business date on which the accounting entry was generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BookingDate { get; set; }= default!;
    
        /// <summary>Indicates an account’s credit movement’s for a specific booking date which will not include any of the credit movements that are masked</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditMovement")]
        public double? CreditMovement { get; set; }= default!;
    
        /// <summary>Indicates an account’s debit movement’s for a specific booking date which will not include any of the debit movements that are masked.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitMovement")]
        public double? DebitMovement { get; set; }= default!;
    
        /// <summary>Indicates an account’s credit movement’s for a specific booking date which includes credit movements that are masked</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossCreditMovement")]
        public double? GrossCreditMovement { get; set; }= default!;
    
        /// <summary>Indicates an account’s debit movement’s for a specific booking date which includes credit movements that are masked</summary>
        [System.Text.Json.Serialization.JsonPropertyName("grossDebitMovement")]
        public double? GrossDebitMovement { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TransactionCodes 
    {
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCode")]
        [System.ComponentModel.DataAnnotations.Range(0D, 15D)]
        public double? TransactionCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TransactionCodes2 
    {
        /// <summary>Identifies the system internal transaction code applicable to the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCode")]
        [System.ComponentModel.DataAnnotations.Range(0D, 15D)]
        public double? TransactionCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit6 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data2 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 16D)]
        public double? AccountId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Balance brought forward from the previous date/period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]
        public double? OpeningBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Business date on which the accounting entry was generated.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? BookingDate { get; set; }= default!;
    
        /// <summary>The monetary value of each balance type for an account is itemised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public double? Balance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Monetary value of each balance</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balances")]
        public System.Collections.Generic.ICollection<Balances>? Balances { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous7 
    {
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Balance corresponding to first day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance1")]
        public double? Balance1 { get; set; }= default!;
    
        /// <summary>Balance corresponding to second day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance2")]
        public double? Balance2 { get; set; }= default!;
    
        /// <summary>Balance corresponding to third day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance3")]
        public double? Balance3 { get; set; }= default!;
    
        /// <summary>Balance corresponding to fourth day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance4")]
        public double? Balance4 { get; set; }= default!;
    
        /// <summary>Balance corresponding to fifth day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance5")]
        public double? Balance5 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous8 
    {
        /// <summary>The name of the bank being referred to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BankName { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Balance corresponding to first day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance1")]
        public double? Balance1 { get; set; }= default!;
    
        /// <summary>Balance corresponding to second day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance2")]
        public double? Balance2 { get; set; }= default!;
    
        /// <summary>Balance corresponding to third day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance3")]
        public double? Balance3 { get; set; }= default!;
    
        /// <summary>Balance corresponding to fourth day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance4")]
        public double? Balance4 { get; set; }= default!;
    
        /// <summary>Balance corresponding to fifth day.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance5")]
        public double? Balance5 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous9 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Indicates the simple description for the balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LockReason { get; set; }= default!;
    
        /// <summary>Indicates the business date from when the balance reservation event is active.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FromDate { get; set; }= default!;
    
        /// <summary>Indicates the business date until when the balance reservation event is active.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ToDate { get; set; }= default!;
    
        /// <summary>Shows reserved amount for the underlying account for a given balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LockedAmount { get; set; }= default!;
    
        /// <summary>Event identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        [System.ComponentModel.DataAnnotations.StringLength(69)]
        public string? EventId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous10 
    {
        /// <summary>Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccounts")]
        public System.Collections.Generic.ICollection<SharedLimitAccounts>? SharedLimitAccounts { get; set; }= default!;
    
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRates")]
        public System.Collections.Generic.ICollection<TaxRates>? TaxRates { get; set; }= default!;
    
        /// <summary>Contains the sum of the cash interest expense (including that attributable to Capitalized Leases), net of cash interest income, of the Borrower and the Restricted Subsidiaries, determined on a consolidated basis.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interests")]
        public System.Collections.Generic.ICollection<Interests>? Interests { get; set; }= default!;
    
        /// <summary>Contains the account details which shares the interest among the eligible or joint customers.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccounts")]
        public System.Collections.Generic.ICollection<SharedInterestAccounts>? SharedInterestAccounts { get; set; }= default!;
    
        /// <summary>Specifies the charges which has incurred with processing of the cheque</summary>
        [System.Text.Json.Serialization.JsonPropertyName("charges")]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; }= default!;
    
        /// <summary>Joint or related customer id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("jointCustomers")]
        public System.Collections.Generic.ICollection<JointCustomers>? JointCustomers { get; set; }= default!;
    
        /// <summary>Contains the opening actual balance of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openActualBalance")]
        public double? OpenActualBalance { get; set; }= default!;
    
        /// <summary>Contains the overdraft limit still available to be utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableOverdraftLimit")]
        public double? AvailableOverdraftLimit { get; set; }= default!;
    
        /// <summary>The date the account is opened.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OpeningDate { get; set; }= default!;
    
        /// <summary>Contains the approved overdraft limit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("approvedOverdraftLimit")]
        public double? ApprovedOverdraftLimit { get; set; }= default!;
    
        /// <summary>This field specifies the validity of the Limit, i.e. how long is it to remain in force</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LimitExpiryDate { get; set; }= default!;
    
        /// <summary>Total funds available in the account after all the ongoing transactions have been completed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableFunds")]
        public double? AvailableFunds { get; set; }= default!;
    
        /// <summary>Indicates the outstanding overdraft limit of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("outstandingOverdraftLimit")]
        public double? OutstandingOverdraftLimit { get; set; }= default!;
    
        /// <summary>Indicates the available balance allowed to use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineClearedBalance")]
        public double? OnlineClearedBalance { get; set; }= default!;
    
        /// <summary>Indicates the opening balance after clearing</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openClearedBalance")]
        public double? OpenClearedBalance { get; set; }= default!;
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountWithBankBIC")]
        public string? AccountWithBankBIC { get; set; }= default!;
    
        /// <summary>Contains the total of the deposit amounts which may be available for use in near future</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPendingDepositAmount")]
        public double? TotalPendingDepositAmount { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Contains the total number of credits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalCredits")]
        public string? TotalCredits { get; set; }= default!;
    
        /// <summary>Contains the total number of debits</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalDebits")]
        public string? TotalDebits { get; set; }= default!;
    
        /// <summary>Indicates the total amount which will be lent or deposited for the term</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commitmentAmount")]
        public double? CommitmentAmount { get; set; }= default!;
    
        /// <summary>Contains the total withdrawal amount on hold until payment execution date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("totalPendingWithdrawalAmount")]
        public double? TotalPendingWithdrawalAmount { get; set; }= default!;
    
        /// <summary>Shows reserved amount for the underlying account for a given balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]
        public double? LockedAmount { get; set; }= default!;
    
        /// <summary>International Bank Account number, an identifier of the account. E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [System.Text.Json.Serialization.JsonPropertyName("IBAN")]
        public string? IBAN { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous11 
    {
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Alternate identification for an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alternateAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AlternateAccountId { get; set; }= default!;
    
        /// <summary>Payment scheme under which the proxy identifier is registered</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyScheme")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? ProxyScheme { get; set; }= default!;
    
        /// <summary>Indicates if a proxy identifier is registered for Requestor or Payer or Both or None</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyRole")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProxyRole { get; set; }= default!;
    
        /// <summary>Current status of the proxy directory</summary>
        [System.Text.Json.Serialization.JsonPropertyName("proxyStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProxyStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous12 
    {
        /// <summary>Short title on an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountTitles")]
        public System.Collections.Generic.ICollection<AccountTitles>? AccountTitles { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("beneficialOwners")]
        public System.Collections.Generic.ICollection<BeneficialOwners>? BeneficialOwners { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("switchDetails")]
        public System.Collections.Generic.ICollection<SwitchDetails>? SwitchDetails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("accountStatusDetails")]
        public System.Collections.Generic.ICollection<AccountStatusDetails>? AccountStatusDetails { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Company of the account to be created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCompany")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AccountCompany { get; set; }= default!;
    
        /// <summary>Currency of the account. For example: USD, GBP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? AccountCurrency { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Represents the International Bank Account Number (IBAN) of the account.  E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? AccountIBAN { get; set; }= default!;
    
        /// <summary>Identifier of Department Account Officer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountOfficer")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? AccountOfficer { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Indicates the type of account, eg: C-Customer, I-Internal, CON-Contingent, N-Nostro, V-Vostro</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountClassification")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AccountClassification { get; set; }= default!;
    
        /// <summary>Identifies the underlying reporting Company/Branch of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reportingCompany")]
        public string? ReportingCompany { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous13 
    {
        /// <summary>Contains the contact details</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerDetails")]
        public System.Collections.Generic.ICollection<CustomerDetails>? CustomerDetails { get; set; }= default!;
    
        /// <summary>Product name of the bank for this account, proprietary definition.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? ProductName { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>Shows reserved amount for the underlying account for a given balance reservation event.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? LockedAmount { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("workingBalance")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? WorkingBalance { get; set; }= default!;
    
        /// <summary>Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("onlineActualBalance")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? OnlineActualBalance { get; set; }= default!;
    
        /// <summary>Available balance of the account which is the projected balance which includes the net movements of both debits and credits against the account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableBalance")]
        public double? AvailableBalance { get; set; }= default!;
    
        /// <summary>Contains bank sort code or iban branch identifier for the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sortCode")]
        public string? SortCode { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>The portion of an allocated credit limit that is available for the nominated customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableLimit")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AvailableLimit { get; set; }= default!;
    
        /// <summary>International Bank Account number, an identifier of the account. E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [System.Text.Json.Serialization.JsonPropertyName("IBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? IBAN { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The date the account is opened.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OpeningDate { get; set; }= default!;
    
        /// <summary>Identifies the credit limit reference for the underlying account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("limitReference")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? LimitReference { get; set; }= default!;
    
        /// <summary>Balance taking into consideration all cleared funds booked against the account, including credit and reversed debit entries with a future exposure date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clearedBalance")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? ClearedBalance { get; set; }= default!;
    
        /// <summary>Total funds available in the account after all the ongoing transactions have been completed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("availableFunds")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 19D)]
        public double? AvailableFunds { get; set; }= default!;
    
        /// <summary>Indicates an unique identifier of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrangementId")]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? ArrangementId { get; set; }= default!;
    
        /// <summary>Contains the unique identifier of the product, e.g. the product id of the arrangement account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; set; }= default!;
    
        /// <summary>The group, as defined by the institution, that the product belongs to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productGroupId")]
        public string? ProductGroupId { get; set; }= default!;
    
        /// <summary>Name that is displayed for the product category</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CategoryName { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>Specifies the current status of the account, which is either active, inactive or closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AccountStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous14 
    {
        /// <summary>Monetary value of each balance</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balances")]
        public System.Collections.Generic.ICollection<Balances2>? Balances { get; set; }= default!;
    
        /// <summary>Unique Identifier of Contract Balances</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractBalanceId")]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string? ContractBalanceId { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous15 
    {
        /// <summary>Funds authorisation status of the system.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("faStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? FaStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous16 
    {
        /// <summary>Indicates if there is an emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyBlock")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? EmergencyBlock { get; set; }= default!;
    
        /// <summary>Indicates the reason for emergency block in an account.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("emergencyReason")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? EmergencyReason { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous17 
    {
        /// <summary>Bank Identifier Code (BIC) of the Beneficiary bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bicId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? BicId { get; set; }= default!;
    
        /// <summary>The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Indicates the date in which an alert to be raised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AlertDate { get; set; }= default!;
    
        /// <summary>Specifies the start date when the instruction will be made active</summary>
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains status of the Alert. Possible values are Pending, Sent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("alertStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AlertStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous18 
    {
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Bic { get; set; }= default!;
    
        /// <summary>Identifier of account IBAN. Contains the account IBAN to which the existing account is being switched to based on switch instruction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SwitchAccountId { get; set; }= default!;
    
        /// <summary>The status identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The date on which the principal movement is effected</summary>
        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as an arrangement, product, credit facility or limit is due to expire</summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous19 
    {
        [System.Text.Json.Serialization.JsonPropertyName("remittanceDetails")]
        public System.Collections.Generic.ICollection<RemittanceDetails>? RemittanceDetails { get; set; }= default!;
    
        /// <summary>Indicates id of rerouted payment information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordId")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? RecordId { get; set; }= default!;
    
        /// <summary>Contains the name of the debtor.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debtorName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DebtorName { get; set; }= default!;
    
        /// <summary>The name of the creditor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditorName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CreditorName { get; set; }= default!;
    
        /// <summary>This indicates the end to end reference for the payment. This field can be provided by one who instructs the payment and flows through the lifecycle of payment. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("endToEndReference")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? EndToEndReference { get; set; }= default!;
    
        /// <summary>Contains the direct debit mandate reference (dd) when the settlement method is set to direct debit. The dd reference is typically the account number followed by a suffix, for example 15245.1</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ddMandateReference")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DdMandateReference { get; set; }= default!;
    
        /// <summary>Identifier of the switching account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? SwitchAccountId { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Bic { get; set; }= default!;
    
        /// <summary>The identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId.Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficiaryBIC")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>This is the type of transaction for which Beneficiary is created i.e. within bank account transfer or other bank transfer etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountIds 
    {
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AccountId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CardNames 
    {
        /// <summary>Name of the Cardholder/Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("cardName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CardName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Balances 
    {
        /// <summary>Indicates the date on which activity was performed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.Collections.Generic.ICollection<string>? Date { get; set; }= default!;
    
        /// <summary>The monetary value of each balance type for an account is itemised.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public System.Collections.Generic.ICollection<string>? Balance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SharedLimitAccounts 
    {
        /// <summary>Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccount")]
        public string? SharedLimitAccount { get; set; }= default!;
    
        /// <summary>Indicates the type of shared limit account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedLimitAccountType")]
        public string? SharedLimitAccountType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxRates 
    {
        /// <summary>Indicates tax charged to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRate")]
        public string? TaxRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Interests 
    {
        /// <summary>Contains the property name of loan interest such as penalty Interest and principal interest.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPropertyName")]
        public string? InterestPropertyName { get; set; }= default!;
    
        /// <summary>Indicates the interest compound type of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCompoundType")]
        public string? InterestCompoundType { get; set; }= default!;
    
        /// <summary>Indicates the interest compound type value of an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestCompoundTypeValue")]
        public string? InterestCompoundTypeValue { get; set; }= default!;
    
        /// <summary>Interest paid from the start of current year till current date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestPaidYtd")]
        public double? InterestPaidYtd { get; set; }= default!;
    
        /// <summary>Indicates the interest received last</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaidInterestAmount")]
        public double? LastPaidInterestAmount { get; set; }= default!;
    
        /// <summary>Date last payment was made</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPaymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPaymentDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("consolidateInterests")]
        public System.Collections.Generic.ICollection<ConsolidateInterests>? ConsolidateInterests { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SharedInterestAccounts 
    {
        /// <summary>Contains the account details which shares the interest among the eligible or joint customers.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccount")]
        public string? SharedInterestAccount { get; set; }= default!;
    
        /// <summary>Indicates the type of shared interest account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sharedInterestAccountType")]
        public string? SharedInterestAccountType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>The frequency at which a payment is required to be generated</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentFrequency")]
        public string? PaymentFrequency { get; set; }= default!;
    
        /// <summary>Indicates Payment type set to an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeName")]
        public string? PaymentTypeName { get; set; }= default!;
    
        /// <summary>Indicates the  property description to which benefit has been applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        public string? PropertyName { get; set; }= default!;
    
        /// <summary>Method chosen to make the payment</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        public string? PaymentMethod { get; set; }= default!;
    
        /// <summary>Indicates the payment frequency associated with the charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chargeSchedulePaymentValue")]
        public string? ChargeSchedulePaymentValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class JointCustomers 
    {
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public string? CustomerId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountTitles 
    {
        /// <summary>Short title on an account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountTitle")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? AccountTitle { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BeneficialOwners 
    {
        /// <summary>Indicates the customer who is the legal owner of the arrangement and is the responsible customer of the contract with bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficialOwner")]
        [System.ComponentModel.DataAnnotations.StringLength(90)]
        public string? BeneficialOwner { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SwitchDetails 
    {
        /// <summary>Indicates if the transaction account has been enabled with any switching account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("isSwitchEnabled")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? IsSwitchEnabled { get; set; }= default!;
    
        /// <summary>Identifier of the switching account number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchAccountId")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SwitchAccountId { get; set; }= default!;
    
        /// <summary>International Bank Account Number of the switching account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchIBAN")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchIBAN { get; set; }= default!;
    
        /// <summary>Indicates the Bank Identification Code(BIC) of the institution where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchBic")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchBic { get; set; }= default!;
    
        /// <summary>Indicates the clearing or sort code of the bank where switch account is held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchClearingCode")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? SwitchClearingCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AccountStatusDetails 
    {
        /// <summary>Specifies the current status of the account, which is either active, inactive or closed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accountStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AccountStatus { get; set; }= default!;
    
        /// <summary>The failure type for an eligibility rule can be either one of two values, error or override/warning.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("failureType")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? FailureType { get; set; }= default!;
    
        /// <summary>The identifier of the warning or error encountered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("failureCode")]
        [System.ComponentModel.DataAnnotations.StringLength(75)]
        public string? FailureCode { get; set; }= default!;
    
        /// <summary>Indicates the description of error or warning encountered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("failureMessage")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? FailureMessage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomerDetails 
    {
        /// <summary>Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Customer { get; set; }= default!;
    
        /// <summary>Identifies the inter-relationship between Customer records and enables a link to be formed for the purpose of evaluating the overall Customer position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("relationCode")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? RelationCode { get; set; }= default!;
    
        /// <summary>Indicates role of a customer for an arrangement.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerRole")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerRole { get; set; }= default!;
    
        /// <summary>Contains the type of customer, for example ACTIVE, PROSPECT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? CustomerType { get; set; }= default!;
    
        /// <summary>Indicates the type of role of a customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("roleDisplayName")]
        public string? RoleDisplayName { get; set; }= default!;
    
        /// <summary>Specifies customer's first name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }= default!;
    
        /// <summary>Contains the greeting to be used for communications with the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("salutation")]
        public string? Salutation { get; set; }= default!;
    
        /// <summary>Marital status of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maritalStatus")]
        public string? MaritalStatus { get; set; }= default!;
    
        /// <summary>Indicates the customer who is the legal owner of the arrangement and is the responsible customer of the contract with bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("beneficialOwner")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? BeneficialOwner { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("taxIds")]
        public System.Collections.Generic.ICollection<TaxIds>? TaxIds { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumbers")]
        public System.Collections.Generic.ICollection<PhoneNumbers>? PhoneNumbers { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("emails")]
        public System.Collections.Generic.ICollection<Emails>? Emails { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("postCodes")]
        public System.Collections.Generic.ICollection<PostCodes>? PostCodes { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("streets")]
        public System.Collections.Generic.ICollection<Streets>? Streets { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("townCountries")]
        public System.Collections.Generic.ICollection<TownCountries>? TownCountries { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("employmentStatuses")]
        public System.Collections.Generic.ICollection<EmploymentStatuses>? EmploymentStatuses { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("contactDetails")]
        public System.Collections.Generic.ICollection<ContactDetails>? ContactDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Balances2 
    {
        /// <summary>Type of balance (e.g. current balance, credit interest accrued, deferred commission, etc.) as defined in the institution's accounting schemas.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("balanceType")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string? BalanceType { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Balance brought forward from the previous date/period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OpeningBalance { get; set; }= default!;
    
        /// <summary>Indicates an account’s credit movement’s for a specific booking date which will not include any of the credit movements that are masked</summary>
        [System.Text.Json.Serialization.JsonPropertyName("creditMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CreditMovement { get; set; }= default!;
    
        /// <summary>Indicates an account’s debit movement’s for a specific booking date which will not include any of the debit movements that are masked.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("debitMovement")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DebitMovement { get; set; }= default!;
    
        /// <summary>Closing balance of the arrangement</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingBalance")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ClosingBalance { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class RemittanceDetails 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("remittanceInformation")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? RemittanceInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConsolidateInterests 
    {
        /// <summary>Contains the sum of the cash interest expense and net of cash interest income of the borrower and the restricted subsidiaries determined on a consolidated basis</summary>
        [System.Text.Json.Serialization.JsonPropertyName("consolidateInterest")]
        public string? ConsolidateInterest { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TaxIds 
    {
        /// <summary>Holds the Customer's TAX/SSN Id.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxId")]
        public string? TaxId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PhoneNumbers 
    {
        /// <summary>The phone number of the customer or prospect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Emails 
    {
        /// <summary>Email Identifier of the Customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostCodes 
    {
        /// <summary>Identifies the address postal code for the customer.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string? PostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Streets 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string? Street { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TownCountries 
    {
        /// <summary>The town and country associated with the address</summary>
        [System.Text.Json.Serialization.JsonPropertyName("townCountry")]
        public string? TownCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class EmploymentStatuses 
    {
        /// <summary>Identifies the employment status of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("employmentStatus")]
        public string? EmploymentStatus { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ContactDetails 
    {
        /// <summary>Types of contacts available to users to communicate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactType")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ContactType { get; set; }= default!;
    
        /// <summary>Identifies the international calling prefix code of the phone or mobile number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("iddPrefixPhone")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? IddPrefixPhone { get; set; }= default!;
    
        /// <summary>Indicates the contact data of customer used for communication such as phone or mobile or e-mail address.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contactData")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ContactData { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016