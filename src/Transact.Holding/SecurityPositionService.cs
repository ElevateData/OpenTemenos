//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.SecurityPositions
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISecurityPositionService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the security position details</summary>
        /// <param name="securityNumber">Security Numbers</param>
        /// <param name="securityAccount">Security Accounts</param>
        /// <param name="referenceNumber">Reference Numbers</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>PortfoliosTransactionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfoliosTransactionsResponse> GetPortfoliosTransactionsAsync(string? securityNumber = null, string? securityAccount = null, string? referenceNumber = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the security position details for own book portfolios</summary>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="dealerBook">Dealer Book</param>
        /// <param name="securityCode">Security Code</param>
        /// <param name="currentPosition">Current Positions</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>SecurityInventoryPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityInventoryPositionsResponse> GetSecurityInventoryPositionsAsync(string? instrumentId = null, string? dealerBook = null, string? securityCode = null, string? currentPosition = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the security position details</summary>
        /// <param name="securityNumber">Security Numbers</param>
        /// <param name="securityAccount">Security Accounts</param>
        /// <param name="referenceNumber">Reference Numbers</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>PortfolioTransactionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfoliosTransactionsResponse> GetPortfolioTransactionsAsync(string portfolioId, string? securityNumber = null, string? securityAccount = null, string? referenceNumber = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the position information</summary>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="subAccount">The sub-account that the security position is held in.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>InstrumentPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstrumentPositionsResponse> GetInstrumentPositionsAsync(string instrumentId, string? portfolioId = null, string? depository = null, string? subAccount = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the position information</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="depository">The custodian where securities are held</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <returns>PortfolioSecurityPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortfolioSecurityPositionsResponse> GetPortfolioSecurityPositionsAsync(string portfolioId, string? instrumentId = null, string? depository = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows to view the Security Movements of the Portfolio</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="referenceNumber">Specifies the reference for the document, if any.</param>
        /// <param name="instrumentId">The identifier of the instrument</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>SecurityMovementsByPortfolioResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityMovementsByPortfolioResponse> GetSecurityMovementsByPortfolioAsync(string portfolioId, string? referenceNumber = null, string? instrumentId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>PortfoliosTransactionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PortfoliosTransactionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PortfoliosTransactionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PortfoliosTransactionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SecurityInventoryPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityInventoryPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityInventoryPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityInventoryPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstrumentPositionsResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>InstrumentPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstrumentPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public InstrumentPositionsResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public InstrumentPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InstrumentPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PortfolioSecurityPositionsResponseQueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data2? Data { get; set; }= default!;
    
    
    }
    
    /// <summary>PortfolioSecurityPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PortfolioSecurityPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PortfolioSecurityPositionsResponseQueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PortfolioSecurityPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PortfolioSecurityPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>SecurityMovementsByPortfolioResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityMovementsByPortfolioResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public SecurityMovementsByPortfolioResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SecurityMovementsByPortfolioResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? TradeDate { get; set; }= default!;
    
        /// <summary>Transaction reference identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Reversal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("reversal")]
        public string? Reversal { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public int? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public int? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>Dealer Book</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealerBook")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? DealerBook { get; set; }= default!;
    
        /// <summary>Book name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bookName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BookName { get; set; }= default!;
    
        /// <summary>The name of the Sub Asset Type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAssetType")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubAssetType { get; set; }= default!;
    
        /// <summary>Security Numbers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("securityNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? SecurityNumber { get; set; }= default!;
    
        /// <summary>Security Description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("securityDescription")]
        public string? SecurityDescription { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Identifies the bid rate of the related currency for the defined time period</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        public string? InterestRate { get; set; }= default!;
    
        /// <summary>Average Life Maturity Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("averageLifeMaturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AverageLifeMaturityDate { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maturityDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaturityDate { get; set; }= default!;
    
        /// <summary>Current Positions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentPosition")]
        public double? CurrentPosition { get; set; }= default!;
    
        /// <summary>Defines par value of the stock in the Security Currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parValue")]
        public double? ParValue { get; set; }= default!;
    
        /// <summary>Current Cost Position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentCostPosition")]
        public double? CurrentCostPosition { get; set; }= default!;
    
        /// <summary>Unrealized profit and loss</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfitLoss")]
        public double? UnrealizedProfitLoss { get; set; }= default!;
    
        /// <summary>Current realized profit loss</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentRealizedProfitLoss")]
        public double? CurrentRealizedProfitLoss { get; set; }= default!;
    
        /// <summary>Coupon accrual and posted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("couponAccrualPosted")]
        public double? CouponAccrualPosted { get; set; }= default!;
    
        /// <summary>Discount accrued</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discountAccrued")]
        public double? DiscountAccrued { get; set; }= default!;
    
        /// <summary>Date last  traded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateLastTraded")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateLastTraded { get; set; }= default!;
    
        /// <summary>Yield to  maturity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("yieldToMaturity")]
        public double? YieldToMaturity { get; set; }= default!;
    
        /// <summary>Current yield</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentYield")]
        public double? CurrentYield { get; set; }= default!;
    
        /// <summary>Duration</summary>
        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public double? Duration { get; set; }= default!;
    
        /// <summary>Securities trading position id</summary>
        [System.Text.Json.Serialization.JsonPropertyName("scTradingPositionId")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ScTradingPositionId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public int? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public int? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data 
    {
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The International Securities Identification Number of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ISIN")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ISIN { get; set; }= default!;
    
        /// <summary>The currency of the Price</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? PriceCurrency { get; set; }= default!;
    
        /// <summary>Current Market Price of the Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketPrice")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MarketPrice { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The final quantity of securities held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string? Position { get; set; }= default!;
    
        /// <summary>The number of securities related to the security position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openOrderPosition")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? OpenOrderPosition { get; set; }= default!;
    
        /// <summary>The nominal of securities relating to this position that remains unreceived.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unsettledCredits")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? UnsettledCredits { get; set; }= default!;
    
        /// <summary>The nominal of securities relating to this position that remains undelivered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unsettledDebits")]
        public string? UnsettledDebits { get; set; }= default!;
    
        /// <summary>The nominal quantity on a securities instrument that prevents it from being traded when the blocked quantity is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blockedQuantity")]
        public string? BlockedQuantity { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        public double? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The reference currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrency")]
        public string? ReferenceCurrency { get; set; }= default!;
    
        /// <summary>The amount converted to the required reference currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInReferenceCurrency")]
        public string? ValueInReferenceCurrency { get; set; }= default!;
    
        /// <summary>The amount of unrealised profit and loss calculated as a result of mark to market revaluation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unrealizedMarkToMarket")]
        public double? UnrealizedMarkToMarket { get; set; }= default!;
    
        /// <summary>The net mark to market gain or loss considering unrealised profits and losses</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unrealizedMarkToMarketNet")]
        public string? UnrealizedMarkToMarketNet { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public int? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public int? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Data2 
    {
        /// <summary>Id of the portfolio or security account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioId")]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? PortfolioId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("portfolioName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PortfolioName { get; set; }= default!;
    
        /// <summary>The reference currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? ReferenceCurrency { get; set; }= default!;
    
        /// <summary>The identifier of the investment strategy followed by the Portfolio</summary>
        [System.Text.Json.Serialization.JsonPropertyName("investmentProgram")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InvestmentProgram { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string? TransactionId { get; set; }= default!;
    
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The International Securities Identification Number of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ISIN")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ISIN { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>The custodian where securities are held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depository")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>The name that is displayed for the depository</summary>
        [System.Text.Json.Serialization.JsonPropertyName("depositoryName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DepositoryName { get; set; }= default!;
    
        /// <summary>The sub-account that the security position is held in.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAccount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubAccount { get; set; }= default!;
    
        /// <summary>The final quantity of securities held</summary>
        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string? Position { get; set; }= default!;
    
        /// <summary>The number of securities related to the security position</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openOrderPosition")]
        public string? OpenOrderPosition { get; set; }= default!;
    
        /// <summary>The nominal of securities relating to this position that remains unreceived.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unsettledCredits")]
        public string? UnsettledCredits { get; set; }= default!;
    
        /// <summary>The nominal of securities relating to this position that remains undelivered.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unsettledDebits")]
        public string? UnsettledDebits { get; set; }= default!;
    
        /// <summary>The nominal quantity on a securities instrument that prevents it from being traded when the blocked quantity is exceeded.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("blockedQuantity")]
        public string? BlockedQuantity { get; set; }= default!;
    
        /// <summary>The currency of the Price</summary>
        [System.Text.Json.Serialization.JsonPropertyName("priceCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? PriceCurrency { get; set; }= default!;
    
        /// <summary>Current Market Price of the Security</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketPrice")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? MarketPrice { get; set; }= default!;
    
        /// <summary>The currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentCurrencyId")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? InstrumentCurrencyId { get; set; }= default!;
    
        /// <summary>The amount converted to the currency of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInInstrumentCurrency")]
        public double? ValueInInstrumentCurrency { get; set; }= default!;
    
        /// <summary>The amount converted to the required reference currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueInReferenceCurrency")]
        public double? ValueInReferenceCurrency { get; set; }= default!;
    
        /// <summary>The amount of unrealised profit and loss calculated as a result of mark to market revaluation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unrealizedMarkToMarket")]
        public double? UnrealizedMarkToMarket { get; set; }= default!;
    
        /// <summary>The net mark to market gain or loss considering unrealised profits and losses</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unrealizedMarkToMarketNet")]
        public double? UnrealizedMarkToMarketNet { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>The identifier of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentId")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? InstrumentId { get; set; }= default!;
    
        /// <summary>The name that is displayed for the instrument, taken from the Security Master</summary>
        [System.Text.Json.Serialization.JsonPropertyName("instrumentName")]
        public string? InstrumentName { get; set; }= default!;
    
        /// <summary>Committee on Uniform Security Identification Procedures number for the Instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("CUSIP")]
        public string? CUSIP { get; set; }= default!;
    
        /// <summary>The International Securities Identification Number of the instrument</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ISIN")]
        public string? ISIN { get; set; }= default!;
    
        /// <summary>Standard date field which records trade date of the account</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Specifies the reference for the document, if any.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; }= default!;
    
        /// <summary>Indicates the Status of the record,U - If it is Unauthorised,D - If it is Deleted,R - If it is Reversed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currentStatus")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? CurrentStatus { get; set; }= default!;
    
        /// <summary>The transaction description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionName")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TransactionName { get; set; }= default!;
    
        /// <summary>The trade currency is the settlement currency for the trade</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? TradeCurrency { get; set; }= default!;
    
        /// <summary>The Price at which the nominal amount of the Security is to be valued for the transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 18D)]
        public double? Price { get; set; }= default!;
    
        /// <summary>The nominal quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016