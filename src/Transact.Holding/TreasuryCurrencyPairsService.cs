//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.TreasuryCurrencyPairs
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITreasuryCurrencyPairsService
    {
        /// <summary>Retrieves position information for the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionsResponse> GetCurrencyPairPositionsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, System.DateTimeOffset? buyDate, System.DateTimeOffset? dealDate, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves position information for the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionsResponse> GetCurrencyPairPositionsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, System.DateTimeOffset? buyDate, System.DateTimeOffset? dealDate, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the position details for the given currency pair and calender</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="calendar">Identifies the calendar to be used for the spreading of different position data into different time buckets. Ex: CAL-Standard calendar and DE1-Deutsche calendar</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairCalendarPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairCalendarPositionsResponse> GetCurrencyPairCalendarPositionsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, string? buyDate, string? buyDateFrom, string? buyDateTo, string? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, string? calendar, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the position details for the given currency pair and calender</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="calendar">Identifies the calendar to be used for the spreading of different position data into different time buckets. Ex: CAL-Standard calendar and DE1-Deutsche calendar</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairCalendarPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairCalendarPositionsResponse> GetCurrencyPairCalendarPositionsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, string? buyDate, string? buyDateFrom, string? buyDateTo, string? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, string? calendar, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the live market rate from a given rate feed</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="rateSource">The market rates source in general. In the case of currency rate, whether rate is to be sourced from  currency table (front office) or from market rates table (back office).</param>
        /// <param name="rateProvider">The market rate provider, e.g. Bloomberg, Reuters, etc.</param>
        /// <param name="assetType">Type of the asset, e.g. FX, equity, etc.</param>
        /// <param name="dateOrPeriod">Refers to a date or a given period.</param>
        /// <param name="rateIndicator">Market rate indicator as per the asset class. For currency, it  will be buy rate(B) , sell rate(S) or mid rate(M).</param>
        /// <param name="interpolationMethod">Identifies whether forward exchange rates are to be interpolated or not. Possible values are 'Blank' - Rate will be interpolated '1' - Takes the next available rate '2' - Takes the closest rate</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairMarketRatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairMarketRatesResponse> GetCurrencyPairMarketRatesAsync(string currencyPair, string? rateSource, string? rateProvider, string? assetType, string? dateOrPeriod, string? rateIndicator, string? interpolationMethod, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the live market rate from a given rate feed</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="rateSource">The market rates source in general. In the case of currency rate, whether rate is to be sourced from  currency table (front office) or from market rates table (back office).</param>
        /// <param name="rateProvider">The market rate provider, e.g. Bloomberg, Reuters, etc.</param>
        /// <param name="assetType">Type of the asset, e.g. FX, equity, etc.</param>
        /// <param name="dateOrPeriod">Refers to a date or a given period.</param>
        /// <param name="rateIndicator">Market rate indicator as per the asset class. For currency, it  will be buy rate(B) , sell rate(S) or mid rate(M).</param>
        /// <param name="interpolationMethod">Identifies whether forward exchange rates are to be interpolated or not. Possible values are 'Blank' - Rate will be interpolated '1' - Takes the next available rate '2' - Takes the closest rate</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairMarketRatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairMarketRatesResponse> GetCurrencyPairMarketRatesAsync(string currencyPair, string? rateSource, string? rateProvider, string? assetType, string? dateOrPeriod, string? rateIndicator, string? interpolationMethod, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves position information for the currency pair outstanding deals</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AllCurrencyPairPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionsResponse> GetAllCurrencyPairPositionsAsync(string? currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, System.DateTimeOffset? buyDate, string? buyDateFrom, string? buyDateTo, System.DateTimeOffset? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves position information for the currency pair outstanding deals</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>AllCurrencyPairPositionsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionsResponse> GetAllCurrencyPairPositionsAsync(string? currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, System.DateTimeOffset? buyDate, string? buyDateFrom, string? buyDateTo, System.DateTimeOffset? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the underlying deal responsible for the positions in the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairPositionDealsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionDealsResponse> GetCurrencyPairPositionDealsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, string? buyDate, string? buyDateFrom, string? buyDateTo, string? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the underlying deal responsible for the positions in the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="companyIdQuery">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="buyDate">Value date of the buy currency.</param>
        /// <param name="buyDateFrom">Contains the from value date in a range while retrieving the position.</param>
        /// <param name="buyDateTo">Contains the to value date in a range while retrieving the position.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="positionPeriod">Identifies the period for which position is retrieved. Possible values are SPOT, FORWARD</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairPositionDealsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairPositionDealsResponse> GetCurrencyPairPositionDealsAsync(string currencyPair, string? companyIdQuery, string? positionType, string? dealerDesk, string? buyDate, string? buyDateFrom, string? buyDateTo, string? dealDate, string? dealDateFrom, string? dealDateTo, string? positionPeriod, string? counterpartyName, int? page_size, int? page_start, string? page_token, string? credentials, string? companyIdHeader, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves all the currency pairs</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairsResponse> GetCurrencyPairsAsync(int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all the currency pairs</summary>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairsResponse> GetCurrencyPairsAsync(int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairsResponse> GetCurrencyPairAsync(string currencyPair, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the given currency pair</summary>
        /// <param name="currencyPair">Identifies the currency pair. Ex: USDCHF, USDGBP</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyPairResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyPairsResponse> GetCurrencyPairAsync(string currencyPair, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves the exchange rates to be used for portfolio valuation.</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="buyCurrency">ISO Currency code for the bought currency.</param>
        /// <param name="sellCurrency">ISO Currency code for the sold currency.</param>
        /// <param name="dateOrPeriod">Refers to a date or a given period.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FxPortfolioValuationRatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FxPortfolioValuationRatesResponse> GetFxPortfolioValuationRatesAsync(string? portfolioId, string? buyCurrency, string? sellCurrency, string? dateOrPeriod, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the exchange rates to be used for portfolio valuation.</summary>
        /// <param name="portfolioId">Id of the portfolio or security account</param>
        /// <param name="buyCurrency">ISO Currency code for the bought currency.</param>
        /// <param name="sellCurrency">ISO Currency code for the sold currency.</param>
        /// <param name="dateOrPeriod">Refers to a date or a given period.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FxPortfolioValuationRatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FxPortfolioValuationRatesResponse> GetFxPortfolioValuationRatesAsync(string? portfolioId, string? buyCurrency, string? sellCurrency, string? dateOrPeriod, int? page_size, int? page_start, string? page_token, string? credentials, string? companyId, string? deviceId, string? userRole, bool? disablePagination, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyPairPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyPairPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyPairCalendarPositionsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairCalendarPositionsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyPairCalendarPositionsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairCalendarPositionsResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>CurrencyPairMarketRatesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairMarketRatesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyPairMarketRatesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairMarketRatesResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>CurrencyPairPositionDealsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairPositionDealsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyPairPositionDealsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairPositionDealsResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>CurrencyPairsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CurrencyPairsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CurrencyPairsResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>FxPortfolioValuationRatesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxPortfolioValuationRatesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FxPortfolioValuationRatesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxPortfolioValuationRatesResponseBody : System.Collections.ObjectModel.Collection<Anonymous6>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Identifies the currency pair. Ex: USDCHF, USDGBP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyPair")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CurrencyPair { get; set; }= default!;
    
        /// <summary>The base currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency1")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency1 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency one.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currecy1Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currecy1Amount { get; set; }= default!;
    
        /// <summary>The quote currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency2 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency two.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currency2Amount { get; set; }= default!;
    
        /// <summary>The weighted average rate.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("averageRate")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? AverageRate { get; set; }= default!;
    
        /// <summary>The rate used to revalue the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revaluationRate")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? RevaluationRate { get; set; }= default!;
    
        /// <summary>Currency (other than local currency) in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitAndLossInCurrency2")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProfitAndLossInCurrency2 { get; set; }= default!;
    
        /// <summary>The local currency in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitAndLossInLocalCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProfitAndLossInLocalCurrency { get; set; }= default!;
    
        /// <summary>Currency (other than local currency) in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitAndLossInRevaluationCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ProfitAndLossInRevaluationCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The calendar period used for consolidating the data into different time buckets.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("calendarPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? CalendarPeriod { get; set; }= default!;
    
        /// <summary>The base currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency1")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency1 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency one.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currecy1Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Currecy1Amount { get; set; }= default!;
    
        /// <summary>The quote currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency2 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency two.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Currency2Amount { get; set; }= default!;
    
        /// <summary>The weighted average rate.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("averageRate")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? AverageRate { get; set; }= default!;
    
        /// <summary>The rate used to revalue the currency positions.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revaluationRate")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? RevaluationRate { get; set; }= default!;
    
        /// <summary>Currency (other than local currency) in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossCurrency2")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ProfitLossCurrency2 { get; set; }= default!;
    
        /// <summary>The local currency in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossLocalCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ProfitLossLocalCurrency { get; set; }= default!;
    
        /// <summary>Currency (other than local currency) in which profit and loss is expressed.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossInRevaluationCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ProfitLossInRevaluationCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>The market rates source in general. In the case of currency rate, whether rate is to be sourced from  currency table (front office) or from market rates table (back office).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateSource")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? RateSource { get; set; }= default!;
    
        /// <summary>The market rate provider, e.g. Bloomberg, Reuters, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateProvider")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? RateProvider { get; set; }= default!;
    
        /// <summary>A single currency or a currency pair.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyOrPair")]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string? CurrencyOrPair { get; set; }= default!;
    
        /// <summary>Type of the asset, e.g. FX, equity, etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("assetType")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? AssetType { get; set; }= default!;
    
        /// <summary>Refers to a date or a given period.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateOrPeriod")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DateOrPeriod { get; set; }= default!;
    
        /// <summary>Market rate indicator as per the asset class. For currency, it  will be buy rate(B) , sell rate(S) or mid rate(M).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateIndicator")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? RateIndicator { get; set; }= default!;
    
        /// <summary>The method used for interpolation to derive currency forward rates.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("interpolationMarker")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? InterpolationMarker { get; set; }= default!;
    
        /// <summary>Prevailing rate in the market.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketRate")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? MarketRate { get; set; }= default!;
    
        /// <summary>Number of days from today.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("daysSinceToday")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DaysSinceToday { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionReference")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>The counterparty ID  for the  deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterparty")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Counterparty { get; set; }= default!;
    
        /// <summary>The base currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency1")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency1 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency one.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currecy1Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currecy1Amount { get; set; }= default!;
    
        /// <summary>The quote currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? Currency2 { get; set; }= default!;
    
        /// <summary>In the transaction, there may be two currencies involved. Amount of the currency two.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currency2Amount")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Currency2Amount { get; set; }= default!;
    
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? Rate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency position </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealer")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? Dealer { get; set; }= default!;
    
        /// <summary>Contains status of the data rights request.Allowed values are INITIATED, INPROGESS, EXTENDED, COMPLETED, REJECTED.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Status { get; set; }= default!;
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("companyId")]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? CompanyId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Identifies the currency pair. Ex: USDCHF, USDGBP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyPair")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CurrencyPair { get; set; }= default!;
    
        /// <summary>Identifies the decimal displacement of percentage in points for a currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationPips")]
        public string? QuotationPips { get; set; }= default!;
    
        /// <summary>Identifies the decimal places of the base currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrencyDecimal")]
        public string? BaseCurrencyDecimal { get; set; }= default!;
    
        /// <summary>Identifies the decimal places of the counter currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("counterCurrencyDecimal")]
        public string? CounterCurrencyDecimal { get; set; }= default!;
    
        /// <summary>Identifies if the currency is a precious metal or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("preciousMetal")]
        public string? PreciousMetal { get; set; }= default!;
    
        /// <summary>Identifies if the currency is allowed for NDF transaction as deal currency.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ndAllowedCcy")]
        public string? NdAllowedCcy { get; set; }= default!;
    
        /// <summary>Identifies whether split value dated contracts are allowed for the currency or not.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("splitValueCcy")]
        public string? SplitValueCcy { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous6 
    {
        /// <summary>Identifies the currency pair. Ex: USDCHF, USDGBP</summary>
        [System.Text.Json.Serialization.JsonPropertyName("currencyPair")]
        public string? CurrencyPair { get; set; }= default!;
    
        /// <summary>Prevailing rate in the market.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketRate")]
        public string? MarketRate { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016