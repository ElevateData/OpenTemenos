//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Transact.Holding.ForexUtilizations
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IForexUtilizationService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the forex contracts for the provided reference</summary>
        /// <param name="utilisationId">Identifies the unique identifier of the transaction or contract which will be utilised.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>UtilisationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UtilisationsResponse> GetUtilisationsAsync(string utilisationId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiation of the Forex contract which will be utilised for external settlement</summary>
        /// <param name="utilisationId">Identifies the unique identifier of the transaction or contract which will be utilised.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>UtilisationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UtilisationsResponse> AddUtilisationsAsync(string utilisationId, Utilisations payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Authorization of the Forex contract which has been utilised for external settlement</summary>
        /// <param name="utilisationId">Identifies the unique identifier of the transaction or contract which will be utilised.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>UtilisationsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UtilisationsResponse> ApproveUtilisationsAsync(string utilisationId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the currency exchange rates from the given forex contract that will be used by the transaction processing application for the conversion.</summary>
        /// <param name="utilisationId">Identifies the unique identifier of the transaction or contract which will be utilised.</param>
        /// <param name="counterparty">The counterparty ID  for the  deal.</param>
        /// <param name="utilisationCurrency">Identifies the currency in which the amount is being utilised.</param>
        /// <param name="utilisationAmount">Identifies the utilized amount of the Forex contract.</param>
        /// <param name="executionDate">Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>FxUtilisationRatesResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FxUtilisationRatesResponse> GetFxUtilisationRatesAsync(string? utilisationId = null, string? counterparty = null, string? utilisationCurrency = null, string? utilisationAmount = null, string? executionDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionStatus")]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueIdentifier")]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>UtilisationsResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UtilisationsResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ScreenHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UtilisationsResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UtilisationsResponseBody 
    {
        /// <summary>Retrieves the forex contracts which are utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisations")]
        public System.Collections.Generic.ICollection<Utilisations2>? Utilisations { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Settlement date for buy side amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDateBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDateBuy { get; set; }= default!;
    
        /// <summary>Date on which the sold currency is settled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDateSell")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDateSell { get; set; }= default!;
    
        /// <summary>Contains the date post which an options contract can be utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OptionDate { get; set; }= default!;
    
        /// <summary>Contains the outstanding amount of the utilized contracts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("projectedOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ProjectedOutstandingAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>The currency of the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OptionCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Exchange rate applicable for spot trades.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spotRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SpotRate { get; set; }= default!;
    
        /// <summary>FX rate applicable for forward period contracts. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ForwardRate { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Contains the external deal reference number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDealReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExternalDealReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? TransactionType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [System.Text.Json.Serialization.JsonPropertyName("errorDetails")]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PayloadHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override? Override { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit3? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>Utilisations</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Utilisations 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PayloadHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public UtilisationsBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class UtilisationsBody 
    {
        /// <summary>Retrieves the forex contracts which are utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisations")]
        public System.Collections.Generic.ICollection<Utilisations3>? Utilisations { get; set; }= default!;
    
        /// <summary>Name of the customer</summary>
        [System.Text.Json.Serialization.JsonPropertyName("customerName")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CustomerName { get; set; }= default!;
    
        /// <summary>Settlement date for buy side amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDateBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDateBuy { get; set; }= default!;
    
        /// <summary>Date on which the sold currency is settled.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("valueDateSell")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ValueDateSell { get; set; }= default!;
    
        /// <summary>Contains the date post which an options contract can be utilized</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionDate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OptionDate { get; set; }= default!;
    
        /// <summary>Contains the outstanding amount of the utilized contracts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("projectedOutstandingAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(26)]
        public string? ProjectedOutstandingAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [System.Text.Json.Serialization.JsonPropertyName("baseCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BaseCurrency { get; set; }= default!;
    
        /// <summary>The currency of the option</summary>
        [System.Text.Json.Serialization.JsonPropertyName("optionCurrency")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? OptionCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("buyAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sellAmount")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Exchange rate applicable for spot trades.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("spotRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? SpotRate { get; set; }= default!;
    
        /// <summary>FX rate applicable for forward period contracts. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("forwardRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ForwardRate { get; set; }= default!;
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("treasuryRate")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TreasuryRate { get; set; }= default!;
    
        /// <summary>Contains the external deal reference number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDealReference")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? ExternalDealReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? TransactionType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class QueryHeader 
    {
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_start")]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [System.Text.Json.Serialization.JsonPropertyName("total_size")]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("page_token")]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>FxUtilisationRatesResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxUtilisationRatesResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public QueryHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public FxUtilisationRatesResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class FxUtilisationRatesResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public ErrorHeader? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Utilisations2 
    {
        /// <summary>Contains the utilized buy amount of the Forex contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationAmountBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UtilisationAmountBuy { get; set; }= default!;
    
        /// <summary>Contains the utilized sell amount of the Forex contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationAmountSell")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? UtilisationAmountSell { get; set; }= default!;
    
        /// <summary>Contains the buy date when the utilisation has been done on the Forex deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationDateBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? UtilisationDateBuy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("utilisationDateSell")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? UtilisationDateSell { get; set; }= default!;
    
        /// <summary>Contains the reference to the contracts which have utilized the Forex.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UtilisationReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fieldName")]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Override 
    {
        [System.Text.Json.Serialization.JsonPropertyName("overrideDetails")]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Utilisations3 
    {
        /// <summary>Contains the utilized buy amount of the Forex contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationAmountBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UtilisationAmountBuy { get; set; }= default!;
    
        /// <summary>Contains the utilized sell amount of the Forex contract</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationAmountSell")]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? UtilisationAmountSell { get; set; }= default!;
    
        /// <summary>Contains the buy date when the utilisation has been done on the Forex deal</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationDateBuy")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? UtilisationDateBuy { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("utilisationDateSell")]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? UtilisationDateSell { get; set; }= default!;
    
        /// <summary>Contains the reference to the contracts which have utilized the Forex.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("utilisationReference")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UtilisationReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [System.Text.Json.Serialization.JsonPropertyName("T24_time")]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [System.Text.Json.Serialization.JsonPropertyName("versionNumber")]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("requestParse_time")]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseParse_time")]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The rate applied</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public string? Rate { get; set; }= default!;
    
        /// <summary>Specifies the error code expected in the system which indicates the resrtiction reason for blocking the  transaction completely</summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        public string? ErrorCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]
        public string? ResponseCode { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016