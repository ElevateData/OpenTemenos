//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Payment.PaymentOrders
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IPaymentOrdersService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve a list of Payment Orders</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="currentState">Contains the current state of the transaction</param>
        /// <param name="paymentStatus">Describes the current status of the payment order in the payment system</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="uniqueTransactionReference">Unique transaction reference details</param>
        /// <param name="executionDate">Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</param>
        /// <param name="bulkReference">Contains bulk master reference for the payment.</param>
        /// <param name="paymentSource">Indicates the source from where the payment is originated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersResponse> GetPaymentOrdersAsync(string paymentOrderId = null, string currentState = null, string paymentStatus = null, string paymentOrderProductId = null, string debitAccountId = null, string orderingCustomerId = null, string uniqueTransactionReference = null, string executionDate = null, string bulkReference = null, string paymentSource = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a new Payment Order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> CreatePaymentOrderAsync(PaymentOrder payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a new instant Payment Order</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>InstantPaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstantPaymentOrderResponse> CreateInstantPaymentOrderAsync(InstantPaymentOrder payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reject an unauthorised Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalPaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalPaymentOrderResponse> CancelExternalPaymentOrderAsync(string paymentOrderId, ExternalPaymentOrder payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Authorise a Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> ApprovePaymentOrderAsync(string paymentOrderId, PaymentOrder payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Payment Order for a given ID</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="currentState">Contains the current state of the transaction</param>
        /// <param name="paymentStatus">Describes the current status of the payment order in the payment system</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="debitAccountId">Indicates the debit account number of the payment or transaction.</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="uniqueTransactionReference">Unique transaction reference details</param>
        /// <param name="executionDate">Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</param>
        /// <param name="bulkReference">Contains bulk master reference for the payment.</param>
        /// <param name="paymentSource">Indicates the source from where the payment is originated</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersResponse> GetPaymentOrderAsync(string paymentOrderId, string currentState = null, string paymentStatus = null, string paymentOrderProductId = null, string debitAccountId = null, string orderingCustomerId = null, string uniqueTransactionReference = null, string executionDate = null, string bulkReference = null, string paymentSource = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Amend an unathorised Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> UpdatePaymentOrderAsync(string paymentOrderId, PaymentOrder payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel Payment Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderResponse> DeletePaymentOrderAsync(string paymentOrderId, PaymentOrderDelete payload = null, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the status of an Order</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentSystemId">Payment system id details</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>TrackedPaymentOrdersResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrackedPaymentOrdersResponse> GetTrackedPaymentOrdersAsync(string paymentOrderId = null, string paymentSystemId = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve GPI tracking information</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="paymentMethod">Method chosen to make the payment</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>GpiPaymentTrackingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GpiPaymentTrackingResponse> GetGpiPaymentTrackingAsync(string paymentId = null, string paymentMethod = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the payments eligible for recall</summary>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrdersForRecallResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrdersForRecallResponse> GetPaymentOrdersForRecallAsync(string orderingCustomerId = null, string paymentOrderId = null, string paymentOrderProductId = null, string startDate = null, string endDate = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve the status of recall request</summary>
        /// <param name="paymentOrderId">The unique reference number of payment</param>
        /// <param name="paymentOrderProductId">Indicates the payment order product for which payment is initiated</param>
        /// <param name="orderingCustomerId">Indicates the customer id for the ordering customer</param>
        /// <param name="startDate">Contains the date on which the transaction or payment gets initiated.</param>
        /// <param name="endDate">Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from Transact on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>PaymentOrderRecallStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOrderRecallStatusResponse> GetPaymentOrderRecallStatusAsync(string paymentOrderId = null, string paymentOrderProductId = null, string orderingCustomerId = null, string startDate = null, string endDate = null, int? page_size = null, int? page_start = null, string page_token = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a reference and update GPI tracker status</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GPIPaymentStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GPIPaymentStatusResponse> CreateGPIPaymentStatusAsync(string paymentId, GPIPaymentStatus payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates GPI tracker status</summary>
        /// <param name="paymentId">Indicates the unique reference number of the payment</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>GPIPaymentStatusResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GPIPaymentStatusResponse> UpdateGPIPaymentStatusAsync(string paymentId, GPIPaymentStatus payload, bool? validate_only = null, string credentials = null, string companyId = null, string deviceId = null, string userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayloadHeader 
    {
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Override Override { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit Audit { get; set; }
    
    
    }
    
    /// <summary>PaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrder 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narratives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Narratives> Narratives { get; set; }
    
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalInformations> AdditionalInformations { get; set; }
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemittanceInformations> RemittanceInformations { get; set; }
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses> BeneficiaryAddresses { get; set; }
    
        /// <summary>Indicates the authorised signatories for the payments. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("signatories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Signatories> Signatories { get; set; }
    
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvoiceReferences> InvoiceReferences { get; set; }
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [Newtonsoft.Json.JsonProperty("charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges> Charges { get; set; }
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Overrides> Overrides { get; set; }
    
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [Newtonsoft.Json.JsonProperty("reasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reasons> Reasons { get; set; }
    
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [Newtonsoft.Json.JsonProperty("accountWithInstitutionAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithInstitutionAddresses> AccountWithInstitutionAddresses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderingPostAddrLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderingPostAddrLine> OrderingPostAddrLine { get; set; }
    
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextNames> ContextNames { get; set; }
    
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextValues> ContextValues { get; set; }
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [Newtonsoft.Json.JsonProperty("messageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageType> MessageType { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string PaymentOrderProductId { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string DebitAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string DebitAccountIBAN { get; set; }
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [Newtonsoft.Json.JsonProperty("debitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string DebitCurrency { get; set; }
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [Newtonsoft.Json.JsonProperty("debitValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string CreditAccountId { get; set; }
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CreditAccountIBAN { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderingCustomerId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>The currency of payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string PaymentCurrencyId { get; set; }
    
        /// <summary>This is the payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 19)]
        public double Amount { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("treasuryRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string TreasuryRate { get; set; }
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [Newtonsoft.Json.JsonProperty("forexSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string ForexSpread { get; set; }
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("orderingPaymentFxCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string OrderingPaymentFxCustomerRate { get; set; }
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("orderingPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingPortfolio { get; set; }
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("creditPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string CreditPortfolio { get; set; }
    
        /// <summary>The reference related to the ordering details</summary>
        [Newtonsoft.Json.JsonProperty("orderingReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingReference { get; set; }
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ChargeBearer { get; set; }
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string BeneficiaryId { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBIC { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string AccountWithBankBIC { get; set; }
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBankClearingCode { get; set; }
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankClearingCode { get; set; }
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [Newtonsoft.Json.JsonProperty("clearingChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ClearingChannel { get; set; }
    
        /// <summary>Contains description of the credit account reference</summary>
        [Newtonsoft.Json.JsonProperty("structuredCreditorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredCreditorReference { get; set; }
    
        /// <summary>Creditor country code details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string BeneficiaryCountryCode { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryIBAN { get; set; }
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankIBAN { get; set; }
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [Newtonsoft.Json.JsonProperty("requiredCreditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Purpose { get; set; }
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [Newtonsoft.Json.JsonProperty("structuredCommunicationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string StructuredCommunicationCode { get; set; }
    
        /// <summary>Entity that assigns the identification</summary>
        [Newtonsoft.Json.JsonProperty("structuredIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredIssuer { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string EndToEndReference { get; set; }
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [Newtonsoft.Json.JsonProperty("instructionIdReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InstructionIdReference { get; set; }
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [Newtonsoft.Json.JsonProperty("termsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string TermsAndConditions { get; set; }
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("indicativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string IndicativeRate { get; set; }
    
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string ChargeAccountId { get; set; }
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string ChargeAccountCurrencyId { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [Newtonsoft.Json.JsonProperty("PSDCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PSDCompliant { get; set; }
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [Newtonsoft.Json.JsonProperty("totalDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string TotalDebitAmount { get; set; }
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [Newtonsoft.Json.JsonProperty("localInstrumentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string LocalInstrumentCode { get; set; }
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [Newtonsoft.Json.JsonProperty("recordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string RecordStatus { get; set; }
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [Newtonsoft.Json.JsonProperty("bulkReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string BulkReference { get; set; }
    
        /// <summary>Identifier of the bulk update type record that holds default conditions required for Bulk Master creation. SINGLE and MULTI are two record references used by payment order application for processing payments induced through Bulk Master.</summary>
        [Newtonsoft.Json.JsonProperty("bulkTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BulkTypeId { get; set; }
    
        /// <summary>Refers to view or cancel options.</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Action { get; set; }
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("cancelReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CancelReason { get; set; }
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [Newtonsoft.Json.JsonProperty("cancelRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CancelRemark { get; set; }
    
        /// <summary>Initiation of the payment time details</summary>
        [Newtonsoft.Json.JsonProperty("initiationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InitiationTime { get; set; }
    
        /// <summary>It indicates whether the payment was initiated by bank user, corporate or private client</summary>
        [Newtonsoft.Json.JsonProperty("orderInitiationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string OrderInitiationType { get; set; }
    
        /// <summary>Contains phone number of the beneficiary.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string BeneficiaryPhoneNumber { get; set; }
    
        /// <summary>Contains email id of the beneficary.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryEmailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string BeneficiaryEmailId { get; set; }
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string AccountWithBankCountryId { get; set; }
    
        /// <summary>It indicates the customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("paymentRequestedForexCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string PaymentRequestedForexCustomerRate { get; set; }
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountType { get; set; }
    
        /// <summary>Requested amount for funds authorisation</summary>
        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string RequestedAmount { get; set; }
    
        /// <summary>The currency the amount is requested in.</summary>
        [Newtonsoft.Json.JsonProperty("requestedCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string RequestedCurrency { get; set; }
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [Newtonsoft.Json.JsonProperty("preAuthorizationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string PreAuthorizationReference { get; set; }
    
        /// <summary>Indicates source type to determine base amount. Possible values are BALANCE (base amount of a property), ACTIVITY ( transaction amount against an activity) or PROPERTY (this type is currently not supported)</summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SourceType { get; set; }
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CutOffTime { get; set; }
    
        /// <summary>Time when payment transaction was simulated</summary>
        [Newtonsoft.Json.JsonProperty("simulatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string SimulatedAt { get; set; }
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [Newtonsoft.Json.JsonProperty("simulationChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string SimulationChecked { get; set; }
    
        /// <summary>Captures the AC.LOCKED.EVENTS id if in case the funds is available and reserved.</summary>
        [Newtonsoft.Json.JsonProperty("lockedEventReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LockedEventReference { get; set; }
    
        /// <summary>Contains the payment order product which is referred during simulation from channels.</summary>
        [Newtonsoft.Json.JsonProperty("simulationProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string SimulationProduct { get; set; }
    
        /// <summary>Debtor agent details</summary>
        [Newtonsoft.Json.JsonProperty("debtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string DebtorAgent { get; set; }
    
        /// <summary>Contains the priority code of the payment message</summary>
        [Newtonsoft.Json.JsonProperty("messagePriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string MessagePriority { get; set; }
    
        /// <summary>Identifies the country of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string Country { get; set; }
    
        /// <summary>BIC code of Intermediary Financial institution</summary>
        [Newtonsoft.Json.JsonProperty("intermediaryFiBicCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string IntermediaryFiBicCode { get; set; }
    
        /// <summary>Routing number of Intermediary Financial institution</summary>
        [Newtonsoft.Json.JsonProperty("intermediaryFiRoutingNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string IntermediaryFiRoutingNo { get; set; }
    
        /// <summary>Name or short title of the credit account</summary>
        [Newtonsoft.Json.JsonProperty("creditorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CreditorName { get; set; }
    
        /// <summary>The  FX deal reference number. </summary>
        [Newtonsoft.Json.JsonProperty("forexDealId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string ForexDealId { get; set; }
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("internalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InternalStatus { get; set; }
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [Newtonsoft.Json.JsonProperty("baseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string BaseCurrency { get; set; }
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [Newtonsoft.Json.JsonProperty("submitOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string SubmitOrder { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>The status of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionStatus { get; set; }
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit2 Audit { get; set; }
    
    
    }
    
    /// <summary>PaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderResponseBody 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narratives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Narratives2> Narratives { get; set; }
    
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalInformations2> AdditionalInformations { get; set; }
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemittanceInformations2> RemittanceInformations { get; set; }
    
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryAddresses2> BeneficiaryAddresses { get; set; }
    
        /// <summary>Indicates the authorised signatories for the payments. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("signatories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Signatories2> Signatories { get; set; }
    
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvoiceReferences2> InvoiceReferences { get; set; }
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [Newtonsoft.Json.JsonProperty("charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges2> Charges { get; set; }
    
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Overrides2> Overrides { get; set; }
    
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [Newtonsoft.Json.JsonProperty("reasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reasons2> Reasons { get; set; }
    
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [Newtonsoft.Json.JsonProperty("accountWithInstitutionAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithInstitutionAddresses2> AccountWithInstitutionAddresses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderingPostAddrLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderingPostAddrLine2> OrderingPostAddrLine { get; set; }
    
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextNames2> ContextNames { get; set; }
    
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextValues2> ContextValues { get; set; }
    
        /// <summary>Defines the type of swift messages that are sent or received for a transaction</summary>
        [Newtonsoft.Json.JsonProperty("messageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageType2> MessageType { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string PaymentOrderProductId { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string DebitAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string DebitAccountIBAN { get; set; }
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [Newtonsoft.Json.JsonProperty("debitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string DebitCurrency { get; set; }
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [Newtonsoft.Json.JsonProperty("debitValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }
    
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string CreditAccountId { get; set; }
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CreditAccountIBAN { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderingCustomerId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>The currency of payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string PaymentCurrencyId { get; set; }
    
        /// <summary>This is the payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 19)]
        public double? Amount { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("treasuryRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string TreasuryRate { get; set; }
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [Newtonsoft.Json.JsonProperty("forexSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string ForexSpread { get; set; }
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("orderingPaymentFxCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(29)]
        public string OrderingPaymentFxCustomerRate { get; set; }
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("orderingPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingPortfolio { get; set; }
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("creditPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string CreditPortfolio { get; set; }
    
        /// <summary>The reference related to the ordering details</summary>
        [Newtonsoft.Json.JsonProperty("orderingReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingReference { get; set; }
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ChargeBearer { get; set; }
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string BeneficiaryId { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBIC { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string AccountWithBankBIC { get; set; }
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBankClearingCode { get; set; }
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankClearingCode { get; set; }
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [Newtonsoft.Json.JsonProperty("clearingChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ClearingChannel { get; set; }
    
        /// <summary>Contains description of the credit account reference</summary>
        [Newtonsoft.Json.JsonProperty("structuredCreditorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredCreditorReference { get; set; }
    
        /// <summary>Creditor country code details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string BeneficiaryCountryCode { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryIBAN { get; set; }
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankIBAN { get; set; }
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [Newtonsoft.Json.JsonProperty("requiredCreditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Purpose { get; set; }
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [Newtonsoft.Json.JsonProperty("structuredCommunicationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string StructuredCommunicationCode { get; set; }
    
        /// <summary>Entity that assigns the identification</summary>
        [Newtonsoft.Json.JsonProperty("structuredIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredIssuer { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string EndToEndReference { get; set; }
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [Newtonsoft.Json.JsonProperty("instructionIdReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InstructionIdReference { get; set; }
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [Newtonsoft.Json.JsonProperty("termsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string TermsAndConditions { get; set; }
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("indicativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string IndicativeRate { get; set; }
    
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string ChargeAccountId { get; set; }
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string ChargeAccountCurrencyId { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [Newtonsoft.Json.JsonProperty("PSDCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PSDCompliant { get; set; }
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [Newtonsoft.Json.JsonProperty("totalDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string TotalDebitAmount { get; set; }
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [Newtonsoft.Json.JsonProperty("localInstrumentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string LocalInstrumentCode { get; set; }
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [Newtonsoft.Json.JsonProperty("recordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string RecordStatus { get; set; }
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [Newtonsoft.Json.JsonProperty("bulkReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string BulkReference { get; set; }
    
        /// <summary>Identifier of the bulk update type record that holds default conditions required for Bulk Master creation. SINGLE and MULTI are two record references used by payment order application for processing payments induced through Bulk Master.</summary>
        [Newtonsoft.Json.JsonProperty("bulkTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BulkTypeId { get; set; }
    
        /// <summary>Refers to view or cancel options.</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Action { get; set; }
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("cancelReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CancelReason { get; set; }
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [Newtonsoft.Json.JsonProperty("cancelRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CancelRemark { get; set; }
    
        /// <summary>Initiation of the payment time details</summary>
        [Newtonsoft.Json.JsonProperty("initiationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InitiationTime { get; set; }
    
        /// <summary>It indicates whether the payment was initiated by bank user, corporate or private client</summary>
        [Newtonsoft.Json.JsonProperty("orderInitiationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string OrderInitiationType { get; set; }
    
        /// <summary>Contains phone number of the beneficiary.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string BeneficiaryPhoneNumber { get; set; }
    
        /// <summary>Contains email id of the beneficary.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryEmailId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string BeneficiaryEmailId { get; set; }
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string AccountWithBankCountryId { get; set; }
    
        /// <summary>It indicates the customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("paymentRequestedForexCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(33)]
        public string PaymentRequestedForexCustomerRate { get; set; }
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountType { get; set; }
    
        /// <summary>Requested amount for funds authorisation</summary>
        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string RequestedAmount { get; set; }
    
        /// <summary>The currency the amount is requested in.</summary>
        [Newtonsoft.Json.JsonProperty("requestedCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string RequestedCurrency { get; set; }
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [Newtonsoft.Json.JsonProperty("preAuthorizationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string PreAuthorizationReference { get; set; }
    
        /// <summary>Indicates source type to determine base amount. Possible values are BALANCE (base amount of a property), ACTIVITY ( transaction amount against an activity) or PROPERTY (this type is currently not supported)</summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SourceType { get; set; }
    
        /// <summary>The Cut off time when all executions for the day are consolidated to create a trade</summary>
        [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CutOffTime { get; set; }
    
        /// <summary>Time when payment transaction was simulated</summary>
        [Newtonsoft.Json.JsonProperty("simulatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string SimulatedAt { get; set; }
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [Newtonsoft.Json.JsonProperty("simulationChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string SimulationChecked { get; set; }
    
        /// <summary>Captures the AC.LOCKED.EVENTS id if in case the funds is available and reserved.</summary>
        [Newtonsoft.Json.JsonProperty("lockedEventReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LockedEventReference { get; set; }
    
        /// <summary>Contains the payment order product which is referred during simulation from channels.</summary>
        [Newtonsoft.Json.JsonProperty("simulationProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string SimulationProduct { get; set; }
    
        /// <summary>Debtor agent details</summary>
        [Newtonsoft.Json.JsonProperty("debtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string DebtorAgent { get; set; }
    
        /// <summary>Contains the priority code of the payment message</summary>
        [Newtonsoft.Json.JsonProperty("messagePriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string MessagePriority { get; set; }
    
        /// <summary>Identifies the country of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string Country { get; set; }
    
        /// <summary>BIC code of Intermediary Financial institution</summary>
        [Newtonsoft.Json.JsonProperty("intermediaryFiBicCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string IntermediaryFiBicCode { get; set; }
    
        /// <summary>Routing number of Intermediary Financial institution</summary>
        [Newtonsoft.Json.JsonProperty("intermediaryFiRoutingNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string IntermediaryFiRoutingNo { get; set; }
    
        /// <summary>Name or short title of the credit account</summary>
        [Newtonsoft.Json.JsonProperty("creditorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string CreditorName { get; set; }
    
        /// <summary>The  FX deal reference number. </summary>
        [Newtonsoft.Json.JsonProperty("forexDealId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string ForexDealId { get; set; }
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("internalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InternalStatus { get; set; }
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [Newtonsoft.Json.JsonProperty("baseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string BaseCurrency { get; set; }
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [Newtonsoft.Json.JsonProperty("submitOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string SubmitOrder { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideBody 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails> OverrideDetails { get; set; }
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenErrorResponseBody Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody Override { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails> ErrorDetails { get; set; }
    
        /// <summary>The identifier of error type: </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessScreenErrorResponseBody Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody Override { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails2> ErrorDetails { get; set; }
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemScreenErrorResponseBody Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody Override { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails3> ErrorDetails { get; set; }
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryHeader 
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit4 Audit { get; set; }
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>The total number of records per page</summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }
    
        /// <summary>The record from which the response should be displayed</summary>
        [Newtonsoft.Json.JsonProperty("page_start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_start { get; set; }
    
        /// <summary>The total number of records present</summary>
        [Newtonsoft.Json.JsonProperty("total_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_size { get; set; }
    
        /// <summary>Unique id expected to get as part of response from Transact on every enquiry request</summary>
        [Newtonsoft.Json.JsonProperty("page_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_token { get; set; }
    
    
    }
    
    /// <summary>PaymentOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrdersResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrdersResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessQueryErrorResponseBody Error { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemQueryErrorResponseBody Error { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The actual Transact error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>InstantPaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstantPaymentOrder 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstantPaymentOrderBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstantPaymentOrderBody 
    {
        [Newtonsoft.Json.JsonProperty("benPostSwiftAddr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BenPostSwiftAddr> BenPostSwiftAddr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("benPostAddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BenPostAddressLine> BenPostAddressLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("remittanceInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemittanceInfo> RemittanceInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contextField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextField> ContextField { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contextFieldValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextFieldValue> ContextFieldValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeDetails> ChargeDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeInfo> ChargeInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAmt> ChargeAmt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeCurr> ChargeCurr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAccountAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAccountAmt> ChargeAccountAmt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAcc> ChargeAcc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAccCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAccCurr> ChargeAccCurr { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyDebitAccountId? DebitAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyDebitAccountIBAN? DebitAccountIBAN { get; set; }
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [Newtonsoft.Json.JsonProperty("debitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyDebitCurrency? DebitCurrency { get; set; }
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [Newtonsoft.Json.JsonProperty("debitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyDebitAmount? DebitAmount { get; set; }
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [Newtonsoft.Json.JsonProperty("debitValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyDebitValueDate? DebitValueDate { get; set; }
    
        /// <summary>The currency the amount is requested in.</summary>
        [Newtonsoft.Json.JsonProperty("requestedCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyRequestedCurrency? RequestedCurrency { get; set; }
    
        /// <summary>Requested amount for funds authorisation</summary>
        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyRequestedAmount? RequestedAmount { get; set; }
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAccountType? AccountType { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerName? OrderingCustomerName { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerId? OrderingCustomerId { get; set; }
    
        /// <summary>Debit account customer address details</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOrderingCustomerAddress? OrderingCustomerAddress { get; set; }
    
        /// <summary>Contains the country of the ordering party</summary>
        [Newtonsoft.Json.JsonProperty("orderingPartyCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOrderingPartyCountry? OrderingPartyCountry { get; set; }
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryId? BeneficiaryId { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryName? BeneficiaryName { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryAccountId? BeneficiaryAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryIBAN? BeneficiaryIBAN { get; set; }
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryBIC? BeneficiaryBIC { get; set; }
    
        /// <summary>Identifies the nature of the postal address, like primary, secondary or office address</summary>
        [Newtonsoft.Json.JsonProperty("addressLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAddressLocation? AddressLocation { get; set; }
    
        /// <summary>Contains the fax number of the beneficiary of the payment</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryFaxNumber? BeneficiaryFaxNumber { get; set; }
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryDetail? BeneficiaryDetail { get; set; }
    
        /// <summary>Creditor country code details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryCountryCode? BeneficiaryCountryCode { get; set; }
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryOtherIdType? BeneficiaryOtherIdType { get; set; }
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBeneficiaryOtherId? BeneficiaryOtherId { get; set; }
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankBIC? AccountWithBankBIC { get; set; }
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankIBAN? AccountWithBankIBAN { get; set; }
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankClearingCode? AccountWithBankClearingCode { get; set; }
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAccountWithBankCountryId? AccountWithBankCountryId { get; set; }
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [Newtonsoft.Json.JsonProperty("transactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyTransactionAmount? TransactionAmount { get; set; }
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyPaymentCurrency? PaymentCurrency { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyExecutionDate? ExecutionDate { get; set; }
    
        /// <summary>Contains the balance reservation reference received from channel or an external system.</summary>
        [Newtonsoft.Json.JsonProperty("balanceReservationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyBalanceReservationReference? BalanceReservationReference { get; set; }
    
        /// <summary>Contains the original requested execution date of the payment as received from the initiating channel, indicating when the payment has to be processed by the payment system.</summary>
        [Newtonsoft.Json.JsonProperty("originalRequestedExecutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOriginalRequestedExecutionDate? OriginalRequestedExecutionDate { get; set; }
    
        /// <summary>Contains the transaction date and time returned by the payer's payment system on submission of the payment transaction by the payer after the response to request to pay has triggerred a payment in the payment system</summary>
        [Newtonsoft.Json.JsonProperty("acceptanceDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyAcceptanceDateTime? AcceptanceDateTime { get; set; }
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [Newtonsoft.Json.JsonProperty("submitOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodySubmitOrder? SubmitOrder { get; set; }
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [Newtonsoft.Json.JsonProperty("instructionIdReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyInstructionIdReference? InstructionIdReference { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyEndToEndReference? EndToEndReference { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyPaymentOrderProductId? PaymentOrderProductId { get; set; }
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [Newtonsoft.Json.JsonProperty("PSDCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyPSDCompliant? PSDCompliant { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyCreditValueDate? CreditValueDate { get; set; }
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("orderingPaymentFxCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyOrderingPaymentFxCustomerRate? OrderingPaymentFxCustomerRate { get; set; }
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("indicativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyIndicativeRate? IndicativeRate { get; set; }
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyChargeBearer? ChargeBearer { get; set; }
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [Newtonsoft.Json.JsonProperty("waiveCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyWaiveCharge? WaiveCharge { get; set; }
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [Newtonsoft.Json.JsonProperty("totalDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyTotalDebitAmount? TotalDebitAmount { get; set; }
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [Newtonsoft.Json.JsonProperty("instructedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyInstructedAmount? InstructedAmount { get; set; }
    
        /// <summary>Contains the actual debitor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyUltimateDebtor? UltimateDebtor { get; set; }
    
        /// <summary>Contains the actual creditor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string UltimateCreditor { get; set; }
    
        /// <summary>Address of the creditor or beneficiary account</summary>
        [Newtonsoft.Json.JsonProperty("creditorAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyCreditorAddress? CreditorAddress { get; set; }
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyPurpose? Purpose { get; set; }
    
        /// <summary>Contains the proprietary underlying reason for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("transactionPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyTransactionPurpose? TransactionPurpose { get; set; }
    
        /// <summary>Contains description of the credit account reference</summary>
        [Newtonsoft.Json.JsonProperty("structuredCreditorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyStructuredCreditorReference? StructuredCreditorReference { get; set; }
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [Newtonsoft.Json.JsonProperty("structuredCommunicationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyStructuredCommunicationCode? StructuredCommunicationCode { get; set; }
    
        /// <summary>Entity that assigns the identification</summary>
        [Newtonsoft.Json.JsonProperty("structuredIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyStructuredIssuer? StructuredIssuer { get; set; }
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyNarrative? Narrative { get; set; }
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [Newtonsoft.Json.JsonProperty("preAuthorizationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderBodyPreAuthorizationReference? PreAuthorizationReference { get; set; }
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [Newtonsoft.Json.JsonProperty("baseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string BaseCurrency { get; set; }
    
    
    }
    
    /// <summary>InstantPaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstantPaymentOrderResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstantPaymentOrderResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstantPaymentOrderResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("benPostSwiftAddr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BenPostSwiftAddr2> BenPostSwiftAddr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("benPostAddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BenPostAddressLine2> BenPostAddressLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("remittanceInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemittanceInfo2> RemittanceInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contextField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextField2> ContextField { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contextFieldValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextFieldValue2> ContextFieldValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeDetails2> ChargeDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeInfo2> ChargeInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAmt2> ChargeAmt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeCurr2> ChargeCurr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAccountAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAccountAmt2> ChargeAccountAmt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAcc2> ChargeAcc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeAccCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeAccCurr2> ChargeAccCurr { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAccountId? DebitAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAccountIBAN? DebitAccountIBAN { get; set; }
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [Newtonsoft.Json.JsonProperty("debitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitCurrency? DebitCurrency { get; set; }
    
        /// <summary>Amount to be debited in a payment transaction</summary>
        [Newtonsoft.Json.JsonProperty("debitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitAmount? DebitAmount { get; set; }
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [Newtonsoft.Json.JsonProperty("debitValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyDebitValueDate? DebitValueDate { get; set; }
    
        /// <summary>The currency the amount is requested in.</summary>
        [Newtonsoft.Json.JsonProperty("requestedCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyRequestedCurrency? RequestedCurrency { get; set; }
    
        /// <summary>Requested amount for funds authorisation</summary>
        [Newtonsoft.Json.JsonProperty("requestedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyRequestedAmount? RequestedAmount { get; set; }
    
        /// <summary>Groups the products based on their type, eg, Checking, Savings, CD etc,.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountType? AccountType { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerName? OrderingCustomerName { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerId? OrderingCustomerId { get; set; }
    
        /// <summary>Debit account customer address details</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingCustomerAddress? OrderingCustomerAddress { get; set; }
    
        /// <summary>Contains the country of the ordering party</summary>
        [Newtonsoft.Json.JsonProperty("orderingPartyCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingPartyCountry? OrderingPartyCountry { get; set; }
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryId? BeneficiaryId { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryName? BeneficiaryName { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryAccountId? BeneficiaryAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryIBAN? BeneficiaryIBAN { get; set; }
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryBIC? BeneficiaryBIC { get; set; }
    
        /// <summary>Identifies the nature of the postal address, like primary, secondary or office address</summary>
        [Newtonsoft.Json.JsonProperty("addressLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAddressLocation? AddressLocation { get; set; }
    
        /// <summary>Contains the fax number of the beneficiary of the payment</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryFaxNumber? BeneficiaryFaxNumber { get; set; }
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryDetail? BeneficiaryDetail { get; set; }
    
        /// <summary>Creditor country code details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryCountryCode? BeneficiaryCountryCode { get; set; }
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryOtherIdType? BeneficiaryOtherIdType { get; set; }
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBeneficiaryOtherId? BeneficiaryOtherId { get; set; }
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankBIC? AccountWithBankBIC { get; set; }
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankIBAN? AccountWithBankIBAN { get; set; }
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankClearingCode? AccountWithBankClearingCode { get; set; }
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAccountWithBankCountryId? AccountWithBankCountryId { get; set; }
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [Newtonsoft.Json.JsonProperty("transactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyTransactionAmount? TransactionAmount { get; set; }
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyPaymentCurrency? PaymentCurrency { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyExecutionDate? ExecutionDate { get; set; }
    
        /// <summary>Contains the balance reservation reference received from channel or an external system.</summary>
        [Newtonsoft.Json.JsonProperty("balanceReservationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyBalanceReservationReference? BalanceReservationReference { get; set; }
    
        /// <summary>Contains the original requested execution date of the payment as received from the initiating channel, indicating when the payment has to be processed by the payment system.</summary>
        [Newtonsoft.Json.JsonProperty("originalRequestedExecutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOriginalRequestedExecutionDate? OriginalRequestedExecutionDate { get; set; }
    
        /// <summary>Contains the transaction date and time returned by the payer's payment system on submission of the payment transaction by the payer after the response to request to pay has triggerred a payment in the payment system</summary>
        [Newtonsoft.Json.JsonProperty("acceptanceDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyAcceptanceDateTime? AcceptanceDateTime { get; set; }
    
        /// <summary>Contains the options yes or no to submit a payment order for execution.</summary>
        [Newtonsoft.Json.JsonProperty("submitOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodySubmitOrder? SubmitOrder { get; set; }
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [Newtonsoft.Json.JsonProperty("instructionIdReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyInstructionIdReference? InstructionIdReference { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyEndToEndReference? EndToEndReference { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyPaymentOrderProductId? PaymentOrderProductId { get; set; }
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [Newtonsoft.Json.JsonProperty("PSDCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyPSDCompliant? PSDCompliant { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyCreditValueDate? CreditValueDate { get; set; }
    
        /// <summary>The customer rate for the conversion between payment currency and ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("orderingPaymentFxCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyOrderingPaymentFxCustomerRate? OrderingPaymentFxCustomerRate { get; set; }
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("indicativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyIndicativeRate? IndicativeRate { get; set; }
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyChargeBearer? ChargeBearer { get; set; }
    
        /// <summary>Indicates if the charges are to be waived for the instruction</summary>
        [Newtonsoft.Json.JsonProperty("waiveCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyWaiveCharge? WaiveCharge { get; set; }
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [Newtonsoft.Json.JsonProperty("totalDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyTotalDebitAmount? TotalDebitAmount { get; set; }
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [Newtonsoft.Json.JsonProperty("instructedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyInstructedAmount? InstructedAmount { get; set; }
    
        /// <summary>Contains the actual debitor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyUltimateDebtor? UltimateDebtor { get; set; }
    
        /// <summary>Contains the actual creditor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string UltimateCreditor { get; set; }
    
        /// <summary>Address of the creditor or beneficiary account</summary>
        [Newtonsoft.Json.JsonProperty("creditorAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyCreditorAddress? CreditorAddress { get; set; }
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyPurpose? Purpose { get; set; }
    
        /// <summary>Contains the proprietary underlying reason for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("transactionPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyTransactionPurpose? TransactionPurpose { get; set; }
    
        /// <summary>Contains description of the credit account reference</summary>
        [Newtonsoft.Json.JsonProperty("structuredCreditorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredCreditorReference? StructuredCreditorReference { get; set; }
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [Newtonsoft.Json.JsonProperty("structuredCommunicationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredCommunicationCode? StructuredCommunicationCode { get; set; }
    
        /// <summary>Entity that assigns the identification</summary>
        [Newtonsoft.Json.JsonProperty("structuredIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyStructuredIssuer? StructuredIssuer { get; set; }
    
        /// <summary>List of transfer type has been mentioned locally in a record</summary>
        [Newtonsoft.Json.JsonProperty("localInstrumentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyLocalInstrumentCode? LocalInstrumentCode { get; set; }
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyNarrative? Narrative { get; set; }
    
        /// <summary>Indicates if simulation is performed for the payment order</summary>
        [Newtonsoft.Json.JsonProperty("simulationChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodySimulationChecked? SimulationChecked { get; set; }
    
        /// <summary>Contains the pre authorization reference for manually authorized funds.</summary>
        [Newtonsoft.Json.JsonProperty("preAuthorizationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstantPaymentOrderResponseBodyPreAuthorizationReference? PreAuthorizationReference { get; set; }
    
        /// <summary>Contains the currency of the arrangement which linked to the package or bundle</summary>
        [Newtonsoft.Json.JsonProperty("baseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string BaseCurrency { get; set; }
    
    
    }
    
    /// <summary>ExternalPaymentOrder</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalPaymentOrder 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalPaymentOrderBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalPaymentOrderBody 
    {
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("internalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InternalStatus { get; set; }
    
        /// <summary>The reason for the cancellation</summary>
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CancellationReason { get; set; }
    
        /// <summary>General comments / notes.</summary>
        [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Remarks { get; set; }
    
        /// <summary>Initiator details of the payment</summary>
        [Newtonsoft.Json.JsonProperty("initiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Initiator { get; set; }
    
    
    }
    
    /// <summary>ExternalPaymentOrderResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalPaymentOrderResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalPaymentOrderResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalPaymentOrderResponseBody 
    {
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("internalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string InternalStatus { get; set; }
    
        /// <summary>The reason for the cancellation</summary>
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CancellationReason { get; set; }
    
        /// <summary>General comments / notes.</summary>
        [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Remarks { get; set; }
    
        /// <summary>Initiator details of the payment</summary>
        [Newtonsoft.Json.JsonProperty("initiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Initiator { get; set; }
    
    
    }
    
    /// <summary>PaymentOrderDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderDelete 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader Header { get; set; }
    
    
    }
    
    /// <summary>TrackedPaymentOrdersResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackedPaymentOrdersResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackedPaymentOrdersResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackedPaymentOrdersResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>GpiPaymentTrackingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GpiPaymentTrackingResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GpiPaymentTrackingResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GpiPaymentTrackingResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>PaymentOrdersForRecallResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrdersForRecallResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrdersForRecallResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrdersForRecallResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>PaymentOrderRecallStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderRecallStatusResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderRecallStatusResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderRecallStatusResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    /// <summary>GPIPaymentStatus</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GPIPaymentStatus 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPIPaymentStatusBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GPIPaymentStatusBody 
    {
        /// <summary>Unique transaction reference details for payments</summary>
        [Newtonsoft.Json.JsonProperty("UETRId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string UETRId { get; set; }
    
        /// <summary>Payment reference details</summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PaymentReference { get; set; }
    
        /// <summary>User requested message details</summary>
        [Newtonsoft.Json.JsonProperty("requestMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string RequestMessage { get; set; }
    
        /// <summary>Message  from bank details</summary>
        [Newtonsoft.Json.JsonProperty("responseMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ResponseMessage { get; set; }
    
    
    }
    
    /// <summary>GPIPaymentStatusResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GPIPaymentStatusResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader Header { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPIPaymentStatusResponseBody Body { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GPIPaymentStatusResponseBody 
    {
        /// <summary>Unique transaction reference details for payments</summary>
        [Newtonsoft.Json.JsonProperty("UETRId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string UETRId { get; set; }
    
        /// <summary>Payment reference details</summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PaymentReference { get; set; }
    
        /// <summary>User requested message details</summary>
        [Newtonsoft.Json.JsonProperty("requestMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string RequestMessage { get; set; }
    
        /// <summary>Message  from bank details</summary>
        [Newtonsoft.Json.JsonProperty("responseMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ResponseMessage { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Override 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails2> OverrideDetails { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Narratives 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Narrative { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInformations 
    {
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string AdditionalInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemittanceInformations 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string RemittanceInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryAddresses 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Signatories 
    {
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("signatory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Signatory { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceReferences 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InvoiceReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Charges 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChargeType { get; set; }
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [Newtonsoft.Json.JsonProperty("chargeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChargeName { get; set; }
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [Newtonsoft.Json.JsonProperty("chargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string ChargeCurrency { get; set; }
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 19)]
        public double? ChargeAmount { get; set; }
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string ChargeAccountCurrencyAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Overrides 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Override { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Reasons 
    {
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Reason { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithInstitutionAddresses 
    {
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [Newtonsoft.Json.JsonProperty("accountWithInstitutionAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AccountWithInstitutionAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderingPostAddrLine 
    {
        /// <summary>Debtor address details</summary>
        [Newtonsoft.Json.JsonProperty("debtorAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string DebtorAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextNames 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string ContextName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextValues 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string ContextValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageType 
    {
        /// <summary>Indicates the supported message type to be received from the clearing house or the direct participant.</summary>
        [Newtonsoft.Json.JsonProperty("incomingMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string IncomingMessageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionNumber { get; set; }
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Narratives2 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Narrative { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInformations2 
    {
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string AdditionalInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemittanceInformations2 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string RemittanceInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryAddresses2 
    {
        /// <summary>The address of the Beneficiary if the customer number of the Beneficiary is not known</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Signatories2 
    {
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("signatory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Signatory { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceReferences2 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InvoiceReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Charges2 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChargeType { get; set; }
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [Newtonsoft.Json.JsonProperty("chargeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChargeName { get; set; }
    
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [Newtonsoft.Json.JsonProperty("chargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string ChargeCurrency { get; set; }
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 19)]
        public double? ChargeAmount { get; set; }
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string ChargeAccountCurrencyAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Overrides2 
    {
        /// <summary>The override message is captured  that was generated at the time of commitment of the transaction to the database.</summary>
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Override { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Reasons2 
    {
        /// <summary>Contains the reason for the creation of the Mandate</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string Reason { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithInstitutionAddresses2 
    {
        /// <summary>Contains the additional address lines of the account with institution.</summary>
        [Newtonsoft.Json.JsonProperty("accountWithInstitutionAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AccountWithInstitutionAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderingPostAddrLine2 
    {
        /// <summary>Debtor address details</summary>
        [Newtonsoft.Json.JsonProperty("debtorAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string DebtorAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextNames2 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string ContextName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextValues2 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string ContextValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageType2 
    {
        /// <summary>Indicates the supported message type to be received from the clearing house or the direct participant.</summary>
        [Newtonsoft.Json.JsonProperty("incomingMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string IncomingMessageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionNumber { get; set; }
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The usable options for the override.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }
    
        /// <summary>The type of the override.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The actual Transact error message </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The actual Transact error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by Transact</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionNumber { get; set; }
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Sum of all the debit transactions</summary>
        [Newtonsoft.Json.JsonProperty("debits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Debits> Debits { get; set; }
    
        /// <summary>Sum of all the credit transactions</summary>
        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Credits> Credits { get; set; }
    
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narratives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Narratives3> Narratives { get; set; }
    
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalInformations3> AdditionalInformations { get; set; }
    
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemittanceInformations3> RemittanceInformations { get; set; }
    
        /// <summary>Beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Beneficiaries> Beneficiaries { get; set; }
    
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvoiceReferences3> InvoiceReferences { get; set; }
    
        /// <summary>Defines the charges collected for a transaction</summary>
        [Newtonsoft.Json.JsonProperty("charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges3> Charges { get; set; }
    
        /// <summary>The unique reference number of payment</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderId { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderProductId { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderingCustomerId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>The currency of payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string PaymentCurrencyId { get; set; }
    
        /// <summary>This is the payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 19)]
        public double? Amount { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExecutionDate { get; set; }
    
        /// <summary>The Treasury rate for the conversion between payment currency and the ordering currency</summary>
        [Newtonsoft.Json.JsonProperty("treasuryRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string TreasuryRate { get; set; }
    
        /// <summary>The spread that is applied to the published internal exchange rates to derive the final exchange rate or the customer rate for the transaction for currency conversion between ordering currency and payment currency</summary>
        [Newtonsoft.Json.JsonProperty("forexSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string ForexSpread { get; set; }
    
        /// <summary>The exchange rate that is actually applied for currency conversion between ordering currency and payment currency in case of transactions involving FX conversion. </summary>
        [Newtonsoft.Json.JsonProperty("forexCustomerRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string ForexCustomerRate { get; set; }
    
        /// <summary>Indicates the portfolio id for the debit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("orderingPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingPortfolio { get; set; }
    
        /// <summary>Indicates the portfolio id for the credit side if the account belongs to a specific portfolio</summary>
        [Newtonsoft.Json.JsonProperty("creditPortfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string CreditPortfolio { get; set; }
    
        /// <summary>The reference related to the ordering details</summary>
        [Newtonsoft.Json.JsonProperty("orderingReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string OrderingReference { get; set; }
    
        /// <summary>Bearer of the charges of the order. For example: BEN(All transaction charges are to be borne by the beneficiary customer.), OUR(All transaction charges are to be borne by the ordering customer.), SHA(Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("chargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ChargeBearer { get; set; }
    
        /// <summary>This is the BIC code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public string AccountWithBankBIC { get; set; }
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBankClearingCode { get; set; }
    
        /// <summary>This is the national clearing code or sort code of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankClearingCode { get; set; }
    
        /// <summary>Indicates the clearing channel for the payment in the ISO format of the Clearing System Identifiers</summary>
        [Newtonsoft.Json.JsonProperty("clearingChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ClearingChannel { get; set; }
    
        /// <summary>Contains description of the credit account reference</summary>
        [Newtonsoft.Json.JsonProperty("structuredCreditorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredCreditorReference { get; set; }
    
        /// <summary>The authorised signatories for the payments can be specified here. More applicable in case of corporate payments where multiple signatories are required to sign a payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("signatory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Signatory { get; set; }
    
        /// <summary>Purpose identifier of the payment or transaction, for SEPA payments in general.</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Purpose { get; set; }
    
        /// <summary>Creditor reference in a coded form i.e - RADM (RemittanceAdviceMessage) - RPIN (RelatedPaymentInstruction) - FXDR (ForeignExchangeDealReference) - DISP (DispatchAdvice) - PUOR (PurchaseOrder) - SCOR (StructuredCommunicationReference)</summary>
        [Newtonsoft.Json.JsonProperty("structuredCommunicationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string StructuredCommunicationCode { get; set; }
    
        /// <summary>Entity that assigns the identification</summary>
        [Newtonsoft.Json.JsonProperty("structuredIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string StructuredIssuer { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string EndToEndReference { get; set; }
    
        /// <summary>Indicates the SEPA purpose of the SEPA Payment</summary>
        [Newtonsoft.Json.JsonProperty("instructionIdReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InstructionIdReference { get; set; }
    
        /// <summary>Specifies the terms and conditions in the text format for the payment instruction, if any.</summary>
        [Newtonsoft.Json.JsonProperty("termsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string TermsAndConditions { get; set; }
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [Newtonsoft.Json.JsonProperty("paymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentStatus { get; set; }
    
        /// <summary>This indicates the current status of payment order</summary>
        [Newtonsoft.Json.JsonProperty("currentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string CurrentStatus { get; set; }
    
        /// <summary>This indicates a full description of payment purpose code. i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("internalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string InternalStatus { get; set; }
    
        /// <summary>The system application identifier that could be used as entry reference or used as prefix in unique transaction identifiers</summary>
        [Newtonsoft.Json.JsonProperty("systemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string SystemId { get; set; }
    
        /// <summary>The indicative rate at the time of submitting a payment initiation request. Actual rate with which the payment will be processed will be calculated/ fetched during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("indicativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string IndicativeRate { get; set; }
    
        /// <summary>Defines whether the transaction is PSD (Payment Services Directive) compliant or not.</summary>
        [Newtonsoft.Json.JsonProperty("PSDCompliant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PSDCompliant { get; set; }
    
        /// <summary>This field to store the GPI status as received in gpi confirmation tracker</summary>
        [Newtonsoft.Json.JsonProperty("GPIStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string GPIStatus { get; set; }
    
        /// <summary>Field store the date and time when the credit confirmation received</summary>
        [Newtonsoft.Json.JsonProperty("GPICreditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? GPICreditValueDate { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>Current number of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string VersionNumber { get; set; }
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [Newtonsoft.Json.JsonProperty("rejectReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string RejectReasonCode { get; set; }
    
        /// <summary>Contains bulk master reference for the payment.</summary>
        [Newtonsoft.Json.JsonProperty("bulkReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(125)]
        public string BulkReference { get; set; }
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [Newtonsoft.Json.JsonProperty("recordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string RecordStatus { get; set; }
    
        /// <summary>Contains the reason for which the payment is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("cancelReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CancelReason { get; set; }
    
        /// <summary>Contains the remarks given for cancellation.</summary>
        [Newtonsoft.Json.JsonProperty("cancelRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CancelRemark { get; set; }
    
        /// <summary>Indicates the source from where the payment is originated</summary>
        [Newtonsoft.Json.JsonProperty("paymentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PaymentSource { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BenPostSwiftAddr 
    {
        /// <summary>Address of the beneficiary which will be included as part of outgoing payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySWIFTAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BenPostSwiftAddrBeneficiarySWIFTAddress? BeneficiarySWIFTAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BenPostAddressLine 
    {
        /// <summary>Line 1 of address of beneficiary to whom the payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BenPostAddressLineBeneficiaryAddressLine1? BeneficiaryAddressLine1 { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemittanceInfo 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemittanceInformation? RemittanceInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextField 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContextFieldContextName? ContextName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextFieldValue 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContextFieldValueContextValue? ContextValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeDetails 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeDetailsChargeType? ChargeType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeInfo 
    {
        /// <summary>The description of the charge to be taken for payment</summary>
        [Newtonsoft.Json.JsonProperty("chargeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeInfoChargeName? ChargeName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAmt 
    {
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAmtChargeAmount? ChargeAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeCurr 
    {
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [Newtonsoft.Json.JsonProperty("chargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeCurrency? ChargeCurrency { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAccountAmt 
    {
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAccountAmtChargeAccountCurrencyAmount? ChargeAccountCurrencyAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAcc 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAccountId? ChargeAccountId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAccCurr 
    {
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAccCurrChargeAccountCurrencyId? ChargeAccountCurrencyId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account")]
        Debit_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAccountIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account IBAN")]
        Debit_Account_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Currency")]
        Debit_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Amount")]
        Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyDebitValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Value Date")]
        Debit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyRequestedCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Currency")]
        Requested_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyRequestedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Amount")]
        Requested_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Account Type")]
        Account_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Name")]
        Ordering_Customer_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Id")]
        Ordering_Customer_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingCustomerAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Address")]
        Ordering_Customer_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingPartyCountry
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Party Country")]
        Ordering_Party_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Id")]
        Beneficiary_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Name")]
        Beneficiary_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Account Id")]
        Beneficiary_Account_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary IBAN")]
        Beneficiary_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary BIC")]
        Beneficiary_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAddressLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Address Type")]
        Beneficiary_Address_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryFaxNumber
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Fax Detail")]
        Beneficiary_Country_Fax_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryDetail
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Other Detail")]
        Beneficiary_Country_Other_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryCountryCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Code")]
        Beneficiary_Country_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryOtherIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID Type")]
        Beneficiary_Other_ID_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBeneficiaryOtherId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID")]
        Beneficiary_Other_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent BIC")]
        Creditor_Agent_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Identifier")]
        Creditor_Agent_Identifier = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankClearingCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent National Code")]
        Creditor_Agent_National_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAccountWithBankCountryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Country")]
        Creditor_Agent_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyTransactionAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Amount")]
        Payment_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyPaymentCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Currency")]
        Payment_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Execution Date")]
        Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyBalanceReservationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Locked Event ID")]
        Locked_Event_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOriginalRequestedExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Original Req Execution Date")]
        Original_Req_Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyAcceptanceDateTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Acceptance Date Time")]
        Acceptance_Date_Time = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodySubmitOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submit Order")]
        Submit_Order = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyInstructionIdReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instruction Identification")]
        Instruction_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyEndToEndReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"End to End Identification")]
        End_to_End_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyPaymentOrderProductId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Order Product Id")]
        Payment_Order_Product_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyPSDCompliant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PSD Compliant")]
        PSD_Compliant = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyCreditValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Value Date")]
        Credit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyOrderingPaymentFxCustomerRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Payment Fx Cust Rate")]
        Ordering_Payment_Fx_Cust_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyIndicativeRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Indicative Rate")]
        Indicative_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyChargeBearer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Bearer")]
        Charge_Bearer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyWaiveCharge
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waive Charge")]
        Waive_Charge = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyTotalDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Total Debit Amount")]
        Total_Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyInstructedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instructed Amount")]
        Instructed_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyUltimateDebtor
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultimateDebtor")]
        UltimateDebtor = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyCreditorAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Address")]
        Creditor_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purpose")]
        Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyTransactionPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Transaction Purpose")]
        Transaction_Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredCreditorReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"structured Creditor Reference")]
        Structured_Creditor_Reference = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredCommunicationCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Communication Code")]
        Structured_Communication_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyStructuredIssuer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Issuer")]
        Structured_Issuer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Narrative")]
        Narrative = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderBodyPreAuthorizationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Authorization Number")]
        PreAuthorization_Number = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BenPostSwiftAddr2 
    {
        /// <summary>Address of the beneficiary which will be included as part of outgoing payment instruction</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySWIFTAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BenPostSwiftAddr2BeneficiarySWIFTAddress? BeneficiarySWIFTAddress { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BenPostAddressLine2 
    {
        /// <summary>Line 1 of address of beneficiary to whom the payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAddressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BenPostAddressLine2BeneficiaryAddressLine1? BeneficiaryAddressLine1 { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemittanceInfo2 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemittanceInfo2RemittanceInformation? RemittanceInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextField2 
    {
        /// <summary>Field name returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContextField2ContextName? ContextName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextFieldValue2 
    {
        /// <summary>Field value returned by the payment engine (TPH) for information or further processing.</summary>
        [Newtonsoft.Json.JsonProperty("contextValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContextFieldValue2ContextValue? ContextValue { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeDetails2 
    {
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeDetails2ChargeType? ChargeType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeInfo2 
    {
        /// <summary>The description of the charge to be taken for payment</summary>
        [Newtonsoft.Json.JsonProperty("chargeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeInfo2ChargeName? ChargeName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAmt2 
    {
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAmt2ChargeAmount? ChargeAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeCurr2 
    {
        /// <summary>Indicates the currency code of the charge account from where the fee is deducted</summary>
        [Newtonsoft.Json.JsonProperty("chargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeCurr2ChargeCurrency? ChargeCurrency { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAccountAmt2 
    {
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAccountAmt2ChargeAccountCurrencyAmount? ChargeAccountCurrencyAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAcc2 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAcc2ChargeAccountId? ChargeAccountId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeAccCurr2 
    {
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargeAccCurr2ChargeAccountCurrencyId? ChargeAccountCurrencyId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account")]
        Debit_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAccountIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Account IBAN")]
        Debit_Account_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Currency")]
        Debit_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Amount")]
        Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyDebitValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Debit Value Date")]
        Debit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyRequestedCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Currency")]
        Requested_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyRequestedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Requested Amount")]
        Requested_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Account Type")]
        Account_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Name")]
        Ordering_Customer_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Id")]
        Ordering_Customer_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingCustomerAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Customer Address")]
        Ordering_Customer_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingPartyCountry
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Party Country")]
        Ordering_Party_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Id")]
        Beneficiary_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Name")]
        Beneficiary_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Account Id")]
        Beneficiary_Account_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary IBAN")]
        Beneficiary_IBAN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary BIC")]
        Beneficiary_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAddressLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Address Type")]
        Beneficiary_Address_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryFaxNumber
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Fax Detail")]
        Beneficiary_Country_Fax_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryDetail
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Other Detail")]
        Beneficiary_Country_Other_Detail = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryCountryCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Country Code")]
        Beneficiary_Country_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryOtherIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID Type")]
        Beneficiary_Other_ID_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBeneficiaryOtherId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Other ID")]
        Beneficiary_Other_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankBIC
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent BIC")]
        Creditor_Agent_BIC = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankIBAN
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Identifier")]
        Creditor_Agent_Identifier = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankClearingCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent National Code")]
        Creditor_Agent_National_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAccountWithBankCountryId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Agent Country")]
        Creditor_Agent_Country = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTransactionAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Amount")]
        Payment_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPaymentCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Currency")]
        Payment_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Execution Date")]
        Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyBalanceReservationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Locked Event ID")]
        Locked_Event_ID = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOriginalRequestedExecutionDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Original Req Execution Date")]
        Original_Req_Execution_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyAcceptanceDateTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Acceptance Date Time")]
        Acceptance_Date_Time = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodySubmitOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submit Order")]
        Submit_Order = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyInstructionIdReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instruction Identification")]
        Instruction_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyEndToEndReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"End to End Identification")]
        End_to_End_Identification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPaymentOrderProductId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Order Product Id")]
        Payment_Order_Product_Id = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPSDCompliant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PSD Compliant")]
        PSD_Compliant = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyCreditValueDate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Value Date")]
        Credit_Value_Date = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyOrderingPaymentFxCustomerRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ordering Payment Fx Cust Rate")]
        Ordering_Payment_Fx_Cust_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyIndicativeRate
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Indicative Rate")]
        Indicative_Rate = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyChargeBearer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Bearer")]
        Charge_Bearer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyWaiveCharge
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waive Charge")]
        Waive_Charge = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTotalDebitAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Total Debit Amount")]
        Total_Debit_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyInstructedAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Instructed Amount")]
        Instructed_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyUltimateDebtor
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultimateDebtor")]
        UltimateDebtor = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyCreditorAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creditor Address")]
        Creditor_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purpose")]
        Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyTransactionPurpose
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Transaction Purpose")]
        Transaction_Purpose = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredCreditorReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"structured Creditor Reference")]
        Structured_Creditor_Reference = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredCommunicationCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Communication Code")]
        Structured_Communication_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyStructuredIssuer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Structured Issuer")]
        Structured_Issuer = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyLocalInstrumentCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"local Instrument Code")]
        Local_Instrument_Code = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyNarrative
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Narrative")]
        Narrative = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodySimulationChecked
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Simulation Checked")]
        Simulation_Checked = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstantPaymentOrderResponseBodyPreAuthorizationReference
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Authorization Number")]
        PreAuthorization_Number = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The unique reference number of payment</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderId { get; set; }
    
        /// <summary>Payment system id details</summary>
        [Newtonsoft.Json.JsonProperty("paymentSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentSystemId { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderProductId { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ExecutionDate { get; set; }
    
        /// <summary> Identifier of the debitAccounts.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string DebitAccount { get; set; }
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentCurrency { get; set; }
    
        /// <summary>Indicates the payment amount for the defined term, amount and payment frequency. It will include principal, charge and interest</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentAmount { get; set; }
    
        /// <summary>Bank for the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBank { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>Contains the current state of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CurrentState { get; set; }
    
        /// <summary>Describes the current status of the payment order in the payment system</summary>
        [Newtonsoft.Json.JsonProperty("paymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentStatus { get; set; }
    
        /// <summary>Indicates the recall status of the payment for which the recall has been initiated</summary>
        [Newtonsoft.Json.JsonProperty("recallStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string RecallStatus { get; set; }
    
        /// <summary>Identifies the type of the order. Possible values are Single, Ifdone, Revol, oco. Single order - only one order item may be input. If done order -  If one order gets executed, the other order is also executed immediately. Revolving order -  based on the condition specified, it will wait for both the deals to be executed simultaneously. OCO -If one order gets executed, then the other order gets cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous3 
    {
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionDetails> TransactionDetails { get; set; }
    
        /// <summary>Unique transaction reference details</summary>
        [Newtonsoft.Json.JsonProperty("uniqueTransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueTransactionReference { get; set; }
    
        /// <summary>Payment system id details</summary>
        [Newtonsoft.Json.JsonProperty("paymentSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentSystemId { get; set; }
    
        /// <summary>Contains the transaction amount. This is based on the currency, either local or foreign currency</summary>
        [Newtonsoft.Json.JsonProperty("transactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionAmount { get; set; }
    
        /// <summary>Indicates the end to end reference for the payment. This field can be provided by the person who instructs the payment and this flows through the lifecycle of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("endToEndReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndToEndReference { get; set; }
    
        /// <summary>Indicates the direction of payment i.e. incoming, outgoing, book or redirect</summary>
        [Newtonsoft.Json.JsonProperty("paymentDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentDirection { get; set; }
    
        /// <summary>Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyId { get; set; }
    
        /// <summary>Specifies the amount which is allocated or instructed for the account reference included in the selection for a specific transaction.</summary>
        [Newtonsoft.Json.JsonProperty("instructedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstructedAmount { get; set; }
    
        /// <summary>Instructed currency code details</summary>
        [Newtonsoft.Json.JsonProperty("instructedCurrencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstructedCurrencyCode { get; set; }
    
        /// <summary>Payment completion time details</summary>
        [Newtonsoft.Json.JsonProperty("completionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompletionTime { get; set; }
    
        /// <summary>Initiation of the payment time details</summary>
        [Newtonsoft.Json.JsonProperty("initiationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitiationTime { get; set; }
    
        /// <summary>Confirmed amount details</summary>
        [Newtonsoft.Json.JsonProperty("confirmedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfirmedAmount { get; set; }
    
        /// <summary>Confirmed amount currency details</summary>
        [Newtonsoft.Json.JsonProperty("confirmedAmountCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfirmedAmountCurrency { get; set; }
    
        /// <summary>Total amount details of payment inclusive of charges</summary>
        [Newtonsoft.Json.JsonProperty("finalChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinalChargeAmount { get; set; }
    
        /// <summary>Transaction event type details</summary>
        [Newtonsoft.Json.JsonProperty("transactionEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionEventType { get; set; }
    
        /// <summary>Debtor agent details</summary>
        [Newtonsoft.Json.JsonProperty("debtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebtorAgent { get; set; }
    
        /// <summary>Payment total duration details</summary>
        [Newtonsoft.Json.JsonProperty("totalDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDuration { get; set; }
    
        /// <summary>Overall status code details of the payment</summary>
        [Newtonsoft.Json.JsonProperty("overallStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallStatusCode { get; set; }
    
        /// <summary>Debtor company name details</summary>
        [Newtonsoft.Json.JsonProperty("partyCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyCompanyName { get; set; }
    
        /// <summary>Debtor company BIC details</summary>
        [Newtonsoft.Json.JsonProperty("partyCompanyBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyCompanyBIC { get; set; }
    
        /// <summary>Debtor company flag details</summary>
        [Newtonsoft.Json.JsonProperty("partyCompanyFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyCompanyFlag { get; set; }
    
        /// <summary>Debtor country name details</summary>
        [Newtonsoft.Json.JsonProperty("partyCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyCountryName { get; set; }
    
        /// <summary>Debtor creation time details of the payment</summary>
        [Newtonsoft.Json.JsonProperty("partyCreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyCreationTime { get; set; }
    
        /// <summary>Debtor payment reference details of outgoing</summary>
        [Newtonsoft.Json.JsonProperty("partySendersReferenceOutgoing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartySendersReferenceOutgoing { get; set; }
    
        /// <summary>Debtor payment reference details of incoming</summary>
        [Newtonsoft.Json.JsonProperty("partySendersReferenceIncoming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartySendersReferenceIncoming { get; set; }
    
        /// <summary>Creditor company name details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCompanyName { get; set; }
    
        /// <summary>Creditor company BIC details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCompanyBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCompanyBIC { get; set; }
    
        /// <summary>Creditor company flag details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCompanyFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCompanyFlag { get; set; }
    
        /// <summary>Creditor country name details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCountryName { get; set; }
    
        /// <summary>Creditor payment received date time details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryReceivedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryReceivedDateTime { get; set; }
    
        /// <summary>Creditor payment completion time details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCompletionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCompletionTime { get; set; }
    
        /// <summary>Payment deduction details for creditor</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDeducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryDeducts { get; set; }
    
        /// <summary>Payment total duration details for receiver</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryTotalDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryTotalDuration { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebitAccountId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>Specifies the name and address of the beneficiary of the guarantee request.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryCustomerName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>The unique reference number of payment</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderId { get; set; }
    
        /// <summary>Indicates the payment order product for which payment is initiated</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderProductId { get; set; }
    
        /// <summary>An external reference id for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("relatedReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string RelatedReference { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderingCustomerId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>Bank Identifier Code (BIC) of the Beneficiary bank.</summary>
        [Newtonsoft.Json.JsonProperty("bicId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BicId { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(71)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>Defines the default account to be used for reimbursement from the Applicant in the case of an Import Letter of Credit and the Drawee in the event of an Inward Collection.</summary>
        [Newtonsoft.Json.JsonProperty("applicantAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ApplicantAccountId { get; set; }
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string PaymentCurrency { get; set; }
    
        /// <summary>Indicates the payment amount for the defined term, amount and payment frequency. It will include principal, charge and interest</summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string PaymentAmount { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(22)]
        public string CreditValueDate { get; set; }
    
        /// <summary>Clearing channel specific details</summary>
        [Newtonsoft.Json.JsonProperty("clearingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ClearingId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>The unique reference number of payment</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string PaymentOrderId { get; set; }
    
        /// <summary>Indicates the customer id for the ordering customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OrderingCustomerId { get; set; }
    
        /// <summary>Indicates the name of Ordering Customer</summary>
        [Newtonsoft.Json.JsonProperty("orderingCustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderingCustomerName { get; set; }
    
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebitAccountId { get; set; }
    
        /// <summary>This is the payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>Date on which the transaction or payment gets processed, i.e. the processing date of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionDate { get; set; }
    
        /// <summary>The system application identifier that could be used as entry reference or used as prefix in unique transaction identifiers</summary>
        [Newtonsoft.Json.JsonProperty("systemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemId { get; set; }
    
        /// <summary>Indicates the recall status of the payment for which the recall has been initiated</summary>
        [Newtonsoft.Json.JsonProperty("recallStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecallStatus { get; set; }
    
        /// <summary>Indicates the reject reason code of the payment for which the recall has been rejected</summary>
        [Newtonsoft.Json.JsonProperty("rejectReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReasonCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The user input to accept/reject the override.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Debits 
    {
        /// <summary>Indicates the debit account number of the payment or transaction.</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string DebitAccountId { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("debitAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string DebitAccountIBAN { get; set; }
    
        /// <summary>Currency of the debit account. For example: USD, EUR etc.</summary>
        [Newtonsoft.Json.JsonProperty("debitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string DebitCurrency { get; set; }
    
        /// <summary>Date on which the amount will be debited for settlement</summary>
        [Newtonsoft.Json.JsonProperty("debitValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DebitValueDate { get; set; }
    
        /// <summary>The total debit amount including the charges associated for the payment</summary>
        [Newtonsoft.Json.JsonProperty("totalDebitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 19)]
        public double? TotalDebitAmount { get; set; }
    
        /// <summary>Display name or short name of the account specified.</summary>
        [Newtonsoft.Json.JsonProperty("accountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Credits 
    {
        /// <summary>Credit account identifier of the payment or transaction</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string CreditAccountId { get; set; }
    
        /// <summary>Indicates the IBAN of the credit account</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CreditAccountIBAN { get; set; }
    
        /// <summary>The credit value date i.e. tentative date on which the payment system will process the payment</summary>
        [Newtonsoft.Json.JsonProperty("requiredCreditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequiredCreditValueDate { get; set; }
    
        /// <summary>Reference quoted by the credit account for a payment</summary>
        [Newtonsoft.Json.JsonProperty("creditValueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreditValueDate { get; set; }
    
        /// <summary>Account name details of the creditor</summary>
        [Newtonsoft.Json.JsonProperty("creditAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditAccountName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Narratives3 
    {
        /// <summary>The additional text printed on descriptive statements in addition to the standard narrative and/or reference</summary>
        [Newtonsoft.Json.JsonProperty("narrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string Narrative { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInformations3 
    {
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65)]
        public string AdditionalInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemittanceInformations3 
    {
        /// <summary>Indicates the remittance information that is supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.</summary>
        [Newtonsoft.Json.JsonProperty("remittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string RemittanceInformation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Beneficiaries 
    {
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string BeneficiaryId { get; set; }
    
        /// <summary>Unique account identifier of the beneficiary account number.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string BeneficiaryAccountId { get; set; }
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryBIC { get; set; }
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(71)]
        public string BeneficiaryName { get; set; }
    
        /// <summary>Creditor country code details</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string BeneficiaryCountryCode { get; set; }
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string BeneficiaryIBAN { get; set; }
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountWithBankIBAN { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceReferences3 
    {
        /// <summary>It provides the reference of the invoice </summary>
        [Newtonsoft.Json.JsonProperty("invoiceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InvoiceReference { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Charges3 
    {
        /// <summary>Indicates the account to which the charges has to be levied. Used when charges are to be taken from a separate account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string ChargeAccountId { get; set; }
    
        /// <summary>When a charge account is specified, this field indicates the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ChargeAccountCurrencyId { get; set; }
    
        /// <summary>Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG</summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChargeType { get; set; }
    
        /// <summary>The description of the charge to be taken for payment</summary>
        [Newtonsoft.Json.JsonProperty("chargeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChargeName { get; set; }
    
        /// <summary>Specifies the currency of the charge amount. Allowed only when a charge amount is specified </summary>
        [Newtonsoft.Json.JsonProperty("chargeCurrencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ChargeCurrencyId { get; set; }
    
        /// <summary>Retrieves the Charge Amount after redeem</summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string ChargeAmount { get; set; }
    
        /// <summary>Holds the charge to be applied for the corresponding charge type for the order in the currency of the charge account</summary>
        [Newtonsoft.Json.JsonProperty("chargeAccountCurrencyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 19)]
        public double? ChargeAccountCurrencyAmount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BenPostSwiftAddrBeneficiarySWIFTAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Swift Address")]
        Beneficiary_Swift_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BenPostAddressLineBeneficiaryAddressLine1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary ISO Address Line")]
        Beneficiary_ISO_Address_Line = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RemittanceInformation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Details")]
        Payment_Details = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContextFieldContextName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Name")]
        Context_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContextFieldValueContextValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Value")]
        Context_Value = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeDetailsChargeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Type")]
        Charge_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeInfoChargeName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Description")]
        Charge_Description = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAmtChargeAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Amount")]
        Charge_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Currency")]
        Charge_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAccountAmtChargeAccountCurrencyAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge AC Currency Amount")]
        Charge_AC_Currency_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account")]
        Charge_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAccCurrChargeAccountCurrencyId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account Currency")]
        Charge_Account_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BenPostSwiftAddr2BeneficiarySWIFTAddress
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary Swift Address")]
        Beneficiary_Swift_Address = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BenPostAddressLine2BeneficiaryAddressLine1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Beneficiary ISO Address Line")]
        Beneficiary_ISO_Address_Line = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RemittanceInfo2RemittanceInformation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Payment Details")]
        Payment_Details = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContextField2ContextName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Name")]
        Context_Name = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContextFieldValue2ContextValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Context Value")]
        Context_Value = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeDetails2ChargeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Type")]
        Charge_Type = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeInfo2ChargeName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Description")]
        Charge_Description = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAmt2ChargeAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Amount")]
        Charge_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeCurr2ChargeCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Currency")]
        Charge_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAccountAmt2ChargeAccountCurrencyAmount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge AC Currency Amount")]
        Charge_AC_Currency_Amount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAcc2ChargeAccountId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account")]
        Charge_Account = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ChargeAccCurr2ChargeAccountCurrencyId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Charge Account Currency")]
        Charge_Account_Currency = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransactionDetails 
    {
        /// <summary>Message name identification details</summary>
        [Newtonsoft.Json.JsonProperty("messageNameIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageNameIdentification { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108