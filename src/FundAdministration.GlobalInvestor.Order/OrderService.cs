//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace FundAdministration.GlobalInvestor.Order.Orders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOrderService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates order transactions</summary>
        /// <param name="payload">postOrders Payload</param>
        /// <param name="referenceId">uniqueId for security purpose</param>
        /// <param name="token">unique token</param>
        /// <param name="username">username</param>
        /// <param name="company">company name</param>
        /// <param name="command">API operations like INVOKE, VALIDATE, PROCESS can be set or by default PROCESS is set</param>
        /// <returns>postOrders Success Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostOrdersSuccessResponse> PostOrdersAsync(_0BULKPayload payload, string? referenceId = null, string? token = null, string? username = null, string? company = null, string? command = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class _0BULKPayload 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public object? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaginationSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public string? Page { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public string? Size { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public string? Count { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public string? Total { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuditSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public string? StartTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public string? EndTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("processTime")]
        public string? ProcessTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SuccessHeaderstatusSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_MESSAGE")]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_CODE")]
        public string? HTTP_CODE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public string? RequestId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("responseId")]
        public string? ResponseId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eTag")]
        public string? ETag { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        public string? LastModified { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersSuccessheaderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public AuditSchema? Audit { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public SuccessHeaderstatusSchema? Status { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersrecordsSchema : System.Collections.ObjectModel.Collection<_0>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersSuccessbodyResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("records")]
        public PostOrdersrecordsSchema? Records { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersSuccessResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PostOrdersSuccessheaderResponse? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PostOrdersSuccessbodyResponse? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorHeaderstatusSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_MESSAGE")]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_CODE")]
        public string? HTTP_CODE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public string? RequestId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("responseId")]
        public string? ResponseId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eTag")]
        public string? ETag { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        public string? LastModified { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public System.Collections.Generic.ICollection<Details>? Details { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersErrorheaderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public AuditSchema? Audit { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public ErrorHeaderstatusSchema? Status { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersErrorbodyResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<Items>? Items { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostOrdersErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PostOrdersErrorheaderResponse? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public object? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class _0 
    {
        /// <summary>It specifies the type of record that is loaded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordIndicator")]
        public string? RecordIndicator { get; set; }= default!;
    
        /// <summary>External ID of the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalOrderReference")]
        public string? ExternalOrderReference { get; set; }= default!;
    
        /// <summary>TradeDate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>The date and time  (in DD/MM/YYYY format) when the order is received. The received date is used to calculate the trade date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receptionTimestamp")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReceptionTimestamp { get; set; }= default!;
    
        /// <summary>Valuedate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SettlementDate { get; set; }= default!;
    
        /// <summary>Internal ID of register.Allowed values are from the list of Ids defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalRegisterNumber")]
        public string? ExternalRegisterNumber { get; set; }= default!;
    
        /// <summary>Code for order type. For example : 0001(NAV of the day), 0002 (Reprise), 0003(Back-value)etc. The LoV is available in the CMESS table TA_TYPORDR.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderType")]
        public string? OrderType { get; set; }= default!;
    
        /// <summary>Forced NAV price to be applied for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public string? UnitPrice { get; set; }= default!;
    
        /// <summary>External ID of proxy used for joint accounts and registers with proxy.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalProxyRegisterNumber")]
        public string? ExternalProxyRegisterNumber { get; set; }= default!;
    
        /// <summary>Multifonds Transaction type code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Flag to redeem complete register positions. Allowed values : Y (for Yes), N (for No), or Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fullPositionFlag")]
        public string? FullPositionFlag { get; set; }= default!;
    
        /// <summary>Internal ID of the TA Fund in which the transaction is placed. Allowed values are from the list of fund Ids defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("TAFundCode")]
        public string? TAFundCode { get; set; }= default!;
    
        /// <summary>Share class code in which the transaction is placed. Allowed values are from the list of share classes in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("shareType")]
        public string? ShareType { get; set; }= default!;
    
        /// <summary>External ID of the type of security.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalSecurityIDCodeType")]
        public string? ExternalSecurityIDCodeType { get; set; }= default!;
    
        /// <summary>External ID of the security.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalSecurityIDCode")]
        public string? ExternalSecurityIDCode { get; set; }= default!;
    
        /// <summary>TA Fund Currency (in 3 letter ISO code, Eg: EUR). The LoV is available in the CMESS table MONNAIES.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quotationCurrency")]
        public string? QuotationCurrency { get; set; }= default!;
    
        /// <summary>Commission percentage to be forced for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forcedCommissionRate")]
        public string? ForcedCommissionRate { get; set; }= default!;
    
        /// <summary>Commission amount to be forced for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exceptionCommissionAmount")]
        public string? ExceptionCommissionAmount { get; set; }= default!;
    
        /// <summary>External ID of transfer-in register.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferInExternalRegisterNumber")]
        public string? TransferInExternalRegisterNumber { get; set; }= default!;
    
        /// <summary>Internal ID of Switch-in TA Fund. Allowed values are from the list of Fund Ids in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInTAFundCode")]
        public string? SwitchInTAFundCode { get; set; }= default!;
    
        /// <summary>Switch-in share class code for switch transactions. Allowed values are from the list of codes defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInShareClassCode")]
        public string? SwitchInShareClassCode { get; set; }= default!;
    
        /// <summary>External security ID type for switch in fund.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalSecurityIDCodeType2")]
        public string? ExternalSecurityIDCodeType2 { get; set; }= default!;
    
        /// <summary>External security ID for switch-in fund.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInExternalSecurityIDCode")]
        public string? SwitchInExternalSecurityIDCode { get; set; }= default!;
    
        /// <summary>TA Fund Currency (in 3 letter ISO code, Eg: EUR) for Switch-in fund. The LoV is available in the CMESS table MONNAIES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInQuotationCurrency")]
        public string? SwitchInQuotationCurrency { get; set; }= default!;
    
        /// <summary>Type of payment code of the transaction. For example: 01(Cash), 02(Cheque), 03(Transfer), 04(Cheque issue) etc. The LoV is available in the CMESS table TA_PAYTYP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentType")]
        public string? PaymentType { get; set; }= default!;
    
        /// <summary>Custody settlement type code based on data defined in the register main screen. For example : 0 (Existing register)etc. The LoV is available in the CMESS table TA_PRODUCT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("custodySettlementType")]
        public string? CustodySettlementType { get; set; }= default!;
    
        /// <summary>The currency (in 3 letter ISO code, Eg: EUR) in which the payments will be processed. The LoV is available in the CMESS table MONNAIES</summary>
        [System.Text.Json.Serialization.JsonPropertyName("paymentCurrency")]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Forced exchange rate applicable for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRate")]
        public string? ExchangeRate { get; set; }= default!;
    
        /// <summary>Forced external exchange rate applicable for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("userExchangeRate")]
        public string? UserExchangeRate { get; set; }= default!;
    
        /// <summary>Code for application of exchange rate. Allowed values: D (Divide), M (Multiply).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exchangeRateIndicator")]
        public string? ExchangeRateIndicator { get; set; }= default!;
    
        /// <summary>Multiplication factor for the exchange rate forced.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exRateMultiplicationFactor")]
        public string? ExRateMultiplicationFactor { get; set; }= default!;
    
        /// <summary>Limit Condition number.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("conditionNumber")]
        public string? ConditionNumber { get; set; }= default!;
    
        /// <summary>Transaction Amount. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderAmount")]
        public string? OrderAmount { get; set; }= default!;
    
        /// <summary>Number of shares to place in the transaction. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("shareQuantity")]
        public string? ShareQuantity { get; set; }= default!;
    
        /// <summary>Free text to enter an order description.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        /// <summary>Percentage of distributed commission .</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forcedDistributionCommissionPercentage")]
        public string? ForcedDistributionCommissionPercentage { get; set; }= default!;
    
        /// <summary>It specifies the mode in which the order is received. For example : 0001(Telephone), 0002(Fax)etc. The LoV is available in the CMESS table TA_ORDREC.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receptionMode")]
        public string? ReceptionMode { get; set; }= default!;
    
        /// <summary>Date on which simulation will be processed for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sendToTFCDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SendToTFCDate { get; set; }= default!;
    
        /// <summary>Exception commission percentage for commission type TA commission which will be considered to calculate the commission for this order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("TACommissionPercentage")]
        public string? TACommissionPercentage { get; set; }= default!;
    
        /// <summary>External ID of the bank.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("registerBankDetails")]
        public string? RegisterBankDetails { get; set; }= default!;
    
        /// <summary>Bank account number for payments related to the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string? BankAccountNumber { get; set; }= default!;
    
        /// <summary>Name of the bank account holder</summary>
        [System.Text.Json.Serialization.JsonPropertyName("bankAccountHolder")]
        public string? BankAccountHolder { get; set; }= default!;
    
        /// <summary>Redemption Contract ID used for the operation code 0022(Export Parts).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("redemptionContractNumber")]
        public string? RedemptionContractNumber { get; set; }= default!;
    
        /// <summary>Code for the settlement of money for saving plan and/or subscription transaction.  For example : 0000(Payment amount), 0001 (Use Due Amount) etc. The LoV is available in the CMESS table TA_DUEAMT.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementMoneyIndicator")]
        public string? SettlementMoneyIndicator { get; set; }= default!;
    
        /// <summary>Discount percentage(agreed by fund) for Dual Pricing functionality. This field will impact the management company fee. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public string? Discount { get; set; }= default!;
    
        /// <summary>Discount percentage (agreed by the agent) for dual pricing functionality. This field will impact the agent commission. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiverCommission")]
        public string? WaiverCommission { get; set; }= default!;
    
        /// <summary>External ID of the agent for operation code 0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentNumber")]
        public string? AgentNumber { get; set; }= default!;
    
        /// <summary>Flag to specify whether the order should be loaded to system with status confirmed. Allowed values : Y (for Yes), N (for No), or Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmedFlag")]
        public string? ConfirmedFlag { get; set; }= default!;
    
        /// <summary>Taxable interest per share on redemption.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("TISR")]
        public double? TISR { get; set; }= default!;
    
        /// <summary>Order number for switch transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchOrderNumber")]
        public string? SwitchOrderNumber { get; set; }= default!;
    
        /// <summary>Fund of fund split percentage</summary>
        [System.Text.Json.Serialization.JsonPropertyName("splitPercentage")]
        public string? SplitPercentage { get; set; }= default!;
    
        /// <summary>Amount of flat charge applicable for the transaction</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flatCharge")]
        public string? FlatCharge { get; set; }= default!;
    
        /// <summary>Management commission applicable for the order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("managementCommissionAmount")]
        public string? ManagementCommissionAmount { get; set; }= default!;
    
        /// <summary>Flag to specify whether this transactions is in scope of the Irish taxation. Allowed values : Y (in scope) , N (out of scope), or Null (=N)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("irishFinancialActFlag")]
        public string? IrishFinancialActFlag { get; set; }= default!;
    
        /// <summary>Forced Commission percentage for switch-in fund for switch order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInCommissionPercentage")]
        public string? SwitchInCommissionPercentage { get; set; }= default!;
    
        /// <summary>Forced Commission amount for switch-in fund for switch order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInCommissionAmount")]
        public string? SwitchInCommissionAmount { get; set; }= default!;
    
        /// <summary>Percentage of distributed commission for switch in fund.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInCommissionDistributionPercentage")]
        public string? SwitchInCommissionDistributionPercentage { get; set; }= default!;
    
        /// <summary>Exception commission for commission type TA commission of switch in fund. This field is considered to calculate the commission for this switch order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchInCommissionTAPercentage")]
        public string? SwitchInCommissionTAPercentage { get; set; }= default!;
    
        /// <summary>Original order number linked to the automated transfer done by the system into multiple NAV fund.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalOrderNumber")]
        public string? OriginalOrderNumber { get; set; }= default!;
    
        /// <summary>Salesman attached to the transaction. Allowed values are from the list of agents defined (with agent type = 0011 - Salesman) in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("salesmanNumber")]
        public string? SalesmanNumber { get; set; }= default!;
    
        /// <summary>Percentage of partial settlement of order. If the field is empty at MF fund level, this field will be blank and is not updatable.This field can be updated until the order is batched.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialSettlementPercentage")]
        public string? PartialSettlementPercentage { get; set; }= default!;
    
        /// <summary>The date on which the partial settlement will be made. This date has to be smaller or equal to the value date and greater or equal to the trade date.It can be updated until the order is batched.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialSettlementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PartialSettlementDate { get; set; }= default!;
    
        /// <summary>Letter of intent amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("letterOfIntentAmount")]
        public string? LetterOfIntentAmount { get; set; }= default!;
    
        /// <summary>Flag to allow cash movement associtated with this transaction. Alllowed values : Y (for yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("withCashFlag")]
        public string? WithCashFlag { get; set; }= default!;
    
        /// <summary>Internal ID of register.Allowed values are from the list of Ids defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalRegisterNumber")]
        public string? InternalRegisterNumber { get; set; }= default!;
    
        /// <summary>Internal ID of register in case of transfer.Allowed values are from the list of Ids defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalRegisterNumber2")]
        public string? InternalRegisterNumber2 { get; set; }= default!;
    
        /// <summary>Method code applicable for rounding. For example : 0001(Commercial rounding), 0002 (Round Credits Down, Debits Up) etc. If left blank, the system will apply the rounding method defined at static data entity levels. If filled in, this field will override the other levels of parameterization.The LoV is available in the CMESS table TA_ARRONDI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("roundingMethod")]
        public string? RoundingMethod { get; set; }= default!;
    
        /// <summary>Number of decimals applicable for the rounding of quantities. For example : 0(Integer), 1(1 Decimal Places) etc. The LoV is available in the CMESS table CODE_ARR.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("roundingQuantityDecimals")]
        public string? RoundingQuantityDecimals { get; set; }= default!;
    
        /// <summary>Flag to specify whether this transactions is in scope of the US taxation. Allowed values : Y (for Yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("USTaxFlag")]
        public string? USTaxFlag { get; set; }= default!;
    
        /// <summary>Equalization Credit amount available for operation code 0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eqCreditAmount")]
        public string? EqCreditAmount { get; set; }= default!;
    
        /// <summary>Equalization Debit amount available for operation code 0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eqDebitAmount")]
        public string? EqDebitAmount { get; set; }= default!;
    
        /// <summary>Revised CRP for operation code  0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revisedCRP")]
        public string? RevisedCRP { get; set; }= default!;
    
        /// <summary>Revised HWM for operation code  0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revisedHWM")]
        public string? RevisedHWM { get; set; }= default!;
    
        /// <summary>Revised GAV for operation code  0014(Reprise)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("revisedGAV")]
        public string? RevisedGAV { get; set; }= default!;
    
        /// <summary>Internal reference for order. It can contain up to 40 alphanumerical characters. This reference should be unique and the system will not allow allocating twice the same Internal reference to different orders.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalReference")]
        public string? InternalReference { get; set; }= default!;
    
        /// <summary>Flag to specify whether this transactions is in scope of the Swedish taxation. Allowed values : Y (for Yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swedishTaxFlag")]
        public string? SwedishTaxFlag { get; set; }= default!;
    
        /// <summary>Flag to exclude the commission should from the order amount. Allowed values Y (for Yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionExcludedFromOrderAmount")]
        public string? CommissionExcludedFromOrderAmount { get; set; }= default!;
    
        /// <summary>Register Type code. For example: 0001(Register), 0002(Bearer). 0003 (Global pool) etc.  The LoV is available in the CMESS table TA_REGIS.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("registerType")]
        public string? RegisterType { get; set; }= default!;
    
        /// <summary>Settlement type code allowed for the investor. For example: 0001 (Certificate), 0002 (Standard shares), 0003(NSCC) etc. The LoV is available in the CMESS table TA_SETTLE.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementType")]
        public string? SettlementType { get; set; }= default!;
    
        /// <summary>Deal type code for Cash handling. For example: 0001(Contractual), 0002(Semi-Contractual), 0003(Actual) etc. The LoV is available in the CMESS table TA_DEAL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealType")]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Free text field to mention any comments relating to this order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; set; }= default!;
    
        /// <summary>Discount percentage (agreed by the switch in fund) for dual pricing functionality. This field will impact the management company fee. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("discountIn")]
        public string? DiscountIn { get; set; }= default!;
    
        /// <summary>Discount percentage (agreed by the agent of switch in fund) for dual pricing functionality. This field will impact the agent commission. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiverCommissionIn")]
        public string? WaiverCommissionIn { get; set; }= default!;
    
        /// <summary>Percentage for the transaction field is available for LP funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("capitalPercentage")]
        public string? CapitalPercentage { get; set; }= default!;
    
        /// <summary>Flag to indicate that it is the closing order for LP funds. Allowed values : Y (for Yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("closingOrderFlag")]
        public string? ClosingOrderFlag { get; set; }= default!;
    
        /// <summary>Flagpaymentcurrency</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagPaymentCurrency")]
        public string? FlagPaymentCurrency { get; set; }= default!;
    
        /// <summary>Flagpaymentcurrencyin</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagPaymentCurrencyIn")]
        public string? FlagPaymentCurrencyIn { get; set; }= default!;
    
        /// <summary>Share class code for series of shares funds. Allowed values are from the list of codes defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("TPARTSharesSeries")]
        public string? TPARTSharesSeries { get; set; }= default!;
    
        /// <summary>External ID of debit bank</summary>
        [System.Text.Json.Serialization.JsonPropertyName("registerBankDebitDetails")]
        public string? RegisterBankDebitDetails { get; set; }= default!;
    
        /// <summary>Debit bank account number for payments related to this order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("registerBankDebitDetailsAccount")]
        public string? RegisterBankDebitDetailsAccount { get; set; }= default!;
    
        /// <summary>Selectprice</summary>
        [System.Text.Json.Serialization.JsonPropertyName("selectPrice")]
        public string? SelectPrice { get; set; }= default!;
    
        /// <summary>Forced Price if the field select price code is 0000(Forced Price). This price applies to the transaction and overrides any other price received unless a share price has been forced in Share price field for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forcePrice")]
        public double? ForcePrice { get; set; }= default!;
    
        /// <summary>Code for type of price to be used from set up done at ADL parameter or Select price screen for Switch In fund. For example : 0000(Forced Price), 0001(Mid Price)etc. The LoV is available in the CMESS table TA_SELPR.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("selectPriceLegIn")]
        public string? SelectPriceLegIn { get; set; }= default!;
    
        /// <summary>Forced Price for Switch In fund if the field select price code is 0000(Forced Price) . This price applies to the transaction and overrides any other price received unless a share price has been forced in Share price field for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forcePriceLegIn")]
        public double? ForcePriceLegIn { get; set; }= default!;
    
        /// <summary>Flag to exclude from Swinging Single Price (SSP) Netting. Allowed values : Y (for Yes), N (for No), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagExcludeNet")]
        public string? FlagExcludeNet { get; set; }= default!;
    
        /// <summary>Flag to exclude from Swinging Single Price (SSP) Netting for Switch In Fund.  Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagExcludeNetIn")]
        public string? FlagExcludeNetIn { get; set; }= default!;
    
        /// <summary>Flag to specify non-crystallizing for side pocket for series of share funds. This flag is available only for 0007 (Switch) and â¬Ü0065(Conversion).  Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagNonCrystSP")]
        public string? FlagNonCrystSP { get; set; }= default!;
    
        /// <summary>Flag to allow the history of transactions to be carried along with the transferred units irrespective of whether fund is taxable of not. When change of beneficial owner is N, lots will not be transferred along with history of transaction and change of beneficial owner is ticked lot will be transferred without any history. Allowed values : Y (to transfer), N (not to transfer), Null (=N).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagChangeBeneficial")]
        public string? FlagChangeBeneficial { get; set; }= default!;
    
        /// <summary>Flag to allow debit order in multiple series. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("multiSeriesFlag")]
        public string? MultiSeriesFlag { get; set; }= default!;
    
        /// <summary>Client Trading Desk code used in this Order for FX exporting. For example : 00 -No FX exporting, 01(FX exporting), 02(FX exporting for P/L only).The LoV is available in the CMESS table CLNT_TDSK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("clientTradingDesk")]
        public string? ClientTradingDesk { get; set; }= default!;
    
        /// <summary>Flag to specify this order is a correction deal. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("correctionDealFlag")]
        public string? CorrectionDealFlag { get; set; }= default!;
    
        /// <summary>Error/Correction Identifier for a correction or reversal deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("errorCorrectionIdentifier")]
        public string? ErrorCorrectionIdentifier { get; set; }= default!;
    
        /// <summary>Actual trade date for correction deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualTradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActualTradeDate { get; set; }= default!;
    
        /// <summary>Actual value date for correction deal.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualValueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActualValueDate { get; set; }= default!;
    
        /// <summary>It specifies the Profit and loss method code. For example: 0001(Method-1 Dublin), 0002(Method-2 Luxembourg).The LoV is available in the CMESS table TA_METHPL.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profitLossMethod")]
        public string? ProfitLossMethod { get; set; }= default!;
    
        /// <summary>Flag to specify that contract note needs to be produced for correction deal. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractNoteProduceStop")]
        public string? ContractNoteProduceStop { get; set; }= default!;
    
        /// <summary>Flag to specify there is internal cash movement related to this transaction. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("internalCashFlag")]
        public string? InternalCashFlag { get; set; }= default!;
    
        /// <summary>Flag to specify the order is in scope of Global ordering functionality. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("globalOrdering")]
        public string? GlobalOrdering { get; set; }= default!;
    
        /// <summary>Bulking or netting code for global ordering functionality. For example : 0001(Individual orders in fund currency), 0002 (Individual orders in payment currency) etc. The LoV is available in the CMESS table TYPE_BN.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rnsBulkingNetting")]
        public string? RnsBulkingNetting { get; set; }= default!;
    
        /// <summary>Date and Time order is received from trusted STP Counterparty source to be used instead of CUT_OFF to calculate the Trade Date and Value Date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("receptionTimestampTS")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReceptionTimestampTS { get; set; }= default!;
    
        /// <summary>External ID of STP counterparts</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sTPCounterpart")]
        public string? STPCounterpart { get; set; }= default!;
    
        /// <summary>Narrative of Swift message.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("swiftNarrative")]
        public string? SwiftNarrative { get; set; }= default!;
    
        /// <summary>Code for message source. For example : 0010 (NSCC Generic), 1502(Swift FIN) etc. The LoV is available in the CMESS table TA_ORDREC2.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalMessageLocation")]
        public string? OriginalMessageLocation { get; set; }= default!;
    
        /// <summary>Provider ID Code for external Register Equivalence.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("secondaryProviderId")]
        public string? SecondaryProviderId { get; set; }= default!;
    
        /// <summary>Flag to allow temporary register creation. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagRegAutoCreation")]
        public string? FlagRegAutoCreation { get; set; }= default!;
    
        /// <summary>Flag to specify that payment should be put on hold for this order. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("holdPayment")]
        public string? HoldPayment { get; set; }= default!;
    
        /// <summary>Initial commission charge percentage at Order level. This can not be greater than the maximum % allowed by the fund.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("appliedInitialChargeperc")]
        public string? AppliedInitialChargeperc { get; set; }= default!;
    
        /// <summary>Flagbypass</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagByPass")]
        public string? FlagByPass { get; set; }= default!;
    
        /// <summary>Transaction code for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCTransactionCode")]
        public string? NSCCTransactionCode { get; set; }= default!;
    
        /// <summary>Transaction type for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCTransactionType")]
        public string? NSCCTransactionType { get; set; }= default!;
    
        /// <summary>Matrix level for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCMatrixLevel")]
        public string? NSCCMatrixLevel { get; set; }= default!;
    
        /// <summary>The Country code (in 2 letter format eg: LU) for NSCC order.  The LoV is available in the CMESS table PAYS.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCCountryCode")]
        public string? NSCCCountryCode { get; set; }= default!;
    
        /// <summary>State code. Allowed value is from the list of State Codes defined in the MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCStateCode")]
        public string? NSCCStateCode { get; set; }= default!;
    
        /// <summary>Dividend code for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCDividendCode")]
        public string? NSCCDividendCode { get; set; }= default!;
    
        /// <summary>Transfer code for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NsccTransferCode")]
        public string? NsccTransferCode { get; set; }= default!;
    
        /// <summary>Reference code for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCB52Reference")]
        public string? NSCCB52Reference { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress1")]
        public string? NSCCAddress1 { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress2")]
        public string? NSCCAddress2 { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress3")]
        public string? NSCCAddress3 { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress4")]
        public string? NSCCAddress4 { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress5")]
        public string? NSCCAddress5 { get; set; }= default!;
    
        /// <summary>Address for NSCC orders</summary>
        [System.Text.Json.Serialization.JsonPropertyName("NSCCAddress6")]
        public string? NSCCAddress6 { get; set; }= default!;
    
        /// <summary>Client Trading Desk code used for FX exporting.For example : 0001(In scope of fund tdsk), 0002 (In scope of hedge FX) etc.The LoV is available in the CMESS table FND_TDSK.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundTradingProcess")]
        public string? FundTradingProcess { get; set; }= default!;
    
        /// <summary>Trade date for switch in leg of switch transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchinTradedate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SwitchinTradedate { get; set; }= default!;
    
        /// <summary>Value date for switch in leg of switch transaction.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchinValuedate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SwitchinValuedate { get; set; }= default!;
    
        /// <summary>Accrued dividend amount for the order for daily dividend funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("accrualDividend")]
        public double? AccrualDividend { get; set; }= default!;
    
        /// <summary>Agentgroup</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentGroup")]
        public string? AgentGroup { get; set; }= default!;
    
        /// <summary>Profit/loss carry forward</summary>
        [System.Text.Json.Serialization.JsonPropertyName("LPMigrationPLCF")]
        public double? LPMigrationPLCF { get; set; }= default!;
    
        /// <summary>Hurdle carry forward</summary>
        [System.Text.Json.Serialization.JsonPropertyName("LPMigrationHCF")]
        public double? LPMigrationHCF { get; set; }= default!;
    
        /// <summary>Flag to enable non crystallization perfomance fee. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nonCrystPF")]
        public string? NonCrystPF { get; set; }= default!;
    
        /// <summary>Flag to perform redeemption by LIFO method. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("redeemByLIFO")]
        public string? RedeemByLIFO { get; set; }= default!;
    
        /// <summary>Flag to specify original cash for performance fee funds with method 08(Fund level Weighted average). Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("originalCash")]
        public string? OriginalCash { get; set; }= default!;
    
        /// <summary>Flag to enable partial payment for this order. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("partialPaymentIndicator")]
        public string? PartialPaymentIndicator { get; set; }= default!;
    
        /// <summary>Estimated Nav for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedNAV")]
        public string? EstimatedNAV { get; set; }= default!;
    
        /// <summary>Groupcode</summary>
        [System.Text.Json.Serialization.JsonPropertyName("GROUPCODE")]
        public string? GROUPCODE { get; set; }= default!;
    
        /// <summary>Flag to allow inheritance of Group 1 and Group 2 Units following a Switch / Conversion. Allowed values : Y (for Yes), N (for No)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flgInheritG1G2")]
        public string? FlgInheritG1G2 { get; set; }= default!;
    
        /// <summary>Date (in DD/MM/YYYY format) on which the transaction placed. Transaction Date is used to determine the applicable ISA Subscription Limits and Tax year.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransDate { get; set; }= default!;
    
        /// <summary>Advised transaction available for share classes in scope of MIFID. For example : A(Advised), N(Not Advised), U(Unknown). The Lov is available in the CMESS table MIFID_TRN.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("advisedTransaction")]
        public string? AdvisedTransaction { get; set; }= default!;
    
        /// <summary>Comment for PE/RE orders.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("PERealEstComment")]
        public string? PERealEstComment { get; set; }= default!;
    
        /// <summary>Order No.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]
        public double? OrderNo { get; set; }= default!;
    
        /// <summary>External Id of the agent</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalAgentReference")]
        public string? ExternalAgentReference { get; set; }= default!;
    
        /// <summary>Commission percentage to be forced for this order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("subAgentForcedCommissionPercentage")]
        public string? SubAgentForcedCommissionPercentage { get; set; }= default!;
    
        /// <summary>Operation code for switches. Allowed values : 0003(Switch redemption) and 0004(Switch subscription)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("switchOperationCode")]
        public string? SwitchOperationCode { get; set; }= default!;
    
        /// <summary>Commission amount to be forced for this order</summary>
        [System.Text.Json.Serialization.JsonPropertyName("forceAmount")]
        public string? ForceAmount { get; set; }= default!;
    
        /// <summary>TypeofCommission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionType")]
        public string? CommissionType { get; set; }= default!;
    
        /// <summary>External reference</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; set; }= default!;
    
        /// <summary>The date when the order is received. </summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReceivedDate { get; set; }= default!;
    
        /// <summary>Transfer type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferType")]
        public string? TransferType { get; set; }= default!;
    
        /// <summary>Product ID</summary>
        [System.Text.Json.Serialization.JsonPropertyName("productNumber")]
        public string? ProductNumber { get; set; }= default!;
    
        /// <summary>Deal in amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dealInAmount")]
        public string? DealInAmount { get; set; }= default!;
    
        /// <summary>Comm. method</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commMethod")]
        public string? CommMethod { get; set; }= default!;
    
        /// <summary>Market code</summary>
        [System.Text.Json.Serialization.JsonPropertyName("marketCode")]
        public string? MarketCode { get; set; }= default!;
    
        /// <summary>flag default split</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flagDefaultSplit")]
        public string? FlagDefaultSplit { get; set; }= default!;
    
        /// <summary>SDRT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flgSdrt")]
        public string? FlgSdrt { get; set; }= default!;
    
        /// <summary>In specie</summary>
        [System.Text.Json.Serialization.JsonPropertyName("flgInSpecie")]
        public string? FlgInSpecie { get; set; }= default!;
    
        /// <summary>It specifies the first subscription start date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("firstSubsDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FirstSubsDate { get; set; }= default!;
    
        /// <summary>Investment amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("investmentAmount")]
        public string? InvestmentAmount { get; set; }= default!;
    
        /// <summary>Split (%)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("ukSplitPercentage")]
        public string? UkSplitPercentage { get; set; }= default!;
    
        /// <summary>Split Amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nSplitAmount")]
        public string? NSplitAmount { get; set; }= default!;
    
        /// <summary>Initial charge (%)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("initialChargePercentage")]
        public string? InitialChargePercentage { get; set; }= default!;
    
        /// <summary>Agent comm. (%)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("agentForcedCommissionPercentage")]
        public string? AgentForcedCommissionPercentage { get; set; }= default!;
    
        /// <summary>Waiver comm. (%)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("waiverCommissionPercentage")]
        public string? WaiverCommissionPercentage { get; set; }= default!;
    
        /// <summary>Discount (%)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]
        public string? DiscountPercentage { get; set; }= default!;
    
        /// <summary>Trans. charge</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transactionCharge")]
        public string? TransactionCharge { get; set; }= default!;
    
        /// <summary>Transferout quantity</summary>
        [System.Text.Json.Serialization.JsonPropertyName("transferoutQuantity")]
        public string? TransferoutQuantity { get; set; }= default!;
    
        /// <summary>Split Manager</summary>
        [System.Text.Json.Serialization.JsonPropertyName("managerCode")]
        public double? ManagerCode { get; set; }= default!;
    
        /// <summary>Percentage to be allocated to the manager</summary>
        [System.Text.Json.Serialization.JsonPropertyName("splitPct")]
        public double? SplitPct { get; set; }= default!;
    
        /// <summary>Amount to be allocated to the manager. Amount and decimals need to be separated by a point.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("splitAmount")]
        public double? SplitAmount { get; set; }= default!;
    
        /// <summary>TA Fund ID in which the shareholder will place the transaction of FOF fund. Allowed values are from the list of Fund IDs defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofNumber")]
        public string? FofNumber { get; set; }= default!;
    
        /// <summary>Underlying TA fund ID for orders in FOF funds. Allowed values are from the list of Fund IDs defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofFundCode")]
        public string? FofFundCode { get; set; }= default!;
    
        /// <summary>Underlying share class code for orders in FOF fund. Allowed values are from the list of share class codes defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofShareClassCode")]
        public string? FofShareClassCode { get; set; }= default!;
    
        /// <summary>Split percentage for FOF and underlying funds.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofSplitPercentage")]
        public string? FofSplitPercentage { get; set; }= default!;
    
        /// <summary>Code for type of price to be used from set up done at ADL parameter or Select price screen for FOF Funds. For example : 0000 -Forced Price, 0001 - Mid Price. The LoV is available in the CMESS table TA_SELPR.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofSelectPrice")]
        public string? FofSelectPrice { get; set; }= default!;
    
        /// <summary>Force Price for FOF Funds if select price code is 0000(Forced Price) . This price applies to the transaction and overrides any other price received unless a share price has been forced in Share price field for the order.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fofForcePrice")]
        public double? FofForcePrice { get; set; }= default!;
    
        /// <summary>Contract number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contractNumber")]
        public double? ContractNumber { get; set; }= default!;
    
        /// <summary>No of units  used for the LOT</summary>
        [System.Text.Json.Serialization.JsonPropertyName("quantityUsed")]
        public string? QuantityUsed { get; set; }= default!;
    
        /// <summary>Transfer lot no.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("historicalTransferNumber")]
        public double? HistoricalTransferNumber { get; set; }= default!;
    
        /// <summary>TA Fund ID in which the shareholder will place the transaction of FFM fund. Allowed values are from the list of Fund IDs defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundManagerSplitFofNumb")]
        public string? FundManagerSplitFofNumb { get; set; }= default!;
    
        /// <summary>Underlying TA fund ID for orders in FFM fund. Allowed values are from the list of Fund IDs defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundManagerSplitFofFundCode")]
        public string? FundManagerSplitFofFundCode { get; set; }= default!;
    
        /// <summary>Manager ID for FFM funds. Allowed values are from the list of Ids defined in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundManagerSplitFofShareClassCode")]
        public string? FundManagerSplitFofShareClassCode { get; set; }= default!;
    
        /// <summary>Split percentage for FFM and underlying funds</summary>
        [System.Text.Json.Serialization.JsonPropertyName("fundManagerSplitFofSplitPercentage")]
        public string? FundManagerSplitFofSplitPercentage { get; set; }= default!;
    
        /// <summary>Multi series share class code for seris of shares funds. Allowed values are from the list of share classes in MFGI.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("multiSeriesShareClass")]
        public string? MultiSeriesShareClass { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Body 
    {
        [System.Text.Json.Serialization.JsonPropertyName("orders")]
        public System.Collections.Generic.ICollection<_0>? Orders { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Details 
    {
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Items 
    {
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016