//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace FundAdministration.GlobalInvestor.Order.Announcements
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAnnouncementService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Dividend Payments</summary>
        /// <param name="payload">postDividendPayment Payload</param>
        /// <param name="referenceId">uniqueId for security purpose</param>
        /// <param name="token">unique token</param>
        /// <param name="username">username</param>
        /// <param name="company">company name</param>
        /// <param name="command">API operations like INVOKE, VALIDATE, PROCESS can be set or by default PROCESS is set</param>
        /// <returns>postDividendPayment Success Response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostDividendPaymentSuccessResponse> PostDividendPaymentAsync(_0BULKPayload payload, string? referenceId = null, string? token = null, string? username = null, string? company = null, string? command = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class _0BULKPayload 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public object? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public Body? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PaginationSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public string? Page { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public string? Size { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public string? Count { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public string? Total { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AuditSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public string? StartTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public string? EndTime { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("processTime")]
        public string? ProcessTime { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SuccessHeaderstatusSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_MESSAGE")]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_CODE")]
        public string? HTTP_CODE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public string? RequestId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("responseId")]
        public string? ResponseId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eTag")]
        public string? ETag { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        public string? LastModified { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentSuccessheaderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public AuditSchema? Audit { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public SuccessHeaderstatusSchema? Status { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentrecordsSchema : System.Collections.ObjectModel.Collection<_0>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentSuccessbodyResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("records")]
        public PostDividendPaymentrecordsSchema? Records { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentSuccessResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PostDividendPaymentSuccessheaderResponse? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public PostDividendPaymentSuccessbodyResponse? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ErrorHeaderstatusSchema 
    {
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_MESSAGE")]
        public string? HTTP_MESSAGE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HTTP_CODE")]
        public string? HTTP_CODE { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        public string? RequestId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("responseId")]
        public string? ResponseId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("eTag")]
        public string? ETag { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        public string? LastModified { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public System.Collections.Generic.ICollection<Details>? Details { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentErrorheaderResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public PaginationSchema? Pagination { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("audit")]
        public AuditSchema? Audit { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public ErrorHeaderstatusSchema? Status { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public string? ReferenceId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentErrorbodyResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<Items>? Items { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PostDividendPaymentErrorResponse 
    {
        [System.Text.Json.Serialization.JsonPropertyName("header")]
        public PostDividendPaymentErrorheaderResponse? Header { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public object? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class _0 
    {
        /// <summary>It specifies the type of record that is loaded</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordIndicator")]
        public string? RecordIndicator { get; set; }= default!;
    
        /// <summary>It specifies the type of Security external identifier.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalSecurityIDCodeType")]
        public string? ExternalSecurityIDCodeType { get; set; }= default!;
    
        /// <summary>It specifies the External identifier for security in interfaced orders.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalSecurityIDCode")]
        public string? ExternalSecurityIDCode { get; set; }= default!;
    
        /// <summary>It specifies the TA fund currency for which the dividend is being created (in 3 letter ISO code, Eg: EUR).</summary>
        [System.Text.Json.Serialization.JsonPropertyName("referenceCurrency")]
        public string? ReferenceCurrency { get; set; }= default!;
    
        /// <summary>It specifies the chronological system generated Dividend sequence number.Automatically inserted by the application, not updatable.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public double? SequenceNumber { get; set; }= default!;
    
        /// <summary>It specifies the commission type applied on the dividend. Only 0001 - Percentage is applicable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionCode")]
        public string? CommissionCode { get; set; }= default!;
    
        /// <summary>Ratein%ofthecommission</summary>
        [System.Text.Json.Serialization.JsonPropertyName("commissionPercentage")]
        public double? CommissionPercentage { get; set; }= default!;
    
        /// <summary>It specifies the Dividend amount per share distributed by the TFC</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dividendPerShare")]
        public double? DividendPerShare { get; set; }= default!;
    
        /// <summary>It specifies Execution date of the dividend.The execution date should be always greater than the Record date.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExDate { get; set; }= default!;
    
        /// <summary>TradeDate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tradeDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TradeDate { get; set; }= default!;
    
        /// <summary>Valuedate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SettlementDate { get; set; }= default!;
    
        /// <summary>It specifies the dividend period start date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodStartDate { get; set; }= default!;
    
        /// <summary>It specifies the dividend period end date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("periodEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodEndDate { get; set; }= default!;
    
        /// <summary>Flag to specify whether diviend has to be distributed  or not. Allowed values: Y=When this box is checked it means that the dividend is being paid out effectively.N=When this box is not checked it means that the information given on this screen is for information purposes only Null = N</summary>
        [System.Text.Json.Serialization.JsonPropertyName("distributionFlag")]
        public string? DistributionFlag { get; set; }= default!;
    
        /// <summary>The Date on which the system will calculate the register position for the Dividend payment. The system takes into account all positions available at the end of this date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RecordDate { get; set; }= default!;
    
        /// <summary>This field specifies The Taxable interest per share for distributions (TISD) figures is made available for  TA Fund share classes in scope of EUSD.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("TISD")]
        public string? TISD { get; set; }= default!;
    
        /// <summary>Flag to specify if EUSD tax to be calculated on Dividend to be distributed. Allowed values :Y = Taxable and N= Not Taxable, Null = N</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxableFlag")]
        public string? TaxableFlag { get; set; }= default!;
    
        /// <summary>Flag to specify  if the dividend is a deemed distribution.Allowed values : Y (enable), N (disable), Null (=N)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deemedDistributionFlag")]
        public string? DeemedDistributionFlag { get; set; }= default!;
    
        /// <summary>This field specifies whether the Dividend Per Share is a net income, gross income or UK Gross rate of group 1By default, the system will insert 01 - Net income rate in this field as usual, the distribution rates are expressed as net. LoV is available in Cmess table RE_RATETYP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("rateType")]
        public string? RateType { get; set; }= default!;
    
        /// <summary>This field specfies the tax rate to be applied to a distribution when  Rate type is 03 - UK Gross rate.All the registers, irrespective of the register's country of residence, having position in a fund declaring dividend with rate type 03 - UK Gross Rate will be taxed at the rate specified in this field</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxRate")]
        public double? TaxRate { get; set; }= default!;
    
        /// <summary>This field specifies whether the distribution is a UK dividend income distribution or a UK interest income distribution. LoV is available ion Cmess table RE_INCMTYP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("incomeType")]
        public string? IncomeType { get; set; }= default!;
    
        /// <summary>This field specfies whether the distribution is an interim or a final distribution. LoV is available in Cmess table RE_DISTTYP.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("distributionType")]
        public string? DistributionType { get; set; }= default!;
    
        /// <summary>This field specifies the Equalization rate per share class to be applied on the Group 2 shares to determine the Equalization amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("equalizationRate")]
        public double? EqualizationRate { get; set; }= default!;
    
        /// <summary>This field specifies Franked income as a percentage of the Gross amount of UK dividend distribution to enable the system to calculate the split between franked and unfranked income in the whole distributed amount.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("frankedIncomePercentage")]
        public double? FrankedIncomePercentage { get; set; }= default!;
    
        /// <summary>This field specifies Eligible income as a percentage of the Gross amount of UK Interest distribution to enable the system to calculate the split between eligible and ineligible income in the whole distributed amount for reporting purpose</summary>
        [System.Text.Json.Serialization.JsonPropertyName("eligibleIncomePercentage")]
        public double? EligibleIncomePercentage { get; set; }= default!;
    
        /// <summary>This field specfies the Corporation Tax amount of the Distribution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("corporationTaxRate")]
        public double? CorporationTaxRate { get; set; }= default!;
    
        /// <summary>This field specfies the Corporation Tax amount per unit of this Distribution</summary>
        [System.Text.Json.Serialization.JsonPropertyName("corporationTaxPerUnit")]
        public double? CorporationTaxPerUnit { get; set; }= default!;
    
        /// <summary>If this flag  when set to Y, the dividend will be loaded as confirmed. Allowed values : Y (to enable), N (to disable), Null (=N)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("confirmedFlag")]
        public string? ConfirmedFlag { get; set; }= default!;
    
        /// <summary>This field specfies the record date for grouped dividend</summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordDateGrpDividend")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RecordDateGrpDividend { get; set; }= default!;
    
        /// <summary>This flag allows having the dividend paid out generated in fund quotation currency only.Allowed values : Y (to enable), N (to disable), Null (=N)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dividendQuotationCcyFlag")]
        public string? DividendQuotationCcyFlag { get; set; }= default!;
    
        /// <summary>This field specfies the number days that needs to be added to the execution days in case dividend is payed to the investor</summary>
        [System.Text.Json.Serialization.JsonPropertyName("settlementDatePayment")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SettlementDatePayment { get; set; }= default!;
    
        /// <summary>This flag when ticked will update the share groups when a dividend period ends and no dividend has to be paid. This function is only available for the UK dividend Model Allowed values : Y (to enable), N (to disable), Null (=N)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("FLGGRPUPD")]
        public string? FLGGRPUPD { get; set; }= default!;
    
        /// <summary>Taxcode</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxCode")]
        public string? TaxCode { get; set; }= default!;
    
        /// <summary>Amount</summary>
        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public double? TaxAmount { get; set; }= default!;
    
        /// <summary>UK Source Interest Income distribut. rate/unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UKSourceInterestIncome")]
        public double? UKSourceInterestIncome { get; set; }= default!;
    
        /// <summary>Other interest distribution rate per unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherInterestDistributionRate")]
        public double? OtherInterestDistributionRate { get; set; }= default!;
    
        /// <summary>UK Dividends distribution rate per unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UKDividendsDistributionRate")]
        public double? UKDividendsDistributionRate { get; set; }= default!;
    
        /// <summary>Other Items</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherItems")]
        public double? OtherItems { get; set; }= default!;
    
        /// <summary>Schedule A expenses rate per unit (Gross)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schAGrossExpensesRate")]
        public double? SchAGrossExpensesRate { get; set; }= default!;
    
        /// <summary>Schedule A expenses rate per unit (Net)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schANetExpensesRate")]
        public double? SchANetExpensesRate { get; set; }= default!;
    
        /// <summary>Other income expenses rate per unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("otherIncomeExpensesRate")]
        public double? OtherIncomeExpensesRate { get; set; }= default!;
    
        /// <summary>Sch. A UK Inc. Tax deducted rate/unit (Gross)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schAUKGrossIncTaxDeducted")]
        public double? SchAUKGrossIncTaxDeducted { get; set; }= default!;
    
        /// <summary>Sch. A UK Inc. Tax deducted rate/unit (Net)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schAUKNetIncTaxDeducted")]
        public double? SchAUKNetIncTaxDeducted { get; set; }= default!;
    
        /// <summary>UK Source Interest Inc. Tax deducted rate/unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("UKSourceInterestIncTaxDeducted")]
        public double? UKSourceInterestIncTaxDeducted { get; set; }= default!;
    
        /// <summary>Notional Tax Credit rate</summary>
        [System.Text.Json.Serialization.JsonPropertyName("notionalTaxCreditrate")]
        public double? NotionalTaxCreditrate { get; set; }= default!;
    
        /// <summary>Capital Allowance rate per unit</summary>
        [System.Text.Json.Serialization.JsonPropertyName("capitalAllowanceRate")]
        public double? CapitalAllowanceRate { get; set; }= default!;
    
        /// <summary>Schedule A distribution rate (Gross)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schAGrossDistributionRate")]
        public double? SchAGrossDistributionRate { get; set; }= default!;
    
        /// <summary>Schedule A distribution rate (Net)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schANetDistributionRate")]
        public double? SchANetDistributionRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Body 
    {
        [System.Text.Json.Serialization.JsonPropertyName("annoncementses")]
        public System.Collections.Generic.ICollection<_0>? Annoncementses { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Details 
    {
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Items 
    {
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016